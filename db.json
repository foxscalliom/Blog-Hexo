{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/head.jpg","path":"images/head.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/git常用命令总结.md","hash":"10cbe8e61fbf1ad74264968af5e4b34dbe8c4fa8","modified":1641720523395},{"_id":"source/_posts/如何优雅的在centos上使用nginx.md","hash":"ac134347d8f29e9ea4e308f8c610e3301edd20a8","modified":1641923920645},{"_id":"source/_posts/hello-world.md","hash":"1c30eb9734fdaa6790475b5e6bf5f4b3e92ade1d","modified":1641720523395},{"_id":"source/_posts/在centos7安装nodejs并升级nodejs版本.md","hash":"1d3a3b8f0a750d1481990f48a9f8df7da606a5c2","modified":1641720523395},{"_id":"source/categories/index.md","hash":"92b59b7bad94f90c393ee0d2681648e4f01d1216","modified":1641720523395},{"_id":"source/tags/index.md","hash":"8bb0bec2aba6aabd07fa9defe489589be42b1552","modified":1641720523395},{"_id":"source/_posts/如何优雅的使用ES6.md","hash":"cd955b13fcf71e0848ee0321864067774f1b6622","modified":1641920125947},{"_id":"source/_posts/如何让你的代码更优雅.md","hash":"3889bc8272b02efb700b18b694cc6284ca205cec","modified":1641721015915},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1641720523396},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1641720523396},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1641720523396},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1641720523396},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1641720523396},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1641720523396},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1641720523397},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1641720523414},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1641720523397},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1641720523398},{"_id":"themes/next/_config.yml","hash":"dea8cab89e6a266f622c6586575834418738b837","modified":1641737492513},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1641720523402},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1641720523398},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1641720523398},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1641720523398},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1641720523398},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1641720523399},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1641720523399},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1641720523397},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1641720523399},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1641720523413},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1641720523414},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1641720523413},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1641720523416},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1641720523414},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1641720523405},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1641720523414},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1641720523414},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1641720523399},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1641720523402},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1641720523402},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1641720523402},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1641720523403},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1641720523402},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1641720523403},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1641720523403},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1641720523403},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1641720523402},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1641720523403},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1641720523403},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1641720523403},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1641720523404},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1641720523404},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1641720523404},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1641720523404},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1641720523405},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1641720523404},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1641720523399},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1641720523405},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1641720523405},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1641720523404},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1641720523400},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1641720523400},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1641720523401},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1641720523400},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1641720523401},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1641720523400},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1641720523401},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1641720523401},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1641720523401},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1641720523400},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1641720523401},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1641720523401},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1641720523405},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1641720523405},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1641720523407},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1641720523406},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1641720523404},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c2835ff083d87e661ccc487315191b5f9d437070","modified":1641720523406},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1641720523405},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1641720523407},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1641720523408},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1641720523409},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1641720523410},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1641720523409},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1641720523409},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1641720523411},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1641720523414},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1641720523412},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1641720523415},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1641720523416},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1641720523416},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1641720523416},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1641720523416},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1641720523416},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1641720523416},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1641720523412},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1641720523416},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1641720523417},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1641720523417},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1641720523417},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1641720523417},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1641720523417},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1641720523416},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1641720523417},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1641720523417},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1641720523417},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1641720523410},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1641720523418},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1641720523430},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1641720523425},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1641720523418},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1641720523428},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1641720523431},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1641720523430},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1641720523430},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1641720523431},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1641720523428},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1641720523431},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1641720523410},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1641720523428},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1641720523429},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1641720523429},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1641720523429},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1641720523431},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1641720523429},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1641720523429},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1641720523429},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1641720523430},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1641720523428},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1641720523428},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1641720523417},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1641720523428},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1641720523406},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1641720523429},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1641720523406},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1641720523406},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1641720523406},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1641720523407},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1641720523407},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1641720523407},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1641720523407},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1641720523406},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1641720523407},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1641720523407},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1641720523408},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1641720523406},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1641720523408},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1641720523408},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1641720523409},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1641720523408},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1641720523408},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1641720523409},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1641720523409},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1641720523409},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1641720523409},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1641720523410},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1641720523410},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1641720523410},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1641720523410},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1641720523411},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1641720523408},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1641720523411},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1641720523411},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1641720523411},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1641720523411},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1641720523412},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1641720523411},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1641720523411},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1641720523410},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1641720523412},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1641720523412},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1641720523412},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1641720523412},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1641720523413},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1641720523413},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1641720523413},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1641720523413},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1641720523412},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1641720523413},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1641720523414},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1641720523415},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1641720523414},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1641720523415},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1641720523415},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1641720523413},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1641720523415},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1641720523415},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1641720523415},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1641720523415},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1641720523427},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1641720523415},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1641720523413},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1641720523428},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1641720523415},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1641720523427},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1641720523428},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1641720523431},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1641720523418},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1641720523431},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1641720523418},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1641720523427},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1641720523418},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1641720523433},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1641720523424},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1641720523423},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1641720523424},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1641720523421},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1641720523424},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1641720523425},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1641720523424},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1641720523426},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1641720523433},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1641720523425},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1641720523422},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1641720523426},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1641720523424},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1641720523426},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1641720523422},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1641720523426},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1641720523426},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1641720523426},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1641720523426},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1641720523426},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1641720523426},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1641720523427},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1641720523426},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1641720523427},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1641720523427},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1641720523427},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1641720523427},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1641720523427},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1641720523427},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1641720523427},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1641720523432},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1641720523432},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1641720523419},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1641720523418},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1641720523419},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1641720523419},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1641720523419},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1641720523419},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1641720523419},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1641720523419},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1641720523419},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1641720523420},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1641720523420},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1641720523420},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1641720523420},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1641720523420},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1641720523420},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1641720523420},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1641720523421},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1641720523420},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1641720523420},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1641720523421},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1641720523421},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1641720523421},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1641720523424},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1641720523424},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1641720523424},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1641720523424},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1641720523425},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1641720523425},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1641720523425},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1641720523421},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1641720523425},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1641720523425},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1641720523421},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1641720523422},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1641720523425},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1641720523425},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1641720523422},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1641720523422},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1641720523422},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1641720523422},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1641720523422},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1641720523423},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1641720523422},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1641720523423},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1641720523423},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1641720523423},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1641720523423},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1641720523423},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1641720523421},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1641720523423},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1641720523423},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1641720523423},{"_id":"themes/next/source/images/head.jpg","hash":"0b12831adc0835cd780f14b10b2c761453ca7410","modified":1641720523430},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1641720523432},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1641720523432},{"_id":"public/baidu_urls.txt","hash":"330a212c8747891cd4a130d97248f6ea50d1168e","modified":1641923924845},{"_id":"public/atom.xml","hash":"3aa12fd8bacc85b3f1ed2cc9bc8fdb5fedc2cbe7","modified":1641923924845},{"_id":"public/content.json","hash":"84520402a809e21465ff7600d374d416dda13198","modified":1641923924845},{"_id":"public/search.xml","hash":"126cd513c3518af9302b72da6a8a7ef371069c91","modified":1641923924845},{"_id":"public/sitemap.xml","hash":"f5e4e2416002ce3d16899eb2bf98c47394fcc9c1","modified":1641923924845},{"_id":"public/tags/index.html","hash":"e4e3b0e6688633400c23bfaf53f45164b56e7fd0","modified":1641923924845},{"_id":"public/categories/index.html","hash":"186bc43f4e9f6de997dcd57ed907f03193d4e4ba","modified":1641923924845},{"_id":"public/archives/index.html","hash":"53751aa0e640ba03ccc4ede345a6f86e13087b1d","modified":1641923924845},{"_id":"public/archives/2022/index.html","hash":"08707eab0ad680139197003f4ecb6c6af9323055","modified":1641923924845},{"_id":"public/archives/2022/01/index.html","hash":"1e5826a4ae0f66dad485768507f5d43244c71043","modified":1641923924845},{"_id":"public/categories/Git/index.html","hash":"b2c65898163599f57ddc70989e2129a0a360b9b2","modified":1641923924845},{"_id":"public/categories/前端/index.html","hash":"4e413f9900cfe3153357ba27ff06e94b3a26fcea","modified":1641923924845},{"_id":"public/tags/github/index.html","hash":"9e6c96a2b308fa69bacf770bb8d2a2ddabd83c29","modified":1641923924845},{"_id":"public/categories/ES6/index.html","hash":"3ad7c63289c6ffbd78a779bdcdd6bc8c876e7a49","modified":1641923924845},{"_id":"public/tags/centos/index.html","hash":"b3fe60df871f1ef8654e5296bd1a58d10c83465f","modified":1641923924845},{"_id":"public/tags/nginx/index.html","hash":"c240ff4fe0a1885300e4d90f49ad5e6b8676f099","modified":1641923924845},{"_id":"public/posts/27f7e408.html","hash":"51c0422bbd61288b4d876c83637c674d9df93b78","modified":1641923924845},{"_id":"public/posts/e38dcee3.html","hash":"6a9581db57b5e88232167c26b09320492e090781","modified":1641923924845},{"_id":"public/posts/acc3d3b0.html","hash":"1337c6796ffe9f27f91c2dd6615de648b4e9d588","modified":1641923924845},{"_id":"public/posts/59268fdb.html","hash":"24f61ef9bf0b3c88d49d596b6878514ef3a62d66","modified":1641923924845},{"_id":"public/posts/4a17b156.html","hash":"20ac333295ca5f84eed7fcd13773741a5a41e73a","modified":1641923924845},{"_id":"public/posts/932a8af7.html","hash":"eeb84db06d6ff048a2782ff8b05a8d4af007bcb2","modified":1641923924845},{"_id":"public/index.html","hash":"3769f29e78535ca2b4ab5991b66632406e4072d8","modified":1641923924845},{"_id":"public/tags/优雅/index.html","hash":"13037c73561bac0acad50ed3113a0f2ec08b0890","modified":1641923924845},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1641923924845},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1641923924845},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1641923924845},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1641923924845},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1641923924845},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1641923924845},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1641923924845},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1641923924845},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1641923924845},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1641923924845},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1641923924845},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1641923924845},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1641923924845},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1641923924845},{"_id":"public/images/head.jpg","hash":"0b12831adc0835cd780f14b10b2c761453ca7410","modified":1641923924845},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1641923924845},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1641923924845},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1641923924845},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1641923924845},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1641923924845},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1641923924845},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1641923924845},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1641923924845},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1641923924845},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1641923924845},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1641923924845},{"_id":"public/css/main.css","hash":"f9039dc4eafcc75bf6141ce4bb36e5084a63d154","modified":1641923924845},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1641923924845},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1641923924845},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1641923924845}],"Category":[{"name":"Git","_id":"ckyaf40s20005esl3hvai6fbb"},{"name":"前端","_id":"ckyaf40s4000aesl3df7tezg8"},{"name":"ES6","_id":"ckyaf40s5000gesl33hirfvek"}],"Data":[],"Page":[{"title":"tags","date":"2022-01-08T05:50:54.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-01-08 13:50:54\ntype: \"tags\"\n---\n","updated":"2022-01-09T09:28:43.395Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckyaf40rx0000esl36hcqhm5d","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2022-01-08T05:51:34.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-01-08 13:51:34\ntype: \"categories\"\n---\n","updated":"2022-01-09T09:28:43.395Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckyaf40s00002esl3bz7i420c","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","abbrlink":"4a17b156","date":"2021-12-31T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!--more-->\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\nabbrlink: 4a17b156\ndate: 2022-01-01\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!--more-->\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2022-01-09T09:28:43.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyaf40ry0001esl387dg1srb","content":"<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo<i class=\"fa fa-external-link-alt\"></i></span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation<i class=\"fa fa-external-link-alt\"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting<i class=\"fa fa-external-link-alt\"></i></span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment<i class=\"fa fa-external-link-alt\"></i></span></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo<i class=\"fa fa-external-link-alt\"></i></span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation<i class=\"fa fa-external-link-alt\"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting<i class=\"fa fa-external-link-alt\"></i></span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>","more":"<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment<i class=\"fa fa-external-link-alt\"></i></span></p>"},{"abbrlink":"acc3d3b0","title":"git常用命令总结","date":"2022-01-07T16:00:00.000Z","_content":"## 新建仓库\n```\necho \"# test\" >> README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin git@github.com:foxscalliom/test.git\ngit push -u origin main\n```\n<!--more-->\n## 拉取仓库\n```\ngit remote add origin git@github.com:foxscalliom/test.git\ngit branch -M main\ngit push -u origin main\n```\n## 不保留本地\n```\ngit reset --hard \ngit pull origin main\n```","source":"_posts/git常用命令总结.md","raw":"---\nabbrlink: acc3d3b0\ntitle: git常用命令总结\ndate: 2022-01-08\ncategories: \n   - Git\ntags: \n   - github  \n---\n## 新建仓库\n```\necho \"# test\" >> README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin git@github.com:foxscalliom/test.git\ngit push -u origin main\n```\n<!--more-->\n## 拉取仓库\n```\ngit remote add origin git@github.com:foxscalliom/test.git\ngit branch -M main\ngit push -u origin main\n```\n## 不保留本地\n```\ngit reset --hard \ngit pull origin main\n```","slug":"git常用命令总结","published":1,"updated":"2022-01-09T09:28:43.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyaf40s00003esl379keafae","content":"<h2 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;# test&quot; &gt;&gt; README.md</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add README.md</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\">git branch -M main</span><br><span class=\"line\">git remote add origin git@github.com:foxscalliom/test.git</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h2 id=\"拉取仓库\"><a href=\"#拉取仓库\" class=\"headerlink\" title=\"拉取仓库\"></a>拉取仓库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:foxscalliom/test.git</span><br><span class=\"line\">git branch -M main</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n<h2 id=\"不保留本地\"><a href=\"#不保留本地\" class=\"headerlink\" title=\"不保留本地\"></a>不保留本地</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard </span><br><span class=\"line\">git pull origin main</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;# test&quot; &gt;&gt; README.md</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add README.md</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\">git branch -M main</span><br><span class=\"line\">git remote add origin git@github.com:foxscalliom/test.git</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"拉取仓库\"><a href=\"#拉取仓库\" class=\"headerlink\" title=\"拉取仓库\"></a>拉取仓库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:foxscalliom/test.git</span><br><span class=\"line\">git branch -M main</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n<h2 id=\"不保留本地\"><a href=\"#不保留本地\" class=\"headerlink\" title=\"不保留本地\"></a>不保留本地</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard </span><br><span class=\"line\">git pull origin main</span><br></pre></td></tr></table></figure>"},{"title":"如何优雅的在centos上使用nginx","date":"2022-01-11T17:08:19.000Z","_content":" ## nginx基本配置\n ### 安装nginx\n编辑安装环境\n```sh\nvim /etc/yum.repos.d/nginx.repo\n```\n复制下面的代码\n```sh\n[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/centos/7/$basearch/\ngpgcheck=0\nenabled=1\n```\n配置完成，然后执行安装\n```sh\nyum install nginx\n```\n查看nginx版本\n```sh\nnginx -v\n```\n ### 查看nginx安装目录\n```sh\nrpm -ql nginx\n```\nrpm 是linux的rpm包管理工具，-q 代表询问模式，-l 代表返回列表，这样我们就可以找到nginx的所有安装位置了。\n### nginx.conf文件解读\nnginx.conf 文件是Nginx总配置文件，在我们搭建服务器时经常调整的文件。\n进入etc/nginx目录下，然后用vim进行打开\n```sh\ncd /etc/nginx\nvim nginx.conf\n```\n下面是文件的详细注释\n```sh\n#运行用户，默认即是nginx，可以不进行设置\nuser  nginx;\n#Nginx进程，一般设置为和CPU核数一样\nworker_processes  1;   \n#错误日志存放目录\nerror_log  /var/log/nginx/error.log warn;\n#进程pid存放位置\npid        /var/run/nginx.pid;\n\nevents {\n    worker_connections  1024; # 单个后台进程的最大并发数\n}\n\nhttp {\n    include       /etc/nginx/mime.types;   #文件扩展名与类型映射表\n    default_type  application/octet-stream;  #默认文件类型\n    #设置日志模式\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;   #nginx访问日志存放位置\n\n    sendfile        on;   #开启高效传输模式\n    #tcp_nopush     on;    #减少网络报文段的数量\n\n    keepalive_timeout  65;  #保持连接的时间，也叫超时时间\n\n    #gzip  on;  #开启gzip压缩\n\n    include /etc/nginx/conf.d/*.conf; #包含的子配置项位置和文件\n```\n### default.conf 配置\n进入conf.d目录，然后使用`vim default.conf`进行查看。\n```sh\nserver {\n    listen       80;   #配置监听端口\n    server_name  localhost;  //配置域名\n\n    #charset koi8-r;     \n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;     #服务默认启动目录\n        index  index.html index.htm;    #默认访问文件\n    }\n\n    #error_page  404              /404.html;   # 配置404页面\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;   #错误状态码的显示页面，配置后需要重启\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n\n    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n    #\n    #location ~ \\.php$ {\n    #    proxy_pass   http://127.0.0.1;\n    #}\n\n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    #\n    #location ~ \\.php$ {\n    #    root           html;\n    #    fastcgi_pass   127.0.0.1:9000;\n    #    fastcgi_index  index.php;\n    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n    #    include        fastcgi_params;\n    #}\n\n    # deny access to .htaccess files, if Apache's document root\n    # concurs with nginx's one\n    #\n    #location ~ /\\.ht {\n    #    deny  all;\n    #}\n}\n```\n明白了这些配置项，我们知道我们的服务目录放在了/usr/share/nginx/html下，可以使用命令进入看一下目录下的文件。\n```sh\ncd /usr/share/nginx/html\nls\n```\n可以看到目录下面有两个文件，50x.html 和 index.html。我们可以使用vim进行编辑。\n### 安全组开启\n阿里云的安全组配置\n步骤如下：\n- 进入阿里云控制台，并找到ECS实例。\n- 点击实例后边的“更多”\n- 点击“网络和安全组” ，再点击“安全组配置”\n- 右上角添加“安全组配置”\n- 进行80端口的设置。\n## nginx服务命令\n### 启动nginx服务\n#### nginx直接启动\n在CentOS7.4版本里（低版本是不行的），是可以直接直接使用nginx启动服务的。\n```sh\nnginx\n```\n#### 使用systemctl命令启动\n还可以使用个Linux的命令进行启动，我一般都是采用这种方法进行使用。因为这种方法无论启动什么服务，都是一样的，只是换一下服务的名字（不用增加额外的记忆点）。\n```sh\nsystemctl start nginx.service\n```\n输入命令后，没有任何提示，那我们如何知道Nginx服务已经启动了哪？可以使用Linux的组合命令，进行查询服务的运行状况。\n```sh\nps aux | grep nginx\n```\n如果有三条记录，说明Nginx被正常开启了。\n### 停止nginx服务的四种方法\n停止Nginx 方法有很多种，可以根据需求采用不一样的方法，一个一个说明。\n#### 立即停止服务\n```sh\nnginx -s stop\n```\n这种方法比较强硬，无论进程是否在工作，都直接停止进程。\n#### 从容停止服务\n```sh\nnginx -s quit\n```\n这种方法较stop相比就比较温和一些了，需要进程完成当前工作后再停止。\n#### killall方法杀死进程\n```sh\nkillall nginx\n```\n这种方法也是比较野蛮的，我们直接杀死进程，但是在上面使用没有效果时，我们用这种方法还是比较好的。\n#### systemctl停止服务\n```sh\nsystemctl stop nginx.service\n```\n### 重启nginx服务\n有时候要重启nginx服务，可以使用下面的命令\n```sh\nsystemctl restart nginx.service\n```\n### 重新载入配置文件\n在重新编写或者修改Nginx的配置文件后，都需要作一下重新载入，这时候可以用Nginx给的命令。\n```sh\nnginx -s reload\n```\n### 查看端口号\n在默认情况下，Nginx启动后会监听80端口，从而提供HTTP访问，如果80端口已经被占用则会启动失败。我么可以使用netstat -tlnp命令查看端口号的占用情况。\n## 自定义错误页和访问设置\n一个好的网站会武装到牙齿，任何错误都有给用户友好的提示。比如当网站遇到页面没有找到的时候，我们要提示页面没有找到，并给用户可返回性。错误的种类有很多，所以真正的好产品会给顾客不同的返回结果。\n### 多错误指向一个页面\n在/etc/nginx/conf.d/default.conf 是可以看到下面这句话的。\n```sh\nerror_page   500 502 503 504  /50x.html;\n```\nerror_page指令用于自定义错误页面，500，502，503，504 这些就是HTTP中最常见的错误代码，/50.html 用于表示当发生上述指定的任意一个错误的时候，都是用网站根目录下的/50.html文件进行处理。\n### 单独为错误置顶处理方法\n有些时候是要把这些错误页面单独的表现出来，给用户更好的体验。所以就要为每个错误码设置不同的页面。设置方法如下：\n```sh\nerror_page 404  /404_error.html;\n```\n然后到网站目录下新建一个404_error.html 文件，并写入一些信息。\n```html\n<html>\n<meta charset=\"UTF-8\">\n<body>\n<h1>404页面没有找到!</h1>\n</body>\n</html>\n```\n然后重启我们的服务，再进行访问，你会发现404页面发生了变化。\n### 错误码换成一个地址\n处理错误的时候，不仅可以只使用本服务器的资源，还可以使用外部的资源。比如我们将配置文件设置成这样。\n```sh\nerror_page  404 https://i100.xyz;\n```\n### 简单服务控制\n有时候我们的服务器只允许特定主机访问，比如内部OA系统，或者应用的管理后台系统，更或者是某些应用接口，这时候我们就需要控制一些IP访问，我们可以直接在location里进行配置。\n```sh\n location / {\n        deny   123.9.51.42;\n        allow  45.76.202.231;\n    }\n```\n配置完成后，重启一下服务器就可以实现限制和允许访问了。\n## nginx访问权限\n简单接触了Nginx访问简单用法，简单的知道了，deny是禁止访问，allow是允许访问。但Nginx的访问控制还是比较复杂的。\n### 指令优先级\n```sh\n location / {\n        allow  45.76.202.231;\n        deny   all;\n    }\n```\n上面的配置表示只允许45.76.202.231进行访问，其他的IP是禁止访问的。但是如果我们把deny all指令，移动到 allow 45.76.202.231之前，会发生什么那？会发现所有的IP都不允许访问了。这说明了一个问题：就是在同一个块下的两个权限指令，先出现的设置会覆盖后出现的设置（也就是谁先触发，谁起作用）。\n### 复杂访问控制权限匹配\n在工作中，访问权限的控制需求更加复杂，例如，对于网站下的img（图片目录）是运行所有用户访问，但对于网站下的admin目录则只允许公司内部固定IP访问。这时候仅靠deny和allow这两个指令，是无法实现的。我们需要location块来完成相关的需求匹配。\n```sh\n    location =/img{\n        allow all;\n    }\n    location =/admin{\n        deny all;\n    }\n```\n=号代表精确匹配，使用了=后是根据其后的模式进行精确匹配。这个直接关系到我们网站的安全，一定要学会。\n### 使用正则表达式设置访问权限\n只有精确匹配有时是完不成我们的工作任务的，比如现在我们要禁止访问所有php的页面，php的页面大多是后台的管理或者接口代码，所以为了安全我们经常要禁止所有用户访问，而只开放公司内部访问的。\n```sh\n location ~\\.php$ {\n        deny all;\n    }\n```\n这样我们再访问的时候就不能访问以php结尾的文件了。是不是让网站变的安全很多了那？\n## nginx反向代理设置\n现在的web模式基本的都是标准的CS结构，即Client端到Server端。那代理就是在Client端和Server端之间增加一个提供特定功能的服务器，这个服务器就是我们说的代理服务器。\n### 正向代理\n如果你觉的反向代理不好理解，那先来了解一下正向代理。我相信作为一个手速远超正常人的程序员来说，你一定用过翻墙工具（我这里说的不是物理梯子），它就是一个典型的正向代理工具。它会把我们不让访问的服务器的网页请求，代理到一个可以访问该网站的代理服务器上来，一般叫做proxy服务器，再转发给客户。\n简单来说就是你想访问目标服务器的权限，但是没有权限。这时候代理服务器有权限访问服务器，并且你有访问代理服务器的权限，这时候你就可以通过访问代理服务器，代理服务器访问真实服务器，把内容给你呈现出来。\n### 反向代理\n反向代理跟代理正好相反（需要说明的是，现在基本所有的大型网站的页面都是用了反向代理），客户端发送的请求，想要访问server服务器上的内容。发送的内容被发送到代理服务器上，这个代理服务器再把请求发送到自己设置好的内部服务器上，而用户真实想获得的内容就在这些设置好的服务器上。\nproxy服务器代理的并不是客户端，而是服务器,即向外部客户端提供了一个统一的代理入口，客户端的请求都要先经过这个proxy服务器。具体访问那个服务器server是由Nginx来控制的。再简单点来讲，一般代理指代理的客户端，反向代理是代理的服务器\n### 反向代理的用途和好处\n- 安全性：正向代理的客户端能够在隐藏自身信息的同时访问任意网站，这个给网络安全代理了极大的威胁。因此，我们必须把服务器保护起来，使用反向代理客户端用户只能通过外来网来访问代理服务器，并且用户并不知道自己访问的真实服务器是那一台，可以很好的提供安全保护。\n- 功能性：反向代理的主要用途是为多个服务器提供负债均衡、缓存等功能。负载均衡就是一个网站的内容被部署在若干服务器上，可以把这些机子看成一个集群，那Nginx可以将接收到的客户端请求“均匀地”分配到这个集群中所有的服务器上，从而实现服务器压力的平均分配，也叫负载均衡。\n### 最简单的反向代理\n现在我们要访问http://nginx2.i100.com然后反向代理到i00.com这个网站。我们直接到etc/nginx/con.d/8001.conf进行修改。\n```sh\nserver{\n        listen 80;\n        server_name nginx2.i100.com;\n        location / {\n               proxy_pass http://i100.com;\n        }\n}\n```\n一般我们反向代理的都是一个IP，但是我这里代理了一个域名也是可以的。其实这时候我们反向代理就算成功了\n### 其它反向代理指令\nproxy_set_header :在将客户端请求发送给后端服务器之前，更改来自客户端的请求头信息。\nproxy_connect_timeout:配置Nginx与后端代理服务器尝试建立连接的超时时间。\nproxy_read_timeout : 配置Nginx向后端服务器组发出read请求后，等待相应的超时时间。\nproxy_send_timeout：配置Nginx向后端服务器组发出write请求后，等待相应的超时时间。\nproxy_redirect :用于修改后端服务器返回的响应头中的Location和Refresh。\n## nginx适配PC或移动设备\n现在很多网站都是有了PC端和H5站点的，因为这样就可以根据客户设备的不同，显示出体验更好的，不同的页面了。\n这样的需求有人说拿自适应就可以搞定，比如我们常说的bootstrap和24格布局法，这些确实是非常好的方案，但是无论是复杂性和易用性上面还是不如分开编写的好，比如我们常见的淘宝、京东......这些大型网站就都没有采用自适应，而是用分开制作的方式。\n### $http_user_agent的使用\nNginx通过内置变量$http_user_agent，可以获取到请求客户端的userAgent，就可以用户目前处于移动端还是PC端，进而展示不同的页面给用户。\n操作步骤如下：\n- 1.在/usr/share/nginx/目录下新建两个文件夹，分别为：pc和mobile目录\n```sh\ncd /usr/share/nginx\nmkdir pc\nmkdir mobile\n```\n- 在pc和miblic目录下，新建两个index.html文件，文件里下面内容\n```sh\n<h1>I am pc!</h1>\n```\n```sh\n<h1>I am mobile!</h1>\n```\n- 进入etc/nginx/conf.d目录下，修改8001.conf文件，改为下面的形式:\n```sh\nserver{\n     listen 80;\n     server_name nginx2.jspang.com;\n     location / {\n      root /usr/share/nginx/pc;\n      if ($http_user_agent ~* '(Android|webOS|iPhone|iPod|BlackBerry)') {\n         root /usr/share/nginx/mobile;\n      }\n      index index.html;\n     }\n}\n```\n## nginx的Gzip压缩配置\nGzip是网页的一种网页压缩技术，经过gzip压缩后，页面大小可以变为原来的30%甚至更小。更小的网页会让用户浏览的体验更好，速度更快。gzip网页压缩的实现需要浏览器和服务器的支持。\ngzip是需要服务器和浏览器同事支持的。当浏览器支持gzip压缩时，会在请求消息中包含Accept-Encoding:gzip,这样Nginx就会向浏览器发送听过gzip后的内容，同时在相应信息头中加入Content-Encoding:gzip，声明这是gzip后的内容，告知浏览器要先解压后才能解析输出。\n### gzip的配置项\nNginx提供了专门的gzip模块，并且模块中的指令非常丰富。\n- gzip : 该指令用于开启或 关闭gzip模块。\n- gzip_buffers : 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。\n- gzip_comp_level : gzip压缩比，压缩级别是1-9，1的压缩级别最低，9的压缩级别最高。压缩级别越高压缩率越大，压缩时间越长。\n- gzip_disable : 可以通过该指令对一些特定的User-Agent不使用压缩功能。\n- gzip_min_length:设置允许压缩的页面最小字节数，页面字节数从相应消息头的Content-length中进行获取。\n- gzip_http_version：识别HTTP协议版本，其值可以是1.1.或1.0.\n- gzip_proxied : 用于设置启用或禁用从代理服务器上收到相应内容gzip压缩。\n- gzip_vary : 用于在响应消息头中添加Vary：Accept-Encoding,使代理服务器根据请求头中的Accept-Encoding识别是否启用gzip压缩。\n### Gzip最简单配置\n```sh\nhttp {\n   .....\n    gzip on;\n    gzip_types text/plain application/javascript text/css;\n   .....\n}\n```\ngzip on是启用gizp模块，下面的一行是用于在客户端访问网页时，对文本、JavaScript 和CSS文件进行压缩输出。\n配置好后，我们就可以重启Nginx服务，让我们的gizp生效了。\n如果你是windows操作系统，你可以按F12键打开开发者工具，单机当前的请求，在标签中选择Headers，查看HTTP响应头信息。你可以清楚的看见Content-Encoding为gzip类型。\n","source":"_posts/如何优雅的在centos上使用nginx.md","raw":"---\ntitle: 如何优雅的在centos上使用nginx\ndate: 2022-01-12 01:08:19\ntags: \n - centos\n - 'nginx'\ncategories: \n - 前端\n---\n ## nginx基本配置\n ### 安装nginx\n编辑安装环境\n```sh\nvim /etc/yum.repos.d/nginx.repo\n```\n复制下面的代码\n```sh\n[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/centos/7/$basearch/\ngpgcheck=0\nenabled=1\n```\n配置完成，然后执行安装\n```sh\nyum install nginx\n```\n查看nginx版本\n```sh\nnginx -v\n```\n ### 查看nginx安装目录\n```sh\nrpm -ql nginx\n```\nrpm 是linux的rpm包管理工具，-q 代表询问模式，-l 代表返回列表，这样我们就可以找到nginx的所有安装位置了。\n### nginx.conf文件解读\nnginx.conf 文件是Nginx总配置文件，在我们搭建服务器时经常调整的文件。\n进入etc/nginx目录下，然后用vim进行打开\n```sh\ncd /etc/nginx\nvim nginx.conf\n```\n下面是文件的详细注释\n```sh\n#运行用户，默认即是nginx，可以不进行设置\nuser  nginx;\n#Nginx进程，一般设置为和CPU核数一样\nworker_processes  1;   \n#错误日志存放目录\nerror_log  /var/log/nginx/error.log warn;\n#进程pid存放位置\npid        /var/run/nginx.pid;\n\nevents {\n    worker_connections  1024; # 单个后台进程的最大并发数\n}\n\nhttp {\n    include       /etc/nginx/mime.types;   #文件扩展名与类型映射表\n    default_type  application/octet-stream;  #默认文件类型\n    #设置日志模式\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;   #nginx访问日志存放位置\n\n    sendfile        on;   #开启高效传输模式\n    #tcp_nopush     on;    #减少网络报文段的数量\n\n    keepalive_timeout  65;  #保持连接的时间，也叫超时时间\n\n    #gzip  on;  #开启gzip压缩\n\n    include /etc/nginx/conf.d/*.conf; #包含的子配置项位置和文件\n```\n### default.conf 配置\n进入conf.d目录，然后使用`vim default.conf`进行查看。\n```sh\nserver {\n    listen       80;   #配置监听端口\n    server_name  localhost;  //配置域名\n\n    #charset koi8-r;     \n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;     #服务默认启动目录\n        index  index.html index.htm;    #默认访问文件\n    }\n\n    #error_page  404              /404.html;   # 配置404页面\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;   #错误状态码的显示页面，配置后需要重启\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n\n    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n    #\n    #location ~ \\.php$ {\n    #    proxy_pass   http://127.0.0.1;\n    #}\n\n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    #\n    #location ~ \\.php$ {\n    #    root           html;\n    #    fastcgi_pass   127.0.0.1:9000;\n    #    fastcgi_index  index.php;\n    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n    #    include        fastcgi_params;\n    #}\n\n    # deny access to .htaccess files, if Apache's document root\n    # concurs with nginx's one\n    #\n    #location ~ /\\.ht {\n    #    deny  all;\n    #}\n}\n```\n明白了这些配置项，我们知道我们的服务目录放在了/usr/share/nginx/html下，可以使用命令进入看一下目录下的文件。\n```sh\ncd /usr/share/nginx/html\nls\n```\n可以看到目录下面有两个文件，50x.html 和 index.html。我们可以使用vim进行编辑。\n### 安全组开启\n阿里云的安全组配置\n步骤如下：\n- 进入阿里云控制台，并找到ECS实例。\n- 点击实例后边的“更多”\n- 点击“网络和安全组” ，再点击“安全组配置”\n- 右上角添加“安全组配置”\n- 进行80端口的设置。\n## nginx服务命令\n### 启动nginx服务\n#### nginx直接启动\n在CentOS7.4版本里（低版本是不行的），是可以直接直接使用nginx启动服务的。\n```sh\nnginx\n```\n#### 使用systemctl命令启动\n还可以使用个Linux的命令进行启动，我一般都是采用这种方法进行使用。因为这种方法无论启动什么服务，都是一样的，只是换一下服务的名字（不用增加额外的记忆点）。\n```sh\nsystemctl start nginx.service\n```\n输入命令后，没有任何提示，那我们如何知道Nginx服务已经启动了哪？可以使用Linux的组合命令，进行查询服务的运行状况。\n```sh\nps aux | grep nginx\n```\n如果有三条记录，说明Nginx被正常开启了。\n### 停止nginx服务的四种方法\n停止Nginx 方法有很多种，可以根据需求采用不一样的方法，一个一个说明。\n#### 立即停止服务\n```sh\nnginx -s stop\n```\n这种方法比较强硬，无论进程是否在工作，都直接停止进程。\n#### 从容停止服务\n```sh\nnginx -s quit\n```\n这种方法较stop相比就比较温和一些了，需要进程完成当前工作后再停止。\n#### killall方法杀死进程\n```sh\nkillall nginx\n```\n这种方法也是比较野蛮的，我们直接杀死进程，但是在上面使用没有效果时，我们用这种方法还是比较好的。\n#### systemctl停止服务\n```sh\nsystemctl stop nginx.service\n```\n### 重启nginx服务\n有时候要重启nginx服务，可以使用下面的命令\n```sh\nsystemctl restart nginx.service\n```\n### 重新载入配置文件\n在重新编写或者修改Nginx的配置文件后，都需要作一下重新载入，这时候可以用Nginx给的命令。\n```sh\nnginx -s reload\n```\n### 查看端口号\n在默认情况下，Nginx启动后会监听80端口，从而提供HTTP访问，如果80端口已经被占用则会启动失败。我么可以使用netstat -tlnp命令查看端口号的占用情况。\n## 自定义错误页和访问设置\n一个好的网站会武装到牙齿，任何错误都有给用户友好的提示。比如当网站遇到页面没有找到的时候，我们要提示页面没有找到，并给用户可返回性。错误的种类有很多，所以真正的好产品会给顾客不同的返回结果。\n### 多错误指向一个页面\n在/etc/nginx/conf.d/default.conf 是可以看到下面这句话的。\n```sh\nerror_page   500 502 503 504  /50x.html;\n```\nerror_page指令用于自定义错误页面，500，502，503，504 这些就是HTTP中最常见的错误代码，/50.html 用于表示当发生上述指定的任意一个错误的时候，都是用网站根目录下的/50.html文件进行处理。\n### 单独为错误置顶处理方法\n有些时候是要把这些错误页面单独的表现出来，给用户更好的体验。所以就要为每个错误码设置不同的页面。设置方法如下：\n```sh\nerror_page 404  /404_error.html;\n```\n然后到网站目录下新建一个404_error.html 文件，并写入一些信息。\n```html\n<html>\n<meta charset=\"UTF-8\">\n<body>\n<h1>404页面没有找到!</h1>\n</body>\n</html>\n```\n然后重启我们的服务，再进行访问，你会发现404页面发生了变化。\n### 错误码换成一个地址\n处理错误的时候，不仅可以只使用本服务器的资源，还可以使用外部的资源。比如我们将配置文件设置成这样。\n```sh\nerror_page  404 https://i100.xyz;\n```\n### 简单服务控制\n有时候我们的服务器只允许特定主机访问，比如内部OA系统，或者应用的管理后台系统，更或者是某些应用接口，这时候我们就需要控制一些IP访问，我们可以直接在location里进行配置。\n```sh\n location / {\n        deny   123.9.51.42;\n        allow  45.76.202.231;\n    }\n```\n配置完成后，重启一下服务器就可以实现限制和允许访问了。\n## nginx访问权限\n简单接触了Nginx访问简单用法，简单的知道了，deny是禁止访问，allow是允许访问。但Nginx的访问控制还是比较复杂的。\n### 指令优先级\n```sh\n location / {\n        allow  45.76.202.231;\n        deny   all;\n    }\n```\n上面的配置表示只允许45.76.202.231进行访问，其他的IP是禁止访问的。但是如果我们把deny all指令，移动到 allow 45.76.202.231之前，会发生什么那？会发现所有的IP都不允许访问了。这说明了一个问题：就是在同一个块下的两个权限指令，先出现的设置会覆盖后出现的设置（也就是谁先触发，谁起作用）。\n### 复杂访问控制权限匹配\n在工作中，访问权限的控制需求更加复杂，例如，对于网站下的img（图片目录）是运行所有用户访问，但对于网站下的admin目录则只允许公司内部固定IP访问。这时候仅靠deny和allow这两个指令，是无法实现的。我们需要location块来完成相关的需求匹配。\n```sh\n    location =/img{\n        allow all;\n    }\n    location =/admin{\n        deny all;\n    }\n```\n=号代表精确匹配，使用了=后是根据其后的模式进行精确匹配。这个直接关系到我们网站的安全，一定要学会。\n### 使用正则表达式设置访问权限\n只有精确匹配有时是完不成我们的工作任务的，比如现在我们要禁止访问所有php的页面，php的页面大多是后台的管理或者接口代码，所以为了安全我们经常要禁止所有用户访问，而只开放公司内部访问的。\n```sh\n location ~\\.php$ {\n        deny all;\n    }\n```\n这样我们再访问的时候就不能访问以php结尾的文件了。是不是让网站变的安全很多了那？\n## nginx反向代理设置\n现在的web模式基本的都是标准的CS结构，即Client端到Server端。那代理就是在Client端和Server端之间增加一个提供特定功能的服务器，这个服务器就是我们说的代理服务器。\n### 正向代理\n如果你觉的反向代理不好理解，那先来了解一下正向代理。我相信作为一个手速远超正常人的程序员来说，你一定用过翻墙工具（我这里说的不是物理梯子），它就是一个典型的正向代理工具。它会把我们不让访问的服务器的网页请求，代理到一个可以访问该网站的代理服务器上来，一般叫做proxy服务器，再转发给客户。\n简单来说就是你想访问目标服务器的权限，但是没有权限。这时候代理服务器有权限访问服务器，并且你有访问代理服务器的权限，这时候你就可以通过访问代理服务器，代理服务器访问真实服务器，把内容给你呈现出来。\n### 反向代理\n反向代理跟代理正好相反（需要说明的是，现在基本所有的大型网站的页面都是用了反向代理），客户端发送的请求，想要访问server服务器上的内容。发送的内容被发送到代理服务器上，这个代理服务器再把请求发送到自己设置好的内部服务器上，而用户真实想获得的内容就在这些设置好的服务器上。\nproxy服务器代理的并不是客户端，而是服务器,即向外部客户端提供了一个统一的代理入口，客户端的请求都要先经过这个proxy服务器。具体访问那个服务器server是由Nginx来控制的。再简单点来讲，一般代理指代理的客户端，反向代理是代理的服务器\n### 反向代理的用途和好处\n- 安全性：正向代理的客户端能够在隐藏自身信息的同时访问任意网站，这个给网络安全代理了极大的威胁。因此，我们必须把服务器保护起来，使用反向代理客户端用户只能通过外来网来访问代理服务器，并且用户并不知道自己访问的真实服务器是那一台，可以很好的提供安全保护。\n- 功能性：反向代理的主要用途是为多个服务器提供负债均衡、缓存等功能。负载均衡就是一个网站的内容被部署在若干服务器上，可以把这些机子看成一个集群，那Nginx可以将接收到的客户端请求“均匀地”分配到这个集群中所有的服务器上，从而实现服务器压力的平均分配，也叫负载均衡。\n### 最简单的反向代理\n现在我们要访问http://nginx2.i100.com然后反向代理到i00.com这个网站。我们直接到etc/nginx/con.d/8001.conf进行修改。\n```sh\nserver{\n        listen 80;\n        server_name nginx2.i100.com;\n        location / {\n               proxy_pass http://i100.com;\n        }\n}\n```\n一般我们反向代理的都是一个IP，但是我这里代理了一个域名也是可以的。其实这时候我们反向代理就算成功了\n### 其它反向代理指令\nproxy_set_header :在将客户端请求发送给后端服务器之前，更改来自客户端的请求头信息。\nproxy_connect_timeout:配置Nginx与后端代理服务器尝试建立连接的超时时间。\nproxy_read_timeout : 配置Nginx向后端服务器组发出read请求后，等待相应的超时时间。\nproxy_send_timeout：配置Nginx向后端服务器组发出write请求后，等待相应的超时时间。\nproxy_redirect :用于修改后端服务器返回的响应头中的Location和Refresh。\n## nginx适配PC或移动设备\n现在很多网站都是有了PC端和H5站点的，因为这样就可以根据客户设备的不同，显示出体验更好的，不同的页面了。\n这样的需求有人说拿自适应就可以搞定，比如我们常说的bootstrap和24格布局法，这些确实是非常好的方案，但是无论是复杂性和易用性上面还是不如分开编写的好，比如我们常见的淘宝、京东......这些大型网站就都没有采用自适应，而是用分开制作的方式。\n### $http_user_agent的使用\nNginx通过内置变量$http_user_agent，可以获取到请求客户端的userAgent，就可以用户目前处于移动端还是PC端，进而展示不同的页面给用户。\n操作步骤如下：\n- 1.在/usr/share/nginx/目录下新建两个文件夹，分别为：pc和mobile目录\n```sh\ncd /usr/share/nginx\nmkdir pc\nmkdir mobile\n```\n- 在pc和miblic目录下，新建两个index.html文件，文件里下面内容\n```sh\n<h1>I am pc!</h1>\n```\n```sh\n<h1>I am mobile!</h1>\n```\n- 进入etc/nginx/conf.d目录下，修改8001.conf文件，改为下面的形式:\n```sh\nserver{\n     listen 80;\n     server_name nginx2.jspang.com;\n     location / {\n      root /usr/share/nginx/pc;\n      if ($http_user_agent ~* '(Android|webOS|iPhone|iPod|BlackBerry)') {\n         root /usr/share/nginx/mobile;\n      }\n      index index.html;\n     }\n}\n```\n## nginx的Gzip压缩配置\nGzip是网页的一种网页压缩技术，经过gzip压缩后，页面大小可以变为原来的30%甚至更小。更小的网页会让用户浏览的体验更好，速度更快。gzip网页压缩的实现需要浏览器和服务器的支持。\ngzip是需要服务器和浏览器同事支持的。当浏览器支持gzip压缩时，会在请求消息中包含Accept-Encoding:gzip,这样Nginx就会向浏览器发送听过gzip后的内容，同时在相应信息头中加入Content-Encoding:gzip，声明这是gzip后的内容，告知浏览器要先解压后才能解析输出。\n### gzip的配置项\nNginx提供了专门的gzip模块，并且模块中的指令非常丰富。\n- gzip : 该指令用于开启或 关闭gzip模块。\n- gzip_buffers : 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。\n- gzip_comp_level : gzip压缩比，压缩级别是1-9，1的压缩级别最低，9的压缩级别最高。压缩级别越高压缩率越大，压缩时间越长。\n- gzip_disable : 可以通过该指令对一些特定的User-Agent不使用压缩功能。\n- gzip_min_length:设置允许压缩的页面最小字节数，页面字节数从相应消息头的Content-length中进行获取。\n- gzip_http_version：识别HTTP协议版本，其值可以是1.1.或1.0.\n- gzip_proxied : 用于设置启用或禁用从代理服务器上收到相应内容gzip压缩。\n- gzip_vary : 用于在响应消息头中添加Vary：Accept-Encoding,使代理服务器根据请求头中的Accept-Encoding识别是否启用gzip压缩。\n### Gzip最简单配置\n```sh\nhttp {\n   .....\n    gzip on;\n    gzip_types text/plain application/javascript text/css;\n   .....\n}\n```\ngzip on是启用gizp模块，下面的一行是用于在客户端访问网页时，对文本、JavaScript 和CSS文件进行压缩输出。\n配置好后，我们就可以重启Nginx服务，让我们的gizp生效了。\n如果你是windows操作系统，你可以按F12键打开开发者工具，单机当前的请求，在标签中选择Headers，查看HTTP响应头信息。你可以清楚的看见Content-Encoding为gzip类型。\n","slug":"如何优雅的在centos上使用nginx","published":1,"updated":"2022-01-11T17:58:40.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyaf40s10004esl3egpl27lo","content":"<h2 id=\"nginx基本配置\"><a href=\"#nginx基本配置\" class=\"headerlink\" title=\"nginx基本配置\"></a>nginx基本配置</h2><h3 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h3><p>编辑安装环境</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/yum.repos.d/nginx.repo</span><br></pre></td></tr></table></figure>\n<p>复制下面的代码</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nginx]</span><br><span class=\"line\">name=nginx repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/7/<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n<p>配置完成，然后执行安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n<p>查看nginx版本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看nginx安装目录\"><a href=\"#查看nginx安装目录\" class=\"headerlink\" title=\"查看nginx安装目录\"></a>查看nginx安装目录</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ql nginx</span><br></pre></td></tr></table></figure>\n<p>rpm 是linux的rpm包管理工具，-q 代表询问模式，-l 代表返回列表，这样我们就可以找到nginx的所有安装位置了。</p>\n<h3 id=\"nginx-conf文件解读\"><a href=\"#nginx-conf文件解读\" class=\"headerlink\" title=\"nginx.conf文件解读\"></a>nginx.conf文件解读</h3><p>nginx.conf 文件是Nginx总配置文件，在我们搭建服务器时经常调整的文件。<br>进入etc/nginx目录下，然后用vim进行打开</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/nginx</span><br><span class=\"line\">vim nginx.conf</span><br></pre></td></tr></table></figure>\n<p>下面是文件的详细注释</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#运行用户，默认即是nginx，可以不进行设置</span></span><br><span class=\"line\">user  nginx;</span><br><span class=\"line\"><span class=\"comment\">#Nginx进程，一般设置为和CPU核数一样</span></span><br><span class=\"line\">worker_processes  1;   </span><br><span class=\"line\"><span class=\"comment\">#错误日志存放目录</span></span><br><span class=\"line\">error_log  /var/<span class=\"built_in\">log</span>/nginx/error.log warn;</span><br><span class=\"line\"><span class=\"comment\">#进程pid存放位置</span></span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024; <span class=\"comment\"># 单个后台进程的最大并发数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;   <span class=\"comment\">#文件扩展名与类型映射表</span></span><br><span class=\"line\">    default_type  application/octet-stream;  <span class=\"comment\">#默认文件类型</span></span><br><span class=\"line\">    <span class=\"comment\">#设置日志模式</span></span><br><span class=\"line\">    log_format  main  <span class=\"string\">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/<span class=\"built_in\">log</span>/nginx/access.log  main;   <span class=\"comment\">#nginx访问日志存放位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;   <span class=\"comment\">#开启高效传输模式</span></span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;    #减少网络报文段的数量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  65;  <span class=\"comment\">#保持连接的时间，也叫超时时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;  #开启gzip压缩</span></span><br><span class=\"line\"></span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf; <span class=\"comment\">#包含的子配置项位置和文件</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"default-conf-配置\"><a href=\"#default-conf-配置\" class=\"headerlink\" title=\"default.conf 配置\"></a>default.conf 配置</h3><p>进入conf.d目录，然后使用<code>vim default.conf</code>进行查看。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;   <span class=\"comment\">#配置监听端口</span></span><br><span class=\"line\">    server_name  localhost;  //配置域名</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#charset koi8-r;     </span></span><br><span class=\"line\">    <span class=\"comment\">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;     <span class=\"comment\">#服务默认启动目录</span></span><br><span class=\"line\">        index  index.html index.htm;    <span class=\"comment\">#默认访问文件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#error_page  404              /404.html;   # 配置404页面</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># redirect server error pages to the static page /50x.html</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;   <span class=\"comment\">#错误状态码的显示页面，配置后需要重启</span></span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    proxy_pass   http://127.0.0.1;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    root           html;</span></span><br><span class=\"line\">    <span class=\"comment\">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class=\"line\">    <span class=\"comment\">#    fastcgi_index  index.php;</span></span><br><span class=\"line\">    <span class=\"comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class=\"line\">    <span class=\"comment\">#    include        fastcgi_params;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class=\"line\">    <span class=\"comment\"># concurs with nginx&#x27;s one</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#location ~ /\\.ht &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    deny  all;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>明白了这些配置项，我们知道我们的服务目录放在了/usr/share/nginx/html下，可以使用命令进入看一下目录下的文件。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/share/nginx/html</span><br><span class=\"line\">ls</span><br></pre></td></tr></table></figure>\n<p>可以看到目录下面有两个文件，50x.html 和 index.html。我们可以使用vim进行编辑。</p>\n<h3 id=\"安全组开启\"><a href=\"#安全组开启\" class=\"headerlink\" title=\"安全组开启\"></a>安全组开启</h3><p>阿里云的安全组配置<br>步骤如下：</p>\n<ul>\n<li>进入阿里云控制台，并找到ECS实例。</li>\n<li>点击实例后边的“更多”</li>\n<li>点击“网络和安全组” ，再点击“安全组配置”</li>\n<li>右上角添加“安全组配置”</li>\n<li>进行80端口的设置。<h2 id=\"nginx服务命令\"><a href=\"#nginx服务命令\" class=\"headerlink\" title=\"nginx服务命令\"></a>nginx服务命令</h2><h3 id=\"启动nginx服务\"><a href=\"#启动nginx服务\" class=\"headerlink\" title=\"启动nginx服务\"></a>启动nginx服务</h3><h4 id=\"nginx直接启动\"><a href=\"#nginx直接启动\" class=\"headerlink\" title=\"nginx直接启动\"></a>nginx直接启动</h4>在CentOS7.4版本里（低版本是不行的），是可以直接直接使用nginx启动服务的。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用systemctl命令启动\"><a href=\"#使用systemctl命令启动\" class=\"headerlink\" title=\"使用systemctl命令启动\"></a>使用systemctl命令启动</h4>还可以使用个Linux的命令进行启动，我一般都是采用这种方法进行使用。因为这种方法无论启动什么服务，都是一样的，只是换一下服务的名字（不用增加额外的记忆点）。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx.service</span><br></pre></td></tr></table></figure>\n输入命令后，没有任何提示，那我们如何知道Nginx服务已经启动了哪？可以使用Linux的组合命令，进行查询服务的运行状况。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | grep nginx</span><br></pre></td></tr></table></figure>\n如果有三条记录，说明Nginx被正常开启了。<h3 id=\"停止nginx服务的四种方法\"><a href=\"#停止nginx服务的四种方法\" class=\"headerlink\" title=\"停止nginx服务的四种方法\"></a>停止nginx服务的四种方法</h3>停止Nginx 方法有很多种，可以根据需求采用不一样的方法，一个一个说明。<h4 id=\"立即停止服务\"><a href=\"#立即停止服务\" class=\"headerlink\" title=\"立即停止服务\"></a>立即停止服务</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s stop</span><br></pre></td></tr></table></figure>\n这种方法比较强硬，无论进程是否在工作，都直接停止进程。<h4 id=\"从容停止服务\"><a href=\"#从容停止服务\" class=\"headerlink\" title=\"从容停止服务\"></a>从容停止服务</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s quit</span><br></pre></td></tr></table></figure>\n这种方法较stop相比就比较温和一些了，需要进程完成当前工作后再停止。<h4 id=\"killall方法杀死进程\"><a href=\"#killall方法杀死进程\" class=\"headerlink\" title=\"killall方法杀死进程\"></a>killall方法杀死进程</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall nginx</span><br></pre></td></tr></table></figure>\n这种方法也是比较野蛮的，我们直接杀死进程，但是在上面使用没有效果时，我们用这种方法还是比较好的。<h4 id=\"systemctl停止服务\"><a href=\"#systemctl停止服务\" class=\"headerlink\" title=\"systemctl停止服务\"></a>systemctl停止服务</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop nginx.service</span><br></pre></td></tr></table></figure>\n<h3 id=\"重启nginx服务\"><a href=\"#重启nginx服务\" class=\"headerlink\" title=\"重启nginx服务\"></a>重启nginx服务</h3>有时候要重启nginx服务，可以使用下面的命令<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx.service</span><br></pre></td></tr></table></figure>\n<h3 id=\"重新载入配置文件\"><a href=\"#重新载入配置文件\" class=\"headerlink\" title=\"重新载入配置文件\"></a>重新载入配置文件</h3>在重新编写或者修改Nginx的配置文件后，都需要作一下重新载入，这时候可以用Nginx给的命令。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看端口号\"><a href=\"#查看端口号\" class=\"headerlink\" title=\"查看端口号\"></a>查看端口号</h3>在默认情况下，Nginx启动后会监听80端口，从而提供HTTP访问，如果80端口已经被占用则会启动失败。我么可以使用netstat -tlnp命令查看端口号的占用情况。<h2 id=\"自定义错误页和访问设置\"><a href=\"#自定义错误页和访问设置\" class=\"headerlink\" title=\"自定义错误页和访问设置\"></a>自定义错误页和访问设置</h2>一个好的网站会武装到牙齿，任何错误都有给用户友好的提示。比如当网站遇到页面没有找到的时候，我们要提示页面没有找到，并给用户可返回性。错误的种类有很多，所以真正的好产品会给顾客不同的返回结果。<h3 id=\"多错误指向一个页面\"><a href=\"#多错误指向一个页面\" class=\"headerlink\" title=\"多错误指向一个页面\"></a>多错误指向一个页面</h3>在/etc/nginx/conf.d/default.conf 是可以看到下面这句话的。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_page   500 502 503 504  /50x.html;</span><br></pre></td></tr></table></figure>\nerror_page指令用于自定义错误页面，500，502，503，504 这些就是HTTP中最常见的错误代码，/50.html 用于表示当发生上述指定的任意一个错误的时候，都是用网站根目录下的/50.html文件进行处理。<h3 id=\"单独为错误置顶处理方法\"><a href=\"#单独为错误置顶处理方法\" class=\"headerlink\" title=\"单独为错误置顶处理方法\"></a>单独为错误置顶处理方法</h3>有些时候是要把这些错误页面单独的表现出来，给用户更好的体验。所以就要为每个错误码设置不同的页面。设置方法如下：<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_page 404  /404_error.html;</span><br></pre></td></tr></table></figure>\n然后到网站目录下新建一个404_error.html 文件，并写入一些信息。<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>404页面没有找到!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n然后重启我们的服务，再进行访问，你会发现404页面发生了变化。<h3 id=\"错误码换成一个地址\"><a href=\"#错误码换成一个地址\" class=\"headerlink\" title=\"错误码换成一个地址\"></a>错误码换成一个地址</h3>处理错误的时候，不仅可以只使用本服务器的资源，还可以使用外部的资源。比如我们将配置文件设置成这样。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_page  404 https://i100.xyz;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单服务控制\"><a href=\"#简单服务控制\" class=\"headerlink\" title=\"简单服务控制\"></a>简单服务控制</h3>有时候我们的服务器只允许特定主机访问，比如内部OA系统，或者应用的管理后台系统，更或者是某些应用接口，这时候我们就需要控制一些IP访问，我们可以直接在location里进行配置。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">       deny   123.9.51.42;</span><br><span class=\"line\">       allow  45.76.202.231;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n配置完成后，重启一下服务器就可以实现限制和允许访问了。<h2 id=\"nginx访问权限\"><a href=\"#nginx访问权限\" class=\"headerlink\" title=\"nginx访问权限\"></a>nginx访问权限</h2>简单接触了Nginx访问简单用法，简单的知道了，deny是禁止访问，allow是允许访问。但Nginx的访问控制还是比较复杂的。<h3 id=\"指令优先级\"><a href=\"#指令优先级\" class=\"headerlink\" title=\"指令优先级\"></a>指令优先级</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">       allow  45.76.202.231;</span><br><span class=\"line\">       deny   all;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n上面的配置表示只允许45.76.202.231进行访问，其他的IP是禁止访问的。但是如果我们把deny all指令，移动到 allow 45.76.202.231之前，会发生什么那？会发现所有的IP都不允许访问了。这说明了一个问题：就是在同一个块下的两个权限指令，先出现的设置会覆盖后出现的设置（也就是谁先触发，谁起作用）。<h3 id=\"复杂访问控制权限匹配\"><a href=\"#复杂访问控制权限匹配\" class=\"headerlink\" title=\"复杂访问控制权限匹配\"></a>复杂访问控制权限匹配</h3>在工作中，访问权限的控制需求更加复杂，例如，对于网站下的img（图片目录）是运行所有用户访问，但对于网站下的admin目录则只允许公司内部固定IP访问。这时候仅靠deny和allow这两个指令，是无法实现的。我们需要location块来完成相关的需求匹配。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location =/img&#123;</span><br><span class=\"line\">    allow all;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location =/admin&#123;</span><br><span class=\"line\">    deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n=号代表精确匹配，使用了=后是根据其后的模式进行精确匹配。这个直接关系到我们网站的安全，一定要学会。<h3 id=\"使用正则表达式设置访问权限\"><a href=\"#使用正则表达式设置访问权限\" class=\"headerlink\" title=\"使用正则表达式设置访问权限\"></a>使用正则表达式设置访问权限</h3>只有精确匹配有时是完不成我们的工作任务的，比如现在我们要禁止访问所有php的页面，php的页面大多是后台的管理或者接口代码，所以为了安全我们经常要禁止所有用户访问，而只开放公司内部访问的。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~\\.php$ &#123;</span><br><span class=\"line\">       deny all;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n这样我们再访问的时候就不能访问以php结尾的文件了。是不是让网站变的安全很多了那？<h2 id=\"nginx反向代理设置\"><a href=\"#nginx反向代理设置\" class=\"headerlink\" title=\"nginx反向代理设置\"></a>nginx反向代理设置</h2>现在的web模式基本的都是标准的CS结构，即Client端到Server端。那代理就是在Client端和Server端之间增加一个提供特定功能的服务器，这个服务器就是我们说的代理服务器。<h3 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h3>如果你觉的反向代理不好理解，那先来了解一下正向代理。我相信作为一个手速远超正常人的程序员来说，你一定用过翻墙工具（我这里说的不是物理梯子），它就是一个典型的正向代理工具。它会把我们不让访问的服务器的网页请求，代理到一个可以访问该网站的代理服务器上来，一般叫做proxy服务器，再转发给客户。<br>简单来说就是你想访问目标服务器的权限，但是没有权限。这时候代理服务器有权限访问服务器，并且你有访问代理服务器的权限，这时候你就可以通过访问代理服务器，代理服务器访问真实服务器，把内容给你呈现出来。<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3>反向代理跟代理正好相反（需要说明的是，现在基本所有的大型网站的页面都是用了反向代理），客户端发送的请求，想要访问server服务器上的内容。发送的内容被发送到代理服务器上，这个代理服务器再把请求发送到自己设置好的内部服务器上，而用户真实想获得的内容就在这些设置好的服务器上。<br>proxy服务器代理的并不是客户端，而是服务器,即向外部客户端提供了一个统一的代理入口，客户端的请求都要先经过这个proxy服务器。具体访问那个服务器server是由Nginx来控制的。再简单点来讲，一般代理指代理的客户端，反向代理是代理的服务器<h3 id=\"反向代理的用途和好处\"><a href=\"#反向代理的用途和好处\" class=\"headerlink\" title=\"反向代理的用途和好处\"></a>反向代理的用途和好处</h3></li>\n<li>安全性：正向代理的客户端能够在隐藏自身信息的同时访问任意网站，这个给网络安全代理了极大的威胁。因此，我们必须把服务器保护起来，使用反向代理客户端用户只能通过外来网来访问代理服务器，并且用户并不知道自己访问的真实服务器是那一台，可以很好的提供安全保护。</li>\n<li>功能性：反向代理的主要用途是为多个服务器提供负债均衡、缓存等功能。负载均衡就是一个网站的内容被部署在若干服务器上，可以把这些机子看成一个集群，那Nginx可以将接收到的客户端请求“均匀地”分配到这个集群中所有的服务器上，从而实现服务器压力的平均分配，也叫负载均衡。<h3 id=\"最简单的反向代理\"><a href=\"#最简单的反向代理\" class=\"headerlink\" title=\"最简单的反向代理\"></a>最简单的反向代理</h3>现在我们要访问<span class=\"exturl\" data-url=\"aHR0cDovL25naW54Mi5pMTAwLmNvbeeEtuWQjuWPjeWQkeS7o+eQhuWIsGkwMC5jb23ov5nkuKrnvZHnq5ku5oiR5Lus55u05o6l5YiwZXRjL25naW54L2Nvbi5kLzgwMDEuY29uZiVFOCVCRiU5QiVFOCVBMSU4QyVFNCVCRiVBRSVFNiU5NCVCOSVFMyU4MCU4Mg==\">http://nginx2.i100.com然后反向代理到i00.com这个网站。我们直接到etc/nginx/con.d/8001.conf进行修改。<i class=\"fa fa-external-link-alt\"></i></span><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name nginx2.i100.com;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">               proxy_pass http://i100.com;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n一般我们反向代理的都是一个IP，但是我这里代理了一个域名也是可以的。其实这时候我们反向代理就算成功了<h3 id=\"其它反向代理指令\"><a href=\"#其它反向代理指令\" class=\"headerlink\" title=\"其它反向代理指令\"></a>其它反向代理指令</h3>proxy_set_header :在将客户端请求发送给后端服务器之前，更改来自客户端的请求头信息。<br>proxy_connect_timeout:配置Nginx与后端代理服务器尝试建立连接的超时时间。<br>proxy_read_timeout : 配置Nginx向后端服务器组发出read请求后，等待相应的超时时间。<br>proxy_send_timeout：配置Nginx向后端服务器组发出write请求后，等待相应的超时时间。<br>proxy_redirect :用于修改后端服务器返回的响应头中的Location和Refresh。<h2 id=\"nginx适配PC或移动设备\"><a href=\"#nginx适配PC或移动设备\" class=\"headerlink\" title=\"nginx适配PC或移动设备\"></a>nginx适配PC或移动设备</h2>现在很多网站都是有了PC端和H5站点的，因为这样就可以根据客户设备的不同，显示出体验更好的，不同的页面了。<br>这样的需求有人说拿自适应就可以搞定，比如我们常说的bootstrap和24格布局法，这些确实是非常好的方案，但是无论是复杂性和易用性上面还是不如分开编写的好，比如我们常见的淘宝、京东……这些大型网站就都没有采用自适应，而是用分开制作的方式。<h3 id=\"http-user-agent的使用\"><a href=\"#http-user-agent的使用\" class=\"headerlink\" title=\"$http_user_agent的使用\"></a>$http_user_agent的使用</h3>Nginx通过内置变量$http_user_agent，可以获取到请求客户端的userAgent，就可以用户目前处于移动端还是PC端，进而展示不同的页面给用户。<br>操作步骤如下：</li>\n<li>1.在/usr/share/nginx/目录下新建两个文件夹，分别为：pc和mobile目录<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/share/nginx</span><br><span class=\"line\">mkdir pc</span><br><span class=\"line\">mkdir mobile</span><br></pre></td></tr></table></figure></li>\n<li>在pc和miblic目录下，新建两个index.html文件，文件里下面内容<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;I am pc!&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;I am mobile!&lt;/h1&gt;</span><br></pre></td></tr></table></figure></li>\n<li>进入etc/nginx/conf.d目录下，修改8001.conf文件，改为下面的形式:<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">     listen 80;</span><br><span class=\"line\">     server_name nginx2.jspang.com;</span><br><span class=\"line\">     location / &#123;</span><br><span class=\"line\">      root /usr/share/nginx/pc;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable\">$http_user_agent</span> ~* <span class=\"string\">&#x27;(Android|webOS|iPhone|iPod|BlackBerry)&#x27;</span>) &#123;</span><br><span class=\"line\">         root /usr/share/nginx/mobile;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      index index.html;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"nginx的Gzip压缩配置\"><a href=\"#nginx的Gzip压缩配置\" class=\"headerlink\" title=\"nginx的Gzip压缩配置\"></a>nginx的Gzip压缩配置</h2>Gzip是网页的一种网页压缩技术，经过gzip压缩后，页面大小可以变为原来的30%甚至更小。更小的网页会让用户浏览的体验更好，速度更快。gzip网页压缩的实现需要浏览器和服务器的支持。<br>gzip是需要服务器和浏览器同事支持的。当浏览器支持gzip压缩时，会在请求消息中包含Accept-Encoding:gzip,这样Nginx就会向浏览器发送听过gzip后的内容，同时在相应信息头中加入Content-Encoding:gzip，声明这是gzip后的内容，告知浏览器要先解压后才能解析输出。<h3 id=\"gzip的配置项\"><a href=\"#gzip的配置项\" class=\"headerlink\" title=\"gzip的配置项\"></a>gzip的配置项</h3>Nginx提供了专门的gzip模块，并且模块中的指令非常丰富。</li>\n<li>gzip : 该指令用于开启或 关闭gzip模块。</li>\n<li>gzip_buffers : 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。</li>\n<li>gzip_comp_level : gzip压缩比，压缩级别是1-9，1的压缩级别最低，9的压缩级别最高。压缩级别越高压缩率越大，压缩时间越长。</li>\n<li>gzip_disable : 可以通过该指令对一些特定的User-Agent不使用压缩功能。</li>\n<li>gzip_min_length:设置允许压缩的页面最小字节数，页面字节数从相应消息头的Content-length中进行获取。</li>\n<li>gzip_http_version：识别HTTP协议版本，其值可以是1.1.或1.0.</li>\n<li>gzip_proxied : 用于设置启用或禁用从代理服务器上收到相应内容gzip压缩。</li>\n<li>gzip_vary : 用于在响应消息头中添加Vary：Accept-Encoding,使代理服务器根据请求头中的Accept-Encoding识别是否启用gzip压缩。<h3 id=\"Gzip最简单配置\"><a href=\"#Gzip最简单配置\" class=\"headerlink\" title=\"Gzip最简单配置\"></a>Gzip最简单配置</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">   .....</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_types text/plain application/javascript text/css;</span><br><span class=\"line\">   .....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\ngzip on是启用gizp模块，下面的一行是用于在客户端访问网页时，对文本、JavaScript 和CSS文件进行压缩输出。<br>配置好后，我们就可以重启Nginx服务，让我们的gizp生效了。<br>如果你是windows操作系统，你可以按F12键打开开发者工具，单机当前的请求，在标签中选择Headers，查看HTTP响应头信息。你可以清楚的看见Content-Encoding为gzip类型。</li>\n</ul>\n","site":{"data":{}},"abbrlink":"27f7e408","excerpt":"","more":"<h2 id=\"nginx基本配置\"><a href=\"#nginx基本配置\" class=\"headerlink\" title=\"nginx基本配置\"></a>nginx基本配置</h2><h3 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h3><p>编辑安装环境</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/yum.repos.d/nginx.repo</span><br></pre></td></tr></table></figure>\n<p>复制下面的代码</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nginx]</span><br><span class=\"line\">name=nginx repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/7/<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n<p>配置完成，然后执行安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n<p>查看nginx版本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看nginx安装目录\"><a href=\"#查看nginx安装目录\" class=\"headerlink\" title=\"查看nginx安装目录\"></a>查看nginx安装目录</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ql nginx</span><br></pre></td></tr></table></figure>\n<p>rpm 是linux的rpm包管理工具，-q 代表询问模式，-l 代表返回列表，这样我们就可以找到nginx的所有安装位置了。</p>\n<h3 id=\"nginx-conf文件解读\"><a href=\"#nginx-conf文件解读\" class=\"headerlink\" title=\"nginx.conf文件解读\"></a>nginx.conf文件解读</h3><p>nginx.conf 文件是Nginx总配置文件，在我们搭建服务器时经常调整的文件。<br>进入etc/nginx目录下，然后用vim进行打开</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/nginx</span><br><span class=\"line\">vim nginx.conf</span><br></pre></td></tr></table></figure>\n<p>下面是文件的详细注释</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#运行用户，默认即是nginx，可以不进行设置</span></span><br><span class=\"line\">user  nginx;</span><br><span class=\"line\"><span class=\"comment\">#Nginx进程，一般设置为和CPU核数一样</span></span><br><span class=\"line\">worker_processes  1;   </span><br><span class=\"line\"><span class=\"comment\">#错误日志存放目录</span></span><br><span class=\"line\">error_log  /var/<span class=\"built_in\">log</span>/nginx/error.log warn;</span><br><span class=\"line\"><span class=\"comment\">#进程pid存放位置</span></span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024; <span class=\"comment\"># 单个后台进程的最大并发数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;   <span class=\"comment\">#文件扩展名与类型映射表</span></span><br><span class=\"line\">    default_type  application/octet-stream;  <span class=\"comment\">#默认文件类型</span></span><br><span class=\"line\">    <span class=\"comment\">#设置日志模式</span></span><br><span class=\"line\">    log_format  main  <span class=\"string\">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/<span class=\"built_in\">log</span>/nginx/access.log  main;   <span class=\"comment\">#nginx访问日志存放位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;   <span class=\"comment\">#开启高效传输模式</span></span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;    #减少网络报文段的数量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  65;  <span class=\"comment\">#保持连接的时间，也叫超时时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;  #开启gzip压缩</span></span><br><span class=\"line\"></span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf; <span class=\"comment\">#包含的子配置项位置和文件</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"default-conf-配置\"><a href=\"#default-conf-配置\" class=\"headerlink\" title=\"default.conf 配置\"></a>default.conf 配置</h3><p>进入conf.d目录，然后使用<code>vim default.conf</code>进行查看。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;   <span class=\"comment\">#配置监听端口</span></span><br><span class=\"line\">    server_name  localhost;  //配置域名</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#charset koi8-r;     </span></span><br><span class=\"line\">    <span class=\"comment\">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;     <span class=\"comment\">#服务默认启动目录</span></span><br><span class=\"line\">        index  index.html index.htm;    <span class=\"comment\">#默认访问文件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#error_page  404              /404.html;   # 配置404页面</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># redirect server error pages to the static page /50x.html</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;   <span class=\"comment\">#错误状态码的显示页面，配置后需要重启</span></span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    proxy_pass   http://127.0.0.1;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    root           html;</span></span><br><span class=\"line\">    <span class=\"comment\">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class=\"line\">    <span class=\"comment\">#    fastcgi_index  index.php;</span></span><br><span class=\"line\">    <span class=\"comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class=\"line\">    <span class=\"comment\">#    include        fastcgi_params;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class=\"line\">    <span class=\"comment\"># concurs with nginx&#x27;s one</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#location ~ /\\.ht &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    deny  all;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>明白了这些配置项，我们知道我们的服务目录放在了/usr/share/nginx/html下，可以使用命令进入看一下目录下的文件。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/share/nginx/html</span><br><span class=\"line\">ls</span><br></pre></td></tr></table></figure>\n<p>可以看到目录下面有两个文件，50x.html 和 index.html。我们可以使用vim进行编辑。</p>\n<h3 id=\"安全组开启\"><a href=\"#安全组开启\" class=\"headerlink\" title=\"安全组开启\"></a>安全组开启</h3><p>阿里云的安全组配置<br>步骤如下：</p>\n<ul>\n<li>进入阿里云控制台，并找到ECS实例。</li>\n<li>点击实例后边的“更多”</li>\n<li>点击“网络和安全组” ，再点击“安全组配置”</li>\n<li>右上角添加“安全组配置”</li>\n<li>进行80端口的设置。<h2 id=\"nginx服务命令\"><a href=\"#nginx服务命令\" class=\"headerlink\" title=\"nginx服务命令\"></a>nginx服务命令</h2><h3 id=\"启动nginx服务\"><a href=\"#启动nginx服务\" class=\"headerlink\" title=\"启动nginx服务\"></a>启动nginx服务</h3><h4 id=\"nginx直接启动\"><a href=\"#nginx直接启动\" class=\"headerlink\" title=\"nginx直接启动\"></a>nginx直接启动</h4>在CentOS7.4版本里（低版本是不行的），是可以直接直接使用nginx启动服务的。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用systemctl命令启动\"><a href=\"#使用systemctl命令启动\" class=\"headerlink\" title=\"使用systemctl命令启动\"></a>使用systemctl命令启动</h4>还可以使用个Linux的命令进行启动，我一般都是采用这种方法进行使用。因为这种方法无论启动什么服务，都是一样的，只是换一下服务的名字（不用增加额外的记忆点）。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx.service</span><br></pre></td></tr></table></figure>\n输入命令后，没有任何提示，那我们如何知道Nginx服务已经启动了哪？可以使用Linux的组合命令，进行查询服务的运行状况。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | grep nginx</span><br></pre></td></tr></table></figure>\n如果有三条记录，说明Nginx被正常开启了。<h3 id=\"停止nginx服务的四种方法\"><a href=\"#停止nginx服务的四种方法\" class=\"headerlink\" title=\"停止nginx服务的四种方法\"></a>停止nginx服务的四种方法</h3>停止Nginx 方法有很多种，可以根据需求采用不一样的方法，一个一个说明。<h4 id=\"立即停止服务\"><a href=\"#立即停止服务\" class=\"headerlink\" title=\"立即停止服务\"></a>立即停止服务</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s stop</span><br></pre></td></tr></table></figure>\n这种方法比较强硬，无论进程是否在工作，都直接停止进程。<h4 id=\"从容停止服务\"><a href=\"#从容停止服务\" class=\"headerlink\" title=\"从容停止服务\"></a>从容停止服务</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s quit</span><br></pre></td></tr></table></figure>\n这种方法较stop相比就比较温和一些了，需要进程完成当前工作后再停止。<h4 id=\"killall方法杀死进程\"><a href=\"#killall方法杀死进程\" class=\"headerlink\" title=\"killall方法杀死进程\"></a>killall方法杀死进程</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall nginx</span><br></pre></td></tr></table></figure>\n这种方法也是比较野蛮的，我们直接杀死进程，但是在上面使用没有效果时，我们用这种方法还是比较好的。<h4 id=\"systemctl停止服务\"><a href=\"#systemctl停止服务\" class=\"headerlink\" title=\"systemctl停止服务\"></a>systemctl停止服务</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop nginx.service</span><br></pre></td></tr></table></figure>\n<h3 id=\"重启nginx服务\"><a href=\"#重启nginx服务\" class=\"headerlink\" title=\"重启nginx服务\"></a>重启nginx服务</h3>有时候要重启nginx服务，可以使用下面的命令<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx.service</span><br></pre></td></tr></table></figure>\n<h3 id=\"重新载入配置文件\"><a href=\"#重新载入配置文件\" class=\"headerlink\" title=\"重新载入配置文件\"></a>重新载入配置文件</h3>在重新编写或者修改Nginx的配置文件后，都需要作一下重新载入，这时候可以用Nginx给的命令。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看端口号\"><a href=\"#查看端口号\" class=\"headerlink\" title=\"查看端口号\"></a>查看端口号</h3>在默认情况下，Nginx启动后会监听80端口，从而提供HTTP访问，如果80端口已经被占用则会启动失败。我么可以使用netstat -tlnp命令查看端口号的占用情况。<h2 id=\"自定义错误页和访问设置\"><a href=\"#自定义错误页和访问设置\" class=\"headerlink\" title=\"自定义错误页和访问设置\"></a>自定义错误页和访问设置</h2>一个好的网站会武装到牙齿，任何错误都有给用户友好的提示。比如当网站遇到页面没有找到的时候，我们要提示页面没有找到，并给用户可返回性。错误的种类有很多，所以真正的好产品会给顾客不同的返回结果。<h3 id=\"多错误指向一个页面\"><a href=\"#多错误指向一个页面\" class=\"headerlink\" title=\"多错误指向一个页面\"></a>多错误指向一个页面</h3>在/etc/nginx/conf.d/default.conf 是可以看到下面这句话的。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_page   500 502 503 504  /50x.html;</span><br></pre></td></tr></table></figure>\nerror_page指令用于自定义错误页面，500，502，503，504 这些就是HTTP中最常见的错误代码，/50.html 用于表示当发生上述指定的任意一个错误的时候，都是用网站根目录下的/50.html文件进行处理。<h3 id=\"单独为错误置顶处理方法\"><a href=\"#单独为错误置顶处理方法\" class=\"headerlink\" title=\"单独为错误置顶处理方法\"></a>单独为错误置顶处理方法</h3>有些时候是要把这些错误页面单独的表现出来，给用户更好的体验。所以就要为每个错误码设置不同的页面。设置方法如下：<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_page 404  /404_error.html;</span><br></pre></td></tr></table></figure>\n然后到网站目录下新建一个404_error.html 文件，并写入一些信息。<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>404页面没有找到!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n然后重启我们的服务，再进行访问，你会发现404页面发生了变化。<h3 id=\"错误码换成一个地址\"><a href=\"#错误码换成一个地址\" class=\"headerlink\" title=\"错误码换成一个地址\"></a>错误码换成一个地址</h3>处理错误的时候，不仅可以只使用本服务器的资源，还可以使用外部的资源。比如我们将配置文件设置成这样。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_page  404 https://i100.xyz;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单服务控制\"><a href=\"#简单服务控制\" class=\"headerlink\" title=\"简单服务控制\"></a>简单服务控制</h3>有时候我们的服务器只允许特定主机访问，比如内部OA系统，或者应用的管理后台系统，更或者是某些应用接口，这时候我们就需要控制一些IP访问，我们可以直接在location里进行配置。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">       deny   123.9.51.42;</span><br><span class=\"line\">       allow  45.76.202.231;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n配置完成后，重启一下服务器就可以实现限制和允许访问了。<h2 id=\"nginx访问权限\"><a href=\"#nginx访问权限\" class=\"headerlink\" title=\"nginx访问权限\"></a>nginx访问权限</h2>简单接触了Nginx访问简单用法，简单的知道了，deny是禁止访问，allow是允许访问。但Nginx的访问控制还是比较复杂的。<h3 id=\"指令优先级\"><a href=\"#指令优先级\" class=\"headerlink\" title=\"指令优先级\"></a>指令优先级</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">       allow  45.76.202.231;</span><br><span class=\"line\">       deny   all;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n上面的配置表示只允许45.76.202.231进行访问，其他的IP是禁止访问的。但是如果我们把deny all指令，移动到 allow 45.76.202.231之前，会发生什么那？会发现所有的IP都不允许访问了。这说明了一个问题：就是在同一个块下的两个权限指令，先出现的设置会覆盖后出现的设置（也就是谁先触发，谁起作用）。<h3 id=\"复杂访问控制权限匹配\"><a href=\"#复杂访问控制权限匹配\" class=\"headerlink\" title=\"复杂访问控制权限匹配\"></a>复杂访问控制权限匹配</h3>在工作中，访问权限的控制需求更加复杂，例如，对于网站下的img（图片目录）是运行所有用户访问，但对于网站下的admin目录则只允许公司内部固定IP访问。这时候仅靠deny和allow这两个指令，是无法实现的。我们需要location块来完成相关的需求匹配。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location =/img&#123;</span><br><span class=\"line\">    allow all;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location =/admin&#123;</span><br><span class=\"line\">    deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n=号代表精确匹配，使用了=后是根据其后的模式进行精确匹配。这个直接关系到我们网站的安全，一定要学会。<h3 id=\"使用正则表达式设置访问权限\"><a href=\"#使用正则表达式设置访问权限\" class=\"headerlink\" title=\"使用正则表达式设置访问权限\"></a>使用正则表达式设置访问权限</h3>只有精确匹配有时是完不成我们的工作任务的，比如现在我们要禁止访问所有php的页面，php的页面大多是后台的管理或者接口代码，所以为了安全我们经常要禁止所有用户访问，而只开放公司内部访问的。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~\\.php$ &#123;</span><br><span class=\"line\">       deny all;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n这样我们再访问的时候就不能访问以php结尾的文件了。是不是让网站变的安全很多了那？<h2 id=\"nginx反向代理设置\"><a href=\"#nginx反向代理设置\" class=\"headerlink\" title=\"nginx反向代理设置\"></a>nginx反向代理设置</h2>现在的web模式基本的都是标准的CS结构，即Client端到Server端。那代理就是在Client端和Server端之间增加一个提供特定功能的服务器，这个服务器就是我们说的代理服务器。<h3 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h3>如果你觉的反向代理不好理解，那先来了解一下正向代理。我相信作为一个手速远超正常人的程序员来说，你一定用过翻墙工具（我这里说的不是物理梯子），它就是一个典型的正向代理工具。它会把我们不让访问的服务器的网页请求，代理到一个可以访问该网站的代理服务器上来，一般叫做proxy服务器，再转发给客户。<br>简单来说就是你想访问目标服务器的权限，但是没有权限。这时候代理服务器有权限访问服务器，并且你有访问代理服务器的权限，这时候你就可以通过访问代理服务器，代理服务器访问真实服务器，把内容给你呈现出来。<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3>反向代理跟代理正好相反（需要说明的是，现在基本所有的大型网站的页面都是用了反向代理），客户端发送的请求，想要访问server服务器上的内容。发送的内容被发送到代理服务器上，这个代理服务器再把请求发送到自己设置好的内部服务器上，而用户真实想获得的内容就在这些设置好的服务器上。<br>proxy服务器代理的并不是客户端，而是服务器,即向外部客户端提供了一个统一的代理入口，客户端的请求都要先经过这个proxy服务器。具体访问那个服务器server是由Nginx来控制的。再简单点来讲，一般代理指代理的客户端，反向代理是代理的服务器<h3 id=\"反向代理的用途和好处\"><a href=\"#反向代理的用途和好处\" class=\"headerlink\" title=\"反向代理的用途和好处\"></a>反向代理的用途和好处</h3></li>\n<li>安全性：正向代理的客户端能够在隐藏自身信息的同时访问任意网站，这个给网络安全代理了极大的威胁。因此，我们必须把服务器保护起来，使用反向代理客户端用户只能通过外来网来访问代理服务器，并且用户并不知道自己访问的真实服务器是那一台，可以很好的提供安全保护。</li>\n<li>功能性：反向代理的主要用途是为多个服务器提供负债均衡、缓存等功能。负载均衡就是一个网站的内容被部署在若干服务器上，可以把这些机子看成一个集群，那Nginx可以将接收到的客户端请求“均匀地”分配到这个集群中所有的服务器上，从而实现服务器压力的平均分配，也叫负载均衡。<h3 id=\"最简单的反向代理\"><a href=\"#最简单的反向代理\" class=\"headerlink\" title=\"最简单的反向代理\"></a>最简单的反向代理</h3>现在我们要访问<span class=\"exturl\" data-url=\"aHR0cDovL25naW54Mi5pMTAwLmNvbeeEtuWQjuWPjeWQkeS7o+eQhuWIsGkwMC5jb23ov5nkuKrnvZHnq5ku5oiR5Lus55u05o6l5YiwZXRjL25naW54L2Nvbi5kLzgwMDEuY29uZiVFOCVCRiU5QiVFOCVBMSU4QyVFNCVCRiVBRSVFNiU5NCVCOSVFMyU4MCU4Mg==\">http://nginx2.i100.com然后反向代理到i00.com这个网站。我们直接到etc/nginx/con.d/8001.conf进行修改。<i class=\"fa fa-external-link-alt\"></i></span><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name nginx2.i100.com;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">               proxy_pass http://i100.com;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n一般我们反向代理的都是一个IP，但是我这里代理了一个域名也是可以的。其实这时候我们反向代理就算成功了<h3 id=\"其它反向代理指令\"><a href=\"#其它反向代理指令\" class=\"headerlink\" title=\"其它反向代理指令\"></a>其它反向代理指令</h3>proxy_set_header :在将客户端请求发送给后端服务器之前，更改来自客户端的请求头信息。<br>proxy_connect_timeout:配置Nginx与后端代理服务器尝试建立连接的超时时间。<br>proxy_read_timeout : 配置Nginx向后端服务器组发出read请求后，等待相应的超时时间。<br>proxy_send_timeout：配置Nginx向后端服务器组发出write请求后，等待相应的超时时间。<br>proxy_redirect :用于修改后端服务器返回的响应头中的Location和Refresh。<h2 id=\"nginx适配PC或移动设备\"><a href=\"#nginx适配PC或移动设备\" class=\"headerlink\" title=\"nginx适配PC或移动设备\"></a>nginx适配PC或移动设备</h2>现在很多网站都是有了PC端和H5站点的，因为这样就可以根据客户设备的不同，显示出体验更好的，不同的页面了。<br>这样的需求有人说拿自适应就可以搞定，比如我们常说的bootstrap和24格布局法，这些确实是非常好的方案，但是无论是复杂性和易用性上面还是不如分开编写的好，比如我们常见的淘宝、京东……这些大型网站就都没有采用自适应，而是用分开制作的方式。<h3 id=\"http-user-agent的使用\"><a href=\"#http-user-agent的使用\" class=\"headerlink\" title=\"$http_user_agent的使用\"></a>$http_user_agent的使用</h3>Nginx通过内置变量$http_user_agent，可以获取到请求客户端的userAgent，就可以用户目前处于移动端还是PC端，进而展示不同的页面给用户。<br>操作步骤如下：</li>\n<li>1.在/usr/share/nginx/目录下新建两个文件夹，分别为：pc和mobile目录<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/share/nginx</span><br><span class=\"line\">mkdir pc</span><br><span class=\"line\">mkdir mobile</span><br></pre></td></tr></table></figure></li>\n<li>在pc和miblic目录下，新建两个index.html文件，文件里下面内容<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;I am pc!&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;I am mobile!&lt;/h1&gt;</span><br></pre></td></tr></table></figure></li>\n<li>进入etc/nginx/conf.d目录下，修改8001.conf文件，改为下面的形式:<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">     listen 80;</span><br><span class=\"line\">     server_name nginx2.jspang.com;</span><br><span class=\"line\">     location / &#123;</span><br><span class=\"line\">      root /usr/share/nginx/pc;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable\">$http_user_agent</span> ~* <span class=\"string\">&#x27;(Android|webOS|iPhone|iPod|BlackBerry)&#x27;</span>) &#123;</span><br><span class=\"line\">         root /usr/share/nginx/mobile;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      index index.html;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"nginx的Gzip压缩配置\"><a href=\"#nginx的Gzip压缩配置\" class=\"headerlink\" title=\"nginx的Gzip压缩配置\"></a>nginx的Gzip压缩配置</h2>Gzip是网页的一种网页压缩技术，经过gzip压缩后，页面大小可以变为原来的30%甚至更小。更小的网页会让用户浏览的体验更好，速度更快。gzip网页压缩的实现需要浏览器和服务器的支持。<br>gzip是需要服务器和浏览器同事支持的。当浏览器支持gzip压缩时，会在请求消息中包含Accept-Encoding:gzip,这样Nginx就会向浏览器发送听过gzip后的内容，同时在相应信息头中加入Content-Encoding:gzip，声明这是gzip后的内容，告知浏览器要先解压后才能解析输出。<h3 id=\"gzip的配置项\"><a href=\"#gzip的配置项\" class=\"headerlink\" title=\"gzip的配置项\"></a>gzip的配置项</h3>Nginx提供了专门的gzip模块，并且模块中的指令非常丰富。</li>\n<li>gzip : 该指令用于开启或 关闭gzip模块。</li>\n<li>gzip_buffers : 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。</li>\n<li>gzip_comp_level : gzip压缩比，压缩级别是1-9，1的压缩级别最低，9的压缩级别最高。压缩级别越高压缩率越大，压缩时间越长。</li>\n<li>gzip_disable : 可以通过该指令对一些特定的User-Agent不使用压缩功能。</li>\n<li>gzip_min_length:设置允许压缩的页面最小字节数，页面字节数从相应消息头的Content-length中进行获取。</li>\n<li>gzip_http_version：识别HTTP协议版本，其值可以是1.1.或1.0.</li>\n<li>gzip_proxied : 用于设置启用或禁用从代理服务器上收到相应内容gzip压缩。</li>\n<li>gzip_vary : 用于在响应消息头中添加Vary：Accept-Encoding,使代理服务器根据请求头中的Accept-Encoding识别是否启用gzip压缩。<h3 id=\"Gzip最简单配置\"><a href=\"#Gzip最简单配置\" class=\"headerlink\" title=\"Gzip最简单配置\"></a>Gzip最简单配置</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">   .....</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_types text/plain application/javascript text/css;</span><br><span class=\"line\">   .....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\ngzip on是启用gizp模块，下面的一行是用于在客户端访问网页时，对文本、JavaScript 和CSS文件进行压缩输出。<br>配置好后，我们就可以重启Nginx服务，让我们的gizp生效了。<br>如果你是windows操作系统，你可以按F12键打开开发者工具，单机当前的请求，在标签中选择Headers，查看HTTP响应头信息。你可以清楚的看见Content-Encoding为gzip类型。</li>\n</ul>\n"},{"title":"在centos7安装nodejs并升级nodejs版本","abbrlink":"59268fdb","date":"2022-01-06T16:00:00.000Z","_content":"## 1. 安装 nodejs\n------------\n\n### 1.1 使用 EPEL 安装\n\nEPEL（Extra Packages for Enterprise Linux）企业版 Linux 的额外软件包，是 Fedora 小组维护的一个软件仓库项目，为 RHEL/CentOS 提供他们默认不提供的软件包。  \n先确认系统是否已经安装了 epel-release 包：\n```\n$ yum info epel-release\n\n```\n<!--more-->\n如果有输出有关 epel-release 的已安装信息，则说明已经安装，如果提示没有安装或可安装，则安装\n\n```\n$ yum install epel-release\n```\n\n安装完后，就可以使用 yum 命令安装 nodejs 了，安装的一般会是 6.x 的版本，并且会将 npm(3.x) 作为依赖包一起安装\n```\n$ sudo yum install nodejs\n```\n\n安装完成后，验证是否正确的安装，`node -v`，如果输出如下版本信息，说明成功安装\n\n```\nv6.13.3\n```\n\n问题来了，现在 nodejs 发的版本比较快，有些新的框架需要 node 的新版本，那如何升级。到现在，node 的最新版本是`10.4.1`，那么，下面介绍如何升级 nodejs\n\n### 1.2 卸载 nodejs\n\n> 注意：这里卸载并非必要步骤。只是提供卸载的方案，请按需操作，不要安装后又删除又进行安装掉进死循环了。\n\n1.2.1 使用 yum 先删除一次\n\n```\nyum remove nodejs npm -y\n```\n\n1.2.2 手动删除残留\n\n*   进入 /usr/local/lib 删除所有 node 和 node_modules 文件夹\n*   进入 /usr/local/include 删除所有 node 和 node_modules 文件夹\n*   检查 ~ 文件夹里面的 \"local\" \"lib\" \"include\" 文件夹，然后删除里面的所有 \"node\" 和 \"node_modules\" 文件夹\n*   可以使用以下命令查找 `$ find ~/ -name node` `$ find ~/ -name node_modules`\n\n1.2.3 进入 /usr/local/bin 删除 node 的可执行文件\n\n*   删除: /usr/local/bin/npm\n*   删除: /usr/local/share/man/man1/node.1\n*   删除: /usr/local/lib/dtrace/node.d\n*   删除: rm -rf /home/[homedir]/.npm\n*   删除: rm -rf /home/root/.npm\n\n## 2. 升级 nodesj\n------------\n\n### 2.1 安装 n\n\nn 是 nodejs 管理工具，是 TJ 写的，Github: [https://github.com/tj/n](https://github.com/tj/n)\n\n```\n$ npm install -g n\n```\n\n### 2.2 安装 nodejs 版本\n\n安装最新版\n\n```\n$ n latest\n```\n\n安装指定版本\n\n```\n$ n 8.11.3  \n```\n\n### 2.3 切换 nodejs 版本\n\n```\n$ n\n```\n\n选择已安装的版本\n\n```\n   node/8.11.3\n   node/10.4.1\n```\n\n查看当前版本`node -v`，下面表示已切换成功\n\n```\nv8.13.3\n```\n\n但问题来了，切换后，查看版本还是原来的 v6.13.3，看下面 **使用 n 切换 nodejs 版本失效的解决办法**\n\n## 3 切换失效的解决办法\n-----------\n\n### 3.1 查看 node 当前安装路径\n\n```\n$ which node\n/usr/local/bin/node #举个例子\n```\n\n### 3.2 修改默认路径\n而 n 默认安装路径是 /usr/local，若你的 node 不是在此路径下，n 切换版本就不能把 bin、lib、include、share 复制该路径中，所以我们必须通过 N_PREFIX 变量来修改 n 的默认 node 安装路径。  \n编辑环境配置文件：\n\n```\n$ vim ~/.bash_profile\n```\n\n### 3.3 将下面两行代码插入到文件末尾：\n\n```\nexport N_PREFIX=/usr/local #node实际安装位置\nexport PATH=$N_PREFIX/bin:$PATH\n```\n\n### 3.4 `:wq`保存退出\n\n### 3.5 执行 source 使修改生效。\n\n```\n$ source ~/.bash_profile\n```\n\n### 3.6 这时候再查看`node -v`发现版本切换成功了。\n","source":"_posts/在centos7安装nodejs并升级nodejs版本.md","raw":"---\ntitle: 在centos7安装nodejs并升级nodejs版本\nabbrlink: 59268fdb\ndate: 2022-01-07\n---\n## 1. 安装 nodejs\n------------\n\n### 1.1 使用 EPEL 安装\n\nEPEL（Extra Packages for Enterprise Linux）企业版 Linux 的额外软件包，是 Fedora 小组维护的一个软件仓库项目，为 RHEL/CentOS 提供他们默认不提供的软件包。  \n先确认系统是否已经安装了 epel-release 包：\n```\n$ yum info epel-release\n\n```\n<!--more-->\n如果有输出有关 epel-release 的已安装信息，则说明已经安装，如果提示没有安装或可安装，则安装\n\n```\n$ yum install epel-release\n```\n\n安装完后，就可以使用 yum 命令安装 nodejs 了，安装的一般会是 6.x 的版本，并且会将 npm(3.x) 作为依赖包一起安装\n```\n$ sudo yum install nodejs\n```\n\n安装完成后，验证是否正确的安装，`node -v`，如果输出如下版本信息，说明成功安装\n\n```\nv6.13.3\n```\n\n问题来了，现在 nodejs 发的版本比较快，有些新的框架需要 node 的新版本，那如何升级。到现在，node 的最新版本是`10.4.1`，那么，下面介绍如何升级 nodejs\n\n### 1.2 卸载 nodejs\n\n> 注意：这里卸载并非必要步骤。只是提供卸载的方案，请按需操作，不要安装后又删除又进行安装掉进死循环了。\n\n1.2.1 使用 yum 先删除一次\n\n```\nyum remove nodejs npm -y\n```\n\n1.2.2 手动删除残留\n\n*   进入 /usr/local/lib 删除所有 node 和 node_modules 文件夹\n*   进入 /usr/local/include 删除所有 node 和 node_modules 文件夹\n*   检查 ~ 文件夹里面的 \"local\" \"lib\" \"include\" 文件夹，然后删除里面的所有 \"node\" 和 \"node_modules\" 文件夹\n*   可以使用以下命令查找 `$ find ~/ -name node` `$ find ~/ -name node_modules`\n\n1.2.3 进入 /usr/local/bin 删除 node 的可执行文件\n\n*   删除: /usr/local/bin/npm\n*   删除: /usr/local/share/man/man1/node.1\n*   删除: /usr/local/lib/dtrace/node.d\n*   删除: rm -rf /home/[homedir]/.npm\n*   删除: rm -rf /home/root/.npm\n\n## 2. 升级 nodesj\n------------\n\n### 2.1 安装 n\n\nn 是 nodejs 管理工具，是 TJ 写的，Github: [https://github.com/tj/n](https://github.com/tj/n)\n\n```\n$ npm install -g n\n```\n\n### 2.2 安装 nodejs 版本\n\n安装最新版\n\n```\n$ n latest\n```\n\n安装指定版本\n\n```\n$ n 8.11.3  \n```\n\n### 2.3 切换 nodejs 版本\n\n```\n$ n\n```\n\n选择已安装的版本\n\n```\n   node/8.11.3\n   node/10.4.1\n```\n\n查看当前版本`node -v`，下面表示已切换成功\n\n```\nv8.13.3\n```\n\n但问题来了，切换后，查看版本还是原来的 v6.13.3，看下面 **使用 n 切换 nodejs 版本失效的解决办法**\n\n## 3 切换失效的解决办法\n-----------\n\n### 3.1 查看 node 当前安装路径\n\n```\n$ which node\n/usr/local/bin/node #举个例子\n```\n\n### 3.2 修改默认路径\n而 n 默认安装路径是 /usr/local，若你的 node 不是在此路径下，n 切换版本就不能把 bin、lib、include、share 复制该路径中，所以我们必须通过 N_PREFIX 变量来修改 n 的默认 node 安装路径。  \n编辑环境配置文件：\n\n```\n$ vim ~/.bash_profile\n```\n\n### 3.3 将下面两行代码插入到文件末尾：\n\n```\nexport N_PREFIX=/usr/local #node实际安装位置\nexport PATH=$N_PREFIX/bin:$PATH\n```\n\n### 3.4 `:wq`保存退出\n\n### 3.5 执行 source 使修改生效。\n\n```\n$ source ~/.bash_profile\n```\n\n### 3.6 这时候再查看`node -v`发现版本切换成功了。\n","slug":"在centos7安装nodejs并升级nodejs版本","published":1,"updated":"2022-01-09T09:28:43.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyaf40s30007esl31vw26ira","content":"<h2 id=\"1-安装-nodejs\"><a href=\"#1-安装-nodejs\" class=\"headerlink\" title=\"1. 安装 nodejs\"></a>1. 安装 nodejs</h2><hr>\n<h3 id=\"1-1-使用-EPEL-安装\"><a href=\"#1-1-使用-EPEL-安装\" class=\"headerlink\" title=\"1.1 使用 EPEL 安装\"></a>1.1 使用 EPEL 安装</h3><p>EPEL（Extra Packages for Enterprise Linux）企业版 Linux 的额外软件包，是 Fedora 小组维护的一个软件仓库项目，为 RHEL/CentOS 提供他们默认不提供的软件包。<br>先确认系统是否已经安装了 epel-release 包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum info epel-release</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>如果有输出有关 epel-release 的已安装信息，则说明已经安装，如果提示没有安装或可安装，则安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install epel-release</span><br></pre></td></tr></table></figure>\n\n<p>安装完后，就可以使用 yum 命令安装 nodejs 了，安装的一般会是 6.x 的版本，并且会将 npm(3.x) 作为依赖包一起安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install nodejs</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，验证是否正确的安装，<code>node -v</code>，如果输出如下版本信息，说明成功安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v6.13.3</span><br></pre></td></tr></table></figure>\n\n<p>问题来了，现在 nodejs 发的版本比较快，有些新的框架需要 node 的新版本，那如何升级。到现在，node 的最新版本是<code>10.4.1</code>，那么，下面介绍如何升级 nodejs</p>\n<h3 id=\"1-2-卸载-nodejs\"><a href=\"#1-2-卸载-nodejs\" class=\"headerlink\" title=\"1.2 卸载 nodejs\"></a>1.2 卸载 nodejs</h3><blockquote>\n<p>注意：这里卸载并非必要步骤。只是提供卸载的方案，请按需操作，不要安装后又删除又进行安装掉进死循环了。</p>\n</blockquote>\n<p>1.2.1 使用 yum 先删除一次</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove nodejs npm -y</span><br></pre></td></tr></table></figure>\n\n<p>1.2.2 手动删除残留</p>\n<ul>\n<li>  进入 /usr/local/lib 删除所有 node 和 node_modules 文件夹</li>\n<li>  进入 /usr/local/include 删除所有 node 和 node_modules 文件夹</li>\n<li>  检查 ~ 文件夹里面的 “local” “lib” “include” 文件夹，然后删除里面的所有 “node” 和 “node_modules” 文件夹</li>\n<li>  可以使用以下命令查找 <code>$ find ~/ -name node</code> <code>$ find ~/ -name node_modules</code></li>\n</ul>\n<p>1.2.3 进入 /usr/local/bin 删除 node 的可执行文件</p>\n<ul>\n<li>  删除: /usr/local/bin/npm</li>\n<li>  删除: /usr/local/share/man/man1/node.1</li>\n<li>  删除: /usr/local/lib/dtrace/node.d</li>\n<li>  删除: rm -rf /home/[homedir]/.npm</li>\n<li>  删除: rm -rf /home/root/.npm</li>\n</ul>\n<h2 id=\"2-升级-nodesj\"><a href=\"#2-升级-nodesj\" class=\"headerlink\" title=\"2. 升级 nodesj\"></a>2. 升级 nodesj</h2><hr>\n<h3 id=\"2-1-安装-n\"><a href=\"#2-1-安装-n\" class=\"headerlink\" title=\"2.1 安装 n\"></a>2.1 安装 n</h3><p>n 是 nodejs 管理工具，是 TJ 写的，Github: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RqL24=\">https://github.com/tj/n<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g n</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-安装-nodejs-版本\"><a href=\"#2-2-安装-nodejs-版本\" class=\"headerlink\" title=\"2.2 安装 nodejs 版本\"></a>2.2 安装 nodejs 版本</h3><p>安装最新版</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ n latest</span><br></pre></td></tr></table></figure>\n\n<p>安装指定版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ n 8.11.3  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-切换-nodejs-版本\"><a href=\"#2-3-切换-nodejs-版本\" class=\"headerlink\" title=\"2.3 切换 nodejs 版本\"></a>2.3 切换 nodejs 版本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ n</span><br></pre></td></tr></table></figure>\n\n<p>选择已安装的版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node/8.11.3</span><br><span class=\"line\">node/10.4.1</span><br></pre></td></tr></table></figure>\n\n<p>查看当前版本<code>node -v</code>，下面表示已切换成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v8.13.3</span><br></pre></td></tr></table></figure>\n\n<p>但问题来了，切换后，查看版本还是原来的 v6.13.3，看下面 <strong>使用 n 切换 nodejs 版本失效的解决办法</strong></p>\n<h2 id=\"3-切换失效的解决办法\"><a href=\"#3-切换失效的解决办法\" class=\"headerlink\" title=\"3 切换失效的解决办法\"></a>3 切换失效的解决办法</h2><hr>\n<h3 id=\"3-1-查看-node-当前安装路径\"><a href=\"#3-1-查看-node-当前安装路径\" class=\"headerlink\" title=\"3.1 查看 node 当前安装路径\"></a>3.1 查看 node 当前安装路径</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ which node</span><br><span class=\"line\">/usr/local/bin/node #举个例子</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-修改默认路径\"><a href=\"#3-2-修改默认路径\" class=\"headerlink\" title=\"3.2 修改默认路径\"></a>3.2 修改默认路径</h3><p>而 n 默认安装路径是 /usr/local，若你的 node 不是在此路径下，n 切换版本就不能把 bin、lib、include、share 复制该路径中，所以我们必须通过 N_PREFIX 变量来修改 n 的默认 node 安装路径。<br>编辑环境配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-将下面两行代码插入到文件末尾：\"><a href=\"#3-3-将下面两行代码插入到文件末尾：\" class=\"headerlink\" title=\"3.3 将下面两行代码插入到文件末尾：\"></a>3.3 将下面两行代码插入到文件末尾：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export N_PREFIX=/usr/local #node实际安装位置</span><br><span class=\"line\">export PATH=$N_PREFIX/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-wq保存退出\"><a href=\"#3-4-wq保存退出\" class=\"headerlink\" title=\"3.4 :wq保存退出\"></a>3.4 <code>:wq</code>保存退出</h3><h3 id=\"3-5-执行-source-使修改生效。\"><a href=\"#3-5-执行-source-使修改生效。\" class=\"headerlink\" title=\"3.5 执行 source 使修改生效。\"></a>3.5 执行 source 使修改生效。</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-6-这时候再查看node-v发现版本切换成功了。\"><a href=\"#3-6-这时候再查看node-v发现版本切换成功了。\" class=\"headerlink\" title=\"3.6 这时候再查看node -v发现版本切换成功了。\"></a>3.6 这时候再查看<code>node -v</code>发现版本切换成功了。</h3>","site":{"data":{}},"excerpt":"<h2 id=\"1-安装-nodejs\"><a href=\"#1-安装-nodejs\" class=\"headerlink\" title=\"1. 安装 nodejs\"></a>1. 安装 nodejs</h2><hr>\n<h3 id=\"1-1-使用-EPEL-安装\"><a href=\"#1-1-使用-EPEL-安装\" class=\"headerlink\" title=\"1.1 使用 EPEL 安装\"></a>1.1 使用 EPEL 安装</h3><p>EPEL（Extra Packages for Enterprise Linux）企业版 Linux 的额外软件包，是 Fedora 小组维护的一个软件仓库项目，为 RHEL/CentOS 提供他们默认不提供的软件包。<br>先确认系统是否已经安装了 epel-release 包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum info epel-release</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","more":"<p>如果有输出有关 epel-release 的已安装信息，则说明已经安装，如果提示没有安装或可安装，则安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install epel-release</span><br></pre></td></tr></table></figure>\n\n<p>安装完后，就可以使用 yum 命令安装 nodejs 了，安装的一般会是 6.x 的版本，并且会将 npm(3.x) 作为依赖包一起安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install nodejs</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，验证是否正确的安装，<code>node -v</code>，如果输出如下版本信息，说明成功安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v6.13.3</span><br></pre></td></tr></table></figure>\n\n<p>问题来了，现在 nodejs 发的版本比较快，有些新的框架需要 node 的新版本，那如何升级。到现在，node 的最新版本是<code>10.4.1</code>，那么，下面介绍如何升级 nodejs</p>\n<h3 id=\"1-2-卸载-nodejs\"><a href=\"#1-2-卸载-nodejs\" class=\"headerlink\" title=\"1.2 卸载 nodejs\"></a>1.2 卸载 nodejs</h3><blockquote>\n<p>注意：这里卸载并非必要步骤。只是提供卸载的方案，请按需操作，不要安装后又删除又进行安装掉进死循环了。</p>\n</blockquote>\n<p>1.2.1 使用 yum 先删除一次</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove nodejs npm -y</span><br></pre></td></tr></table></figure>\n\n<p>1.2.2 手动删除残留</p>\n<ul>\n<li>  进入 /usr/local/lib 删除所有 node 和 node_modules 文件夹</li>\n<li>  进入 /usr/local/include 删除所有 node 和 node_modules 文件夹</li>\n<li>  检查 ~ 文件夹里面的 “local” “lib” “include” 文件夹，然后删除里面的所有 “node” 和 “node_modules” 文件夹</li>\n<li>  可以使用以下命令查找 <code>$ find ~/ -name node</code> <code>$ find ~/ -name node_modules</code></li>\n</ul>\n<p>1.2.3 进入 /usr/local/bin 删除 node 的可执行文件</p>\n<ul>\n<li>  删除: /usr/local/bin/npm</li>\n<li>  删除: /usr/local/share/man/man1/node.1</li>\n<li>  删除: /usr/local/lib/dtrace/node.d</li>\n<li>  删除: rm -rf /home/[homedir]/.npm</li>\n<li>  删除: rm -rf /home/root/.npm</li>\n</ul>\n<h2 id=\"2-升级-nodesj\"><a href=\"#2-升级-nodesj\" class=\"headerlink\" title=\"2. 升级 nodesj\"></a>2. 升级 nodesj</h2><hr>\n<h3 id=\"2-1-安装-n\"><a href=\"#2-1-安装-n\" class=\"headerlink\" title=\"2.1 安装 n\"></a>2.1 安装 n</h3><p>n 是 nodejs 管理工具，是 TJ 写的，Github: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RqL24=\">https://github.com/tj/n<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g n</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-安装-nodejs-版本\"><a href=\"#2-2-安装-nodejs-版本\" class=\"headerlink\" title=\"2.2 安装 nodejs 版本\"></a>2.2 安装 nodejs 版本</h3><p>安装最新版</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ n latest</span><br></pre></td></tr></table></figure>\n\n<p>安装指定版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ n 8.11.3  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-切换-nodejs-版本\"><a href=\"#2-3-切换-nodejs-版本\" class=\"headerlink\" title=\"2.3 切换 nodejs 版本\"></a>2.3 切换 nodejs 版本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ n</span><br></pre></td></tr></table></figure>\n\n<p>选择已安装的版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node/8.11.3</span><br><span class=\"line\">node/10.4.1</span><br></pre></td></tr></table></figure>\n\n<p>查看当前版本<code>node -v</code>，下面表示已切换成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v8.13.3</span><br></pre></td></tr></table></figure>\n\n<p>但问题来了，切换后，查看版本还是原来的 v6.13.3，看下面 <strong>使用 n 切换 nodejs 版本失效的解决办法</strong></p>\n<h2 id=\"3-切换失效的解决办法\"><a href=\"#3-切换失效的解决办法\" class=\"headerlink\" title=\"3 切换失效的解决办法\"></a>3 切换失效的解决办法</h2><hr>\n<h3 id=\"3-1-查看-node-当前安装路径\"><a href=\"#3-1-查看-node-当前安装路径\" class=\"headerlink\" title=\"3.1 查看 node 当前安装路径\"></a>3.1 查看 node 当前安装路径</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ which node</span><br><span class=\"line\">/usr/local/bin/node #举个例子</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-修改默认路径\"><a href=\"#3-2-修改默认路径\" class=\"headerlink\" title=\"3.2 修改默认路径\"></a>3.2 修改默认路径</h3><p>而 n 默认安装路径是 /usr/local，若你的 node 不是在此路径下，n 切换版本就不能把 bin、lib、include、share 复制该路径中，所以我们必须通过 N_PREFIX 变量来修改 n 的默认 node 安装路径。<br>编辑环境配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-将下面两行代码插入到文件末尾：\"><a href=\"#3-3-将下面两行代码插入到文件末尾：\" class=\"headerlink\" title=\"3.3 将下面两行代码插入到文件末尾：\"></a>3.3 将下面两行代码插入到文件末尾：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export N_PREFIX=/usr/local #node实际安装位置</span><br><span class=\"line\">export PATH=$N_PREFIX/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-wq保存退出\"><a href=\"#3-4-wq保存退出\" class=\"headerlink\" title=\"3.4 :wq保存退出\"></a>3.4 <code>:wq</code>保存退出</h3><h3 id=\"3-5-执行-source-使修改生效。\"><a href=\"#3-5-执行-source-使修改生效。\" class=\"headerlink\" title=\"3.5 执行 source 使修改生效。\"></a>3.5 执行 source 使修改生效。</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-6-这时候再查看node-v发现版本切换成功了。\"><a href=\"#3-6-这时候再查看node-v发现版本切换成功了。\" class=\"headerlink\" title=\"3.6 这时候再查看node -v发现版本切换成功了。\"></a>3.6 这时候再查看<code>node -v</code>发现版本切换成功了。</h3>"},{"title":"如何让你的代码更优雅","abbrlink":"932a8af7","date":"2022-01-08T08:35:04.000Z","_content":"## 常量赋值\n### 引用数据类型\n包括接口中返回的数据，要做好兜底\n```js\nlet lastName = fullName[1] || ''\nlet propertyValue=Object.attr || 0\n```\n### 指明类型\n要按强类型风格写代码定义变量的时候要指明类型，并且在变量声明之后，不要随意的去更改变量的数据类型\n```js\n// 假设声明三个变量a,b,c\nlet a,b,c; // difference，定义变量时没有指明类型\nlet a = \"\", b = [], c = {}; // good\n```\n## 逻辑判断\n### `==`逻辑判断注意\n`==` 表示只要值相等即为真，`===` 要求不仅值相等，而且也要求类型相同\n使用== 有时候会达不到预期的结果，埋下隐患\n```js\n0  == ''          // true\n0  == '0'         // true\n'' == 0           // true\n'' == '0'         // false\nfalse == '0'        // true\nfalse == 'false'    // false\nfalse == undefined  // false\nfalse == null       // false\nnull == undefined   // true\ntrue == 1           // true\n```\n### 数据类型不确定\n如果变量的数据类型不确定，那咱就手动的转换一下，让它确定\n```js\nlet total = \"6\";\nif(parseInt(total) === 6){} // grace 手动转换一下数据类型\n```\n<!--more-->\n## 数组\n### 数组拷贝\n```js\nlet items=['1','2','3'];\nconst itemCopy = [...items]\n// joining arrays \nconst odd = [1, 3, 5 ]; \nconst nums = [2 ,4 , 6, ...odd]; \n```\n### 变量赋值\n```js\nconst Arr = [1, 2, 3, 4];\nconst [first, second] = Arr; \n```\n## 函数的命名\n 返回布尔值函数应以is/can/has等单词开头，能够让人更直观的了解到这个函数的功能；获取接口中的数据使用get开头进行命名,动作函数要以动词开头。\n```js\n// grace\nlet isSupport = () => {};\nlet canUpdate = () => {};\nlet geUserInfo = (user) => {}\nlet setUserInfo = (user) => {}\n```\n## 优先使用箭头函数\n```js\n// grace 是不是看着更简介优雅了\nlet findAge = (arr, age)=> arr.filter(num => num === age)\n```\n## 函数的入参\n函数的入参，是能够让使用者，在调用这个函数的时候，能够更加的清晰明了的把这个函数所需要的参数传递给函数，不容易出现，参数传递错误（参数的顺序颠倒等）一些低级，而又不好查找的问题\n```js\n// difference\n// true和false啥意思，没有个注释的话，看上去就是一脸懵逼\nfunction getImages(api, true, false); \n// grace\n// 一目了然，知道这些true和false是啥意思\nfunction getImages({\n    imageApi: api,\n    includePageBackground: true, \n    compress: false,\n})\n```\n## 接收参数\n如果函数的的参数是对象，也要优先使用解构赋值，上代码\n```js\n// 假设现在的场景是获取用户的信息上的现用名，和曾用名\n// difference\nfunction getFullName(user) {\n  const firstName = user.firstName;\n  const lastName = user.lastName;\n}\n\n// commonly\nfunction getFullName(obj) {\n  const { firstName, lastName } = obj;\n}\n\n// grace\nfunction getFullName({ firstName, lastName }) {\n}\n\n// grace 给它个默认值\nfunction getFullName({firstName, lastName = '无'}) {\n}\n \n// 觉得参数的名称太长，咱再来个重命名  解构时重命名简化命名\n// grace\nfunction getFullName ({firstName: first, lastName: last}) {\n \n}\n```\n## 参数效验\n更少的嵌套，不满足条件尽早 return，尽可能的减少嵌套，嵌套的层级越少，函数看着越简洁优雅\n```js\nfunction test(name, sex = 1) {\n  // 不满足条件尽早抛出错误\n  if (!name){ \n      throw new Error('没有传递name参数');\n  }\n}\n```\n## 函数的出参\n对象作为返回值，更便于以后添加返回值，以及更改返回值的顺序，相对于数组更加的灵活，更便于扩展\n```js\n// 函数返回多个值，推荐使用对象作为函数的返回值\n// commonly\nfunction processInput(input) {\n  return [left, right, top, bottom];\n}\n\n// grace\nfunction processInput(input) {\n  return { left, right, top, bottom };\n}\nconst { left, right } = processInput(input);\n```\n## 立即执行函数\n立即执行函数也推荐写成箭头函数的形式。首先是因为更简洁，并且也绑定好 this（箭头函数不会去改变this的指向）。\n```js\n(() => {\n  console.log('立即执行函数');\n})();\n```\n## 优先使用函数式编程\n```js\n// difference\nfor(i = 1; i <= 10; i++) {\n   a[i] = a[i] +1;\n}\n// grace\nlet b = a.map(item => ++item) //是不是更简洁了\n```\n## 函数中过多的采用if else\n```js\n// commonly\nif (a === 1) {\n    //...\n} else if (a ===2) {\n   // ...\n} else if (a === 3) {\n    //...\n} else {\n   //...\n}\n    \n// 一般\nswitch(a) {\n    case 1:\n        //....\n    case 2:\n        //....\n    case 3:\n        //....\n    default:\n    //....\n}\n\n// grace ===》》》 Object\nconst fruit = {\n    1: ['1', '11'],\n    2: ['2', '22'],\n    3: ['3', '33']\n };\nlet test = (a) => {\n  return fruit[a] || [];\n}\n\n// grace ===》》》 Map\nconst fruit = newMap()\n  .set('张三', ['张三丰', '张三力'])\n  .set('李四', ['李思维', '李素丽'])\nlet test = (a) => {\n\treturn fruit.get(a) || [];\n}\n\n// grace ===》》》filter\nconst fruits = [\n    { name: '张三', work: 'js' }, \n    { name: '李四', work: 'php' }, \n    { name: '王五', work: 'java' }, \n];\nlet test = (a) => {\n  return fruits.filter(item => item.name === a);\n}\n\n// grace===》》》策略模式\nlet handler = {\n    1: () => {\n        //....\n    },\n    2: () => {\n        //....\n    },\n    3: () => {\n        //....\n    },\n    default: () => {\n        //....\n    }\n}\nhandler[a]() || handler['default']()\n```\n## 温馨小提示\n一个函数完成一个独立的功能，不要一个函数混杂多个功能，在项目开发中有一条非常重要的原则【单一原则】所谓的单一原则就是，一个函数（文件），只做一件事情，在开发当中，没有那个项目是开发完成之后，就结束了。需要不断的更新，维护，那么单一原则，就是为了方便开发，和维护的，不要让一个函数“又当爹，又当妈”，这样代码的耦合性太高了，不好维护\n## 其他\n### 判断数组长度\n```js\n// difference\nif (arr.length !== 0) {\n    //...\n}\n\n// grace\nif (arr.length) {\n    //...\n}\n\n\n// difference\nif (arr.length === 0) {\n    //...\n}\n\n// grace\nif (!arr.length) {\n    //...\n}\n```\n### 逻辑运算符\n```js\nif (a === 1) {\n    b()\n}\n//可以写成\na === 1 && b()\n\nconst arr = [1,2,3];\nif(!arr.length){\n   b()\n }\n//可以写出\narr.length || b()\n\n// &&判断依赖的键是否存在，防止报错'xxx of undfined'\nlet user = {\n    name: 'Symbol卢',\n    age: 18,\n    children: {\n        name: '小Symbol卢'\n    }\n}\nlet childrenName = user.children && user.childre.name\n```\n### 三目运算符\n```js\n// difference\nconst a = '';\nlet b;\nif( a === '' ){\n    b = 'no'\n} else {\n    b = 'ok'\n}\n\nconst a = ''\nlet b = a ? 'no' : 'ok'; // 'ok'\n```\n### 函数定义\n```js\n/**\n * @description: 数据类型的检测的第二种方式\n * @param {any} data 要检测数据类型的变量\n * @return {string} type 返回具体的类型名称【小写】\n */\nexport const isTypeOf = (data) => {\n    return Object.prototype.toString.call(data).replace(/\\[object (\\w+)\\]/, '$1').toLowerCase()\n}\n```\n### 使用 Array.includes 来处理多重 || 条件\n```js\n// difference\nif (a === 1 || a === 2 || a === 3 || a === 4) {\n    //...\n}\n// grace\nlet arr = [1, 2, 3, 4]\nif (arr.includes(a)) {\n    //...\n}\n```\n### 使用 Array.every 和 Array.some 来处理全部/部分满足条件\n```js\n// grace\nconst users = [\n    { name: '张三', sex:1 },\n    { name: '李四', sex:2 },\n    { name: '王五', sex:1 }\n  ];\nfunction test() {\n  // 条件：（简短形式）所有的用户都必须是女\n  const isAllGirl = users.every(item => item.sex === 1);\n  // 条件：至少一个用户是男的\n  const isAnyMan = users.some(item => item.sex === 2);\n}\n```\n### 使用正则表达式\n```js\nconst imgType ='jpg'\nif(imgType === 'jpg' || imgType === 'png' || imgType === 'gif'){\n    console.log('is image')\n}\n// 使用match匹配正则表达式\nif(imgType.match(/.*?(gif|png|jpg)/gi)){\n    console.log('is image')\n}\n```\n### 连接字符串\n```js\nlet name = 'Symbol'\nlet message = 'Hello,I\\'m' + name + 'take care '// 采用传统加号，看着很冗余,且容易出错\n// 艾玛，模板字符香，真想\nlet message = `Hello,I'm ${name} take care `\n```","source":"_posts/如何让你的代码更优雅.md","raw":"---\ntitle: 如何让你的代码更优雅\ntags: 优雅\ncategories: 前端\nabbrlink: 932a8af7\ndate: 2022-01-08 16:35:04\n---\n## 常量赋值\n### 引用数据类型\n包括接口中返回的数据，要做好兜底\n```js\nlet lastName = fullName[1] || ''\nlet propertyValue=Object.attr || 0\n```\n### 指明类型\n要按强类型风格写代码定义变量的时候要指明类型，并且在变量声明之后，不要随意的去更改变量的数据类型\n```js\n// 假设声明三个变量a,b,c\nlet a,b,c; // difference，定义变量时没有指明类型\nlet a = \"\", b = [], c = {}; // good\n```\n## 逻辑判断\n### `==`逻辑判断注意\n`==` 表示只要值相等即为真，`===` 要求不仅值相等，而且也要求类型相同\n使用== 有时候会达不到预期的结果，埋下隐患\n```js\n0  == ''          // true\n0  == '0'         // true\n'' == 0           // true\n'' == '0'         // false\nfalse == '0'        // true\nfalse == 'false'    // false\nfalse == undefined  // false\nfalse == null       // false\nnull == undefined   // true\ntrue == 1           // true\n```\n### 数据类型不确定\n如果变量的数据类型不确定，那咱就手动的转换一下，让它确定\n```js\nlet total = \"6\";\nif(parseInt(total) === 6){} // grace 手动转换一下数据类型\n```\n<!--more-->\n## 数组\n### 数组拷贝\n```js\nlet items=['1','2','3'];\nconst itemCopy = [...items]\n// joining arrays \nconst odd = [1, 3, 5 ]; \nconst nums = [2 ,4 , 6, ...odd]; \n```\n### 变量赋值\n```js\nconst Arr = [1, 2, 3, 4];\nconst [first, second] = Arr; \n```\n## 函数的命名\n 返回布尔值函数应以is/can/has等单词开头，能够让人更直观的了解到这个函数的功能；获取接口中的数据使用get开头进行命名,动作函数要以动词开头。\n```js\n// grace\nlet isSupport = () => {};\nlet canUpdate = () => {};\nlet geUserInfo = (user) => {}\nlet setUserInfo = (user) => {}\n```\n## 优先使用箭头函数\n```js\n// grace 是不是看着更简介优雅了\nlet findAge = (arr, age)=> arr.filter(num => num === age)\n```\n## 函数的入参\n函数的入参，是能够让使用者，在调用这个函数的时候，能够更加的清晰明了的把这个函数所需要的参数传递给函数，不容易出现，参数传递错误（参数的顺序颠倒等）一些低级，而又不好查找的问题\n```js\n// difference\n// true和false啥意思，没有个注释的话，看上去就是一脸懵逼\nfunction getImages(api, true, false); \n// grace\n// 一目了然，知道这些true和false是啥意思\nfunction getImages({\n    imageApi: api,\n    includePageBackground: true, \n    compress: false,\n})\n```\n## 接收参数\n如果函数的的参数是对象，也要优先使用解构赋值，上代码\n```js\n// 假设现在的场景是获取用户的信息上的现用名，和曾用名\n// difference\nfunction getFullName(user) {\n  const firstName = user.firstName;\n  const lastName = user.lastName;\n}\n\n// commonly\nfunction getFullName(obj) {\n  const { firstName, lastName } = obj;\n}\n\n// grace\nfunction getFullName({ firstName, lastName }) {\n}\n\n// grace 给它个默认值\nfunction getFullName({firstName, lastName = '无'}) {\n}\n \n// 觉得参数的名称太长，咱再来个重命名  解构时重命名简化命名\n// grace\nfunction getFullName ({firstName: first, lastName: last}) {\n \n}\n```\n## 参数效验\n更少的嵌套，不满足条件尽早 return，尽可能的减少嵌套，嵌套的层级越少，函数看着越简洁优雅\n```js\nfunction test(name, sex = 1) {\n  // 不满足条件尽早抛出错误\n  if (!name){ \n      throw new Error('没有传递name参数');\n  }\n}\n```\n## 函数的出参\n对象作为返回值，更便于以后添加返回值，以及更改返回值的顺序，相对于数组更加的灵活，更便于扩展\n```js\n// 函数返回多个值，推荐使用对象作为函数的返回值\n// commonly\nfunction processInput(input) {\n  return [left, right, top, bottom];\n}\n\n// grace\nfunction processInput(input) {\n  return { left, right, top, bottom };\n}\nconst { left, right } = processInput(input);\n```\n## 立即执行函数\n立即执行函数也推荐写成箭头函数的形式。首先是因为更简洁，并且也绑定好 this（箭头函数不会去改变this的指向）。\n```js\n(() => {\n  console.log('立即执行函数');\n})();\n```\n## 优先使用函数式编程\n```js\n// difference\nfor(i = 1; i <= 10; i++) {\n   a[i] = a[i] +1;\n}\n// grace\nlet b = a.map(item => ++item) //是不是更简洁了\n```\n## 函数中过多的采用if else\n```js\n// commonly\nif (a === 1) {\n    //...\n} else if (a ===2) {\n   // ...\n} else if (a === 3) {\n    //...\n} else {\n   //...\n}\n    \n// 一般\nswitch(a) {\n    case 1:\n        //....\n    case 2:\n        //....\n    case 3:\n        //....\n    default:\n    //....\n}\n\n// grace ===》》》 Object\nconst fruit = {\n    1: ['1', '11'],\n    2: ['2', '22'],\n    3: ['3', '33']\n };\nlet test = (a) => {\n  return fruit[a] || [];\n}\n\n// grace ===》》》 Map\nconst fruit = newMap()\n  .set('张三', ['张三丰', '张三力'])\n  .set('李四', ['李思维', '李素丽'])\nlet test = (a) => {\n\treturn fruit.get(a) || [];\n}\n\n// grace ===》》》filter\nconst fruits = [\n    { name: '张三', work: 'js' }, \n    { name: '李四', work: 'php' }, \n    { name: '王五', work: 'java' }, \n];\nlet test = (a) => {\n  return fruits.filter(item => item.name === a);\n}\n\n// grace===》》》策略模式\nlet handler = {\n    1: () => {\n        //....\n    },\n    2: () => {\n        //....\n    },\n    3: () => {\n        //....\n    },\n    default: () => {\n        //....\n    }\n}\nhandler[a]() || handler['default']()\n```\n## 温馨小提示\n一个函数完成一个独立的功能，不要一个函数混杂多个功能，在项目开发中有一条非常重要的原则【单一原则】所谓的单一原则就是，一个函数（文件），只做一件事情，在开发当中，没有那个项目是开发完成之后，就结束了。需要不断的更新，维护，那么单一原则，就是为了方便开发，和维护的，不要让一个函数“又当爹，又当妈”，这样代码的耦合性太高了，不好维护\n## 其他\n### 判断数组长度\n```js\n// difference\nif (arr.length !== 0) {\n    //...\n}\n\n// grace\nif (arr.length) {\n    //...\n}\n\n\n// difference\nif (arr.length === 0) {\n    //...\n}\n\n// grace\nif (!arr.length) {\n    //...\n}\n```\n### 逻辑运算符\n```js\nif (a === 1) {\n    b()\n}\n//可以写成\na === 1 && b()\n\nconst arr = [1,2,3];\nif(!arr.length){\n   b()\n }\n//可以写出\narr.length || b()\n\n// &&判断依赖的键是否存在，防止报错'xxx of undfined'\nlet user = {\n    name: 'Symbol卢',\n    age: 18,\n    children: {\n        name: '小Symbol卢'\n    }\n}\nlet childrenName = user.children && user.childre.name\n```\n### 三目运算符\n```js\n// difference\nconst a = '';\nlet b;\nif( a === '' ){\n    b = 'no'\n} else {\n    b = 'ok'\n}\n\nconst a = ''\nlet b = a ? 'no' : 'ok'; // 'ok'\n```\n### 函数定义\n```js\n/**\n * @description: 数据类型的检测的第二种方式\n * @param {any} data 要检测数据类型的变量\n * @return {string} type 返回具体的类型名称【小写】\n */\nexport const isTypeOf = (data) => {\n    return Object.prototype.toString.call(data).replace(/\\[object (\\w+)\\]/, '$1').toLowerCase()\n}\n```\n### 使用 Array.includes 来处理多重 || 条件\n```js\n// difference\nif (a === 1 || a === 2 || a === 3 || a === 4) {\n    //...\n}\n// grace\nlet arr = [1, 2, 3, 4]\nif (arr.includes(a)) {\n    //...\n}\n```\n### 使用 Array.every 和 Array.some 来处理全部/部分满足条件\n```js\n// grace\nconst users = [\n    { name: '张三', sex:1 },\n    { name: '李四', sex:2 },\n    { name: '王五', sex:1 }\n  ];\nfunction test() {\n  // 条件：（简短形式）所有的用户都必须是女\n  const isAllGirl = users.every(item => item.sex === 1);\n  // 条件：至少一个用户是男的\n  const isAnyMan = users.some(item => item.sex === 2);\n}\n```\n### 使用正则表达式\n```js\nconst imgType ='jpg'\nif(imgType === 'jpg' || imgType === 'png' || imgType === 'gif'){\n    console.log('is image')\n}\n// 使用match匹配正则表达式\nif(imgType.match(/.*?(gif|png|jpg)/gi)){\n    console.log('is image')\n}\n```\n### 连接字符串\n```js\nlet name = 'Symbol'\nlet message = 'Hello,I\\'m' + name + 'take care '// 采用传统加号，看着很冗余,且容易出错\n// 艾玛，模板字符香，真想\nlet message = `Hello,I'm ${name} take care `\n```","slug":"如何让你的代码更优雅","published":1,"updated":"2022-01-09T09:36:55.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyaf40s30008esl33lrj647i","content":"<h2 id=\"常量赋值\"><a href=\"#常量赋值\" class=\"headerlink\" title=\"常量赋值\"></a>常量赋值</h2><h3 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h3><p>包括接口中返回的数据，要做好兜底</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lastName = fullName[<span class=\"number\">1</span>] || <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> propertyValue=<span class=\"built_in\">Object</span>.attr || <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"指明类型\"><a href=\"#指明类型\" class=\"headerlink\" title=\"指明类型\"></a>指明类型</h3><p>要按强类型风格写代码定义变量的时候要指明类型，并且在变量声明之后，不要随意的去更改变量的数据类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设声明三个变量a,b,c</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a,b,c; <span class=\"comment\">// difference，定义变量时没有指明类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&quot;&quot;</span>, b = [], c = &#123;&#125;; <span class=\"comment\">// good</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"逻辑判断\"><a href=\"#逻辑判断\" class=\"headerlink\" title=\"逻辑判断\"></a>逻辑判断</h2><h3 id=\"逻辑判断注意\"><a href=\"#逻辑判断注意\" class=\"headerlink\" title=\"==逻辑判断注意\"></a><code>==</code>逻辑判断注意</h3><p><code>==</code> 表示只要值相等即为真，<code>===</code> 要求不仅值相等，而且也要求类型相同<br>使用== 有时候会达不到预期的结果，埋下隐患</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>  == <span class=\"string\">&#x27;&#x27;</span>          <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span>  == <span class=\"string\">&#x27;0&#x27;</span>         <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> == <span class=\"number\">0</span>           <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> == <span class=\"string\">&#x27;0&#x27;</span>         <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">&#x27;0&#x27;</span>        <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">&#x27;false&#x27;</span>    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"literal\">undefined</span>  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"literal\">null</span>       <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"number\">1</span>           <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数据类型不确定\"><a href=\"#数据类型不确定\" class=\"headerlink\" title=\"数据类型不确定\"></a>数据类型不确定</h3><p>如果变量的数据类型不确定，那咱就手动的转换一下，让它确定</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> total = <span class=\"string\">&quot;6&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">parseInt</span>(total) === <span class=\"number\">6</span>)&#123;&#125; <span class=\"comment\">// grace 手动转换一下数据类型</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h3 id=\"数组拷贝\"><a href=\"#数组拷贝\" class=\"headerlink\" title=\"数组拷贝\"></a>数组拷贝</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> items=[<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> itemCopy = [...items]</span><br><span class=\"line\"><span class=\"comment\">// joining arrays </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> odd = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span> ]; </span><br><span class=\"line\"><span class=\"keyword\">const</span> nums = [<span class=\"number\">2</span> ,<span class=\"number\">4</span> , <span class=\"number\">6</span>, ...odd]; </span><br></pre></td></tr></table></figure>\n<h3 id=\"变量赋值\"><a href=\"#变量赋值\" class=\"headerlink\" title=\"变量赋值\"></a>变量赋值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, second] = Arr; </span><br></pre></td></tr></table></figure>\n<h2 id=\"函数的命名\"><a href=\"#函数的命名\" class=\"headerlink\" title=\"函数的命名\"></a>函数的命名</h2><p> 返回布尔值函数应以is/can/has等单词开头，能够让人更直观的了解到这个函数的功能；获取接口中的数据使用get开头进行命名,动作函数要以动词开头。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isSupport = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> canUpdate = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> geUserInfo = <span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> setUserInfo = <span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"优先使用箭头函数\"><a href=\"#优先使用箭头函数\" class=\"headerlink\" title=\"优先使用箭头函数\"></a>优先使用箭头函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// grace 是不是看着更简介优雅了</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findAge = <span class=\"function\">(<span class=\"params\">arr, age</span>)=&gt;</span> arr.filter(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> num === age)</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数的入参\"><a href=\"#函数的入参\" class=\"headerlink\" title=\"函数的入参\"></a>函数的入参</h2><p>函数的入参，是能够让使用者，在调用这个函数的时候，能够更加的清晰明了的把这个函数所需要的参数传递给函数，不容易出现，参数传递错误（参数的顺序颠倒等）一些低级，而又不好查找的问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"comment\">// true和false啥意思，没有个注释的话，看上去就是一脸懵逼</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getImages</span>(<span class=\"params\">api, <span class=\"literal\">true</span>, <span class=\"literal\">false</span></span>)</span>; </span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"comment\">// 一目了然，知道这些true和false是啥意思</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getImages</span>(<span class=\"params\">&#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    imageApi: api,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    includePageBackground: <span class=\"literal\">true</span>, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    compress: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">&#125;</span>)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"接收参数\"><a href=\"#接收参数\" class=\"headerlink\" title=\"接收参数\"></a>接收参数</h2><p>如果函数的的参数是对象，也要优先使用解构赋值，上代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设现在的场景是获取用户的信息上的现用名，和曾用名</span></span><br><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> firstName = user.firstName;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> lastName = user.lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// commonly</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; firstName, lastName &#125; = obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace 给它个默认值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">&#123;firstName, lastName = <span class=\"string\">&#x27;无&#x27;</span>&#125;</span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 觉得参数的名称太长，咱再来个重命名  解构时重命名简化命名</span></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span> (<span class=\"params\">&#123;firstName: first, lastName: last&#125;</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数效验\"><a href=\"#参数效验\" class=\"headerlink\" title=\"参数效验\"></a>参数效验</h2><p>更少的嵌套，不满足条件尽早 return，尽可能的减少嵌套，嵌套的层级越少，函数看着越简洁优雅</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">name, sex = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 不满足条件尽早抛出错误</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!name)&#123; </span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;没有传递name参数&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数的出参\"><a href=\"#函数的出参\" class=\"headerlink\" title=\"函数的出参\"></a>函数的出参</h2><p>对象作为返回值，更便于以后添加返回值，以及更改返回值的顺序，相对于数组更加的灵活，更便于扩展</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数返回多个值，推荐使用对象作为函数的返回值</span></span><br><span class=\"line\"><span class=\"comment\">// commonly</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processInput</span>(<span class=\"params\">input</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [left, right, top, bottom];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processInput</span>(<span class=\"params\">input</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; left, right, top, bottom &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; left, right &#125; = processInput(input);</span><br></pre></td></tr></table></figure>\n<h2 id=\"立即执行函数\"><a href=\"#立即执行函数\" class=\"headerlink\" title=\"立即执行函数\"></a>立即执行函数</h2><p>立即执行函数也推荐写成箭头函数的形式。首先是因为更简洁，并且也绑定好 this（箭头函数不会去改变this的指向）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;立即执行函数&#x27;</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h2 id=\"优先使用函数式编程\"><a href=\"#优先使用函数式编程\" class=\"headerlink\" title=\"优先使用函数式编程\"></a>优先使用函数式编程</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">   a[i] = a[i] +<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> ++item) <span class=\"comment\">//是不是更简洁了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数中过多的采用if-else\"><a href=\"#函数中过多的采用if-else\" class=\"headerlink\" title=\"函数中过多的采用if else\"></a>函数中过多的采用if else</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// commonly</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a ===<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 一般</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span>(a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"comment\">//....</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace ===》》》 Object</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruit = &#123;</span><br><span class=\"line\">    <span class=\"number\">1</span>: [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;11&#x27;</span>],</span><br><span class=\"line\">    <span class=\"number\">2</span>: [<span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;22&#x27;</span>],</span><br><span class=\"line\">    <span class=\"number\">3</span>: [<span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;33&#x27;</span>]</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fruit[a] || [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace ===》》》 Map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruit = newMap()</span><br><span class=\"line\">  .set(<span class=\"string\">&#x27;张三&#x27;</span>, [<span class=\"string\">&#x27;张三丰&#x27;</span>, <span class=\"string\">&#x27;张三力&#x27;</span>])</span><br><span class=\"line\">  .set(<span class=\"string\">&#x27;李四&#x27;</span>, [<span class=\"string\">&#x27;李思维&#x27;</span>, <span class=\"string\">&#x27;李素丽&#x27;</span>])</span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fruit.get(a) || [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace ===》》》filter</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruits = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"attr\">work</span>: <span class=\"string\">&#x27;js&#x27;</span> &#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"attr\">work</span>: <span class=\"string\">&#x27;php&#x27;</span> &#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;王五&#x27;</span>, <span class=\"attr\">work</span>: <span class=\"string\">&#x27;java&#x27;</span> &#125;, </span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fruits.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.name === a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace===》》》策略模式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"number\">2</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"number\">3</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">handler[a]() || handler[<span class=\"string\">&#x27;default&#x27;</span>]()</span><br></pre></td></tr></table></figure>\n<h2 id=\"温馨小提示\"><a href=\"#温馨小提示\" class=\"headerlink\" title=\"温馨小提示\"></a>温馨小提示</h2><p>一个函数完成一个独立的功能，不要一个函数混杂多个功能，在项目开发中有一条非常重要的原则【单一原则】所谓的单一原则就是，一个函数（文件），只做一件事情，在开发当中，没有那个项目是开发完成之后，就结束了。需要不断的更新，维护，那么单一原则，就是为了方便开发，和维护的，不要让一个函数“又当爹，又当妈”，这样代码的耦合性太高了，不好维护</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"判断数组长度\"><a href=\"#判断数组长度\" class=\"headerlink\" title=\"判断数组长度\"></a>判断数组长度</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.length) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!arr.length) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (a === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    b()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可以写成</span></span><br><span class=\"line\">a === <span class=\"number\">1</span> &amp;&amp; b()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!arr.length)&#123;</span><br><span class=\"line\">   b()</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"comment\">//可以写出</span></span><br><span class=\"line\">arr.length || b()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &amp;&amp;判断依赖的键是否存在，防止报错&#x27;xxx of undfined&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Symbol卢&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小Symbol卢&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> childrenName = user.children &amp;&amp; user.childre.name</span><br></pre></td></tr></table></figure>\n<h3 id=\"三目运算符\"><a href=\"#三目运算符\" class=\"headerlink\" title=\"三目运算符\"></a>三目运算符</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b;</span><br><span class=\"line\"><span class=\"keyword\">if</span>( a === <span class=\"string\">&#x27;&#x27;</span> )&#123;</span><br><span class=\"line\">    b = <span class=\"string\">&#x27;no&#x27;</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    b = <span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a ? <span class=\"string\">&#x27;no&#x27;</span> : <span class=\"string\">&#x27;ok&#x27;</span>; <span class=\"comment\">// &#x27;ok&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 数据类型的检测的第二种方式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;any&#125;</span> </span>data 要检测数据类型的变量</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span> </span>type 返回具体的类型名称【小写】</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> isTypeOf = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(data).replace(<span class=\"regexp\">/\\[object (\\w+)\\]/</span>, <span class=\"string\">&#x27;$1&#x27;</span>).toLowerCase()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-Array-includes-来处理多重-条件\"><a href=\"#使用-Array-includes-来处理多重-条件\" class=\"headerlink\" title=\"使用 Array.includes 来处理多重 || 条件\"></a>使用 Array.includes 来处理多重 || 条件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a === <span class=\"number\">1</span> || a === <span class=\"number\">2</span> || a === <span class=\"number\">3</span> || a === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.includes(a)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-Array-every-和-Array-some-来处理全部-部分满足条件\"><a href=\"#使用-Array-every-和-Array-some-来处理全部-部分满足条件\" class=\"headerlink\" title=\"使用 Array.every 和 Array.some 来处理全部/部分满足条件\"></a>使用 Array.every 和 Array.some 来处理全部/部分满足条件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> users = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"attr\">sex</span>:<span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"attr\">sex</span>:<span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;王五&#x27;</span>, <span class=\"attr\">sex</span>:<span class=\"number\">1</span> &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 条件：（简短形式）所有的用户都必须是女</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isAllGirl = users.every(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.sex === <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 条件：至少一个用户是男的</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isAnyMan = users.some(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.sex === <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用正则表达式\"><a href=\"#使用正则表达式\" class=\"headerlink\" title=\"使用正则表达式\"></a>使用正则表达式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> imgType =<span class=\"string\">&#x27;jpg&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(imgType === <span class=\"string\">&#x27;jpg&#x27;</span> || imgType === <span class=\"string\">&#x27;png&#x27;</span> || imgType === <span class=\"string\">&#x27;gif&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;is image&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用match匹配正则表达式</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(imgType.match(<span class=\"regexp\">/.*?(gif|png|jpg)/gi</span>))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;is image&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接字符串\"><a href=\"#连接字符串\" class=\"headerlink\" title=\"连接字符串\"></a>连接字符串</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;Symbol&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">&#x27;Hello,I\\&#x27;m&#x27;</span> + name + <span class=\"string\">&#x27;take care &#x27;</span><span class=\"comment\">// 采用传统加号，看着很冗余,且容易出错</span></span><br><span class=\"line\"><span class=\"comment\">// 艾玛，模板字符香，真想</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">`Hello,I&#x27;m <span class=\"subst\">$&#123;name&#125;</span> take care `</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"常量赋值\"><a href=\"#常量赋值\" class=\"headerlink\" title=\"常量赋值\"></a>常量赋值</h2><h3 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h3><p>包括接口中返回的数据，要做好兜底</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lastName = fullName[<span class=\"number\">1</span>] || <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> propertyValue=<span class=\"built_in\">Object</span>.attr || <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"指明类型\"><a href=\"#指明类型\" class=\"headerlink\" title=\"指明类型\"></a>指明类型</h3><p>要按强类型风格写代码定义变量的时候要指明类型，并且在变量声明之后，不要随意的去更改变量的数据类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设声明三个变量a,b,c</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a,b,c; <span class=\"comment\">// difference，定义变量时没有指明类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&quot;&quot;</span>, b = [], c = &#123;&#125;; <span class=\"comment\">// good</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"逻辑判断\"><a href=\"#逻辑判断\" class=\"headerlink\" title=\"逻辑判断\"></a>逻辑判断</h2><h3 id=\"逻辑判断注意\"><a href=\"#逻辑判断注意\" class=\"headerlink\" title=\"==逻辑判断注意\"></a><code>==</code>逻辑判断注意</h3><p><code>==</code> 表示只要值相等即为真，<code>===</code> 要求不仅值相等，而且也要求类型相同<br>使用== 有时候会达不到预期的结果，埋下隐患</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>  == <span class=\"string\">&#x27;&#x27;</span>          <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span>  == <span class=\"string\">&#x27;0&#x27;</span>         <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> == <span class=\"number\">0</span>           <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> == <span class=\"string\">&#x27;0&#x27;</span>         <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">&#x27;0&#x27;</span>        <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">&#x27;false&#x27;</span>    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"literal\">undefined</span>  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"literal\">null</span>       <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"number\">1</span>           <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数据类型不确定\"><a href=\"#数据类型不确定\" class=\"headerlink\" title=\"数据类型不确定\"></a>数据类型不确定</h3><p>如果变量的数据类型不确定，那咱就手动的转换一下，让它确定</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> total = <span class=\"string\">&quot;6&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">parseInt</span>(total) === <span class=\"number\">6</span>)&#123;&#125; <span class=\"comment\">// grace 手动转换一下数据类型</span></span><br></pre></td></tr></table></figure>","more":"<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h3 id=\"数组拷贝\"><a href=\"#数组拷贝\" class=\"headerlink\" title=\"数组拷贝\"></a>数组拷贝</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> items=[<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> itemCopy = [...items]</span><br><span class=\"line\"><span class=\"comment\">// joining arrays </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> odd = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span> ]; </span><br><span class=\"line\"><span class=\"keyword\">const</span> nums = [<span class=\"number\">2</span> ,<span class=\"number\">4</span> , <span class=\"number\">6</span>, ...odd]; </span><br></pre></td></tr></table></figure>\n<h3 id=\"变量赋值\"><a href=\"#变量赋值\" class=\"headerlink\" title=\"变量赋值\"></a>变量赋值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, second] = Arr; </span><br></pre></td></tr></table></figure>\n<h2 id=\"函数的命名\"><a href=\"#函数的命名\" class=\"headerlink\" title=\"函数的命名\"></a>函数的命名</h2><p> 返回布尔值函数应以is/can/has等单词开头，能够让人更直观的了解到这个函数的功能；获取接口中的数据使用get开头进行命名,动作函数要以动词开头。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isSupport = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> canUpdate = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> geUserInfo = <span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> setUserInfo = <span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"优先使用箭头函数\"><a href=\"#优先使用箭头函数\" class=\"headerlink\" title=\"优先使用箭头函数\"></a>优先使用箭头函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// grace 是不是看着更简介优雅了</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findAge = <span class=\"function\">(<span class=\"params\">arr, age</span>)=&gt;</span> arr.filter(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> num === age)</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数的入参\"><a href=\"#函数的入参\" class=\"headerlink\" title=\"函数的入参\"></a>函数的入参</h2><p>函数的入参，是能够让使用者，在调用这个函数的时候，能够更加的清晰明了的把这个函数所需要的参数传递给函数，不容易出现，参数传递错误（参数的顺序颠倒等）一些低级，而又不好查找的问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"comment\">// true和false啥意思，没有个注释的话，看上去就是一脸懵逼</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getImages</span>(<span class=\"params\">api, <span class=\"literal\">true</span>, <span class=\"literal\">false</span></span>)</span>; </span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"comment\">// 一目了然，知道这些true和false是啥意思</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getImages</span>(<span class=\"params\">&#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    imageApi: api,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    includePageBackground: <span class=\"literal\">true</span>, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    compress: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">&#125;</span>)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"接收参数\"><a href=\"#接收参数\" class=\"headerlink\" title=\"接收参数\"></a>接收参数</h2><p>如果函数的的参数是对象，也要优先使用解构赋值，上代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设现在的场景是获取用户的信息上的现用名，和曾用名</span></span><br><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> firstName = user.firstName;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> lastName = user.lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// commonly</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; firstName, lastName &#125; = obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace 给它个默认值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">&#123;firstName, lastName = <span class=\"string\">&#x27;无&#x27;</span>&#125;</span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 觉得参数的名称太长，咱再来个重命名  解构时重命名简化命名</span></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span> (<span class=\"params\">&#123;firstName: first, lastName: last&#125;</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数效验\"><a href=\"#参数效验\" class=\"headerlink\" title=\"参数效验\"></a>参数效验</h2><p>更少的嵌套，不满足条件尽早 return，尽可能的减少嵌套，嵌套的层级越少，函数看着越简洁优雅</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">name, sex = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 不满足条件尽早抛出错误</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!name)&#123; </span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;没有传递name参数&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数的出参\"><a href=\"#函数的出参\" class=\"headerlink\" title=\"函数的出参\"></a>函数的出参</h2><p>对象作为返回值，更便于以后添加返回值，以及更改返回值的顺序，相对于数组更加的灵活，更便于扩展</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数返回多个值，推荐使用对象作为函数的返回值</span></span><br><span class=\"line\"><span class=\"comment\">// commonly</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processInput</span>(<span class=\"params\">input</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [left, right, top, bottom];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processInput</span>(<span class=\"params\">input</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; left, right, top, bottom &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; left, right &#125; = processInput(input);</span><br></pre></td></tr></table></figure>\n<h2 id=\"立即执行函数\"><a href=\"#立即执行函数\" class=\"headerlink\" title=\"立即执行函数\"></a>立即执行函数</h2><p>立即执行函数也推荐写成箭头函数的形式。首先是因为更简洁，并且也绑定好 this（箭头函数不会去改变this的指向）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;立即执行函数&#x27;</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h2 id=\"优先使用函数式编程\"><a href=\"#优先使用函数式编程\" class=\"headerlink\" title=\"优先使用函数式编程\"></a>优先使用函数式编程</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">   a[i] = a[i] +<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> ++item) <span class=\"comment\">//是不是更简洁了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数中过多的采用if-else\"><a href=\"#函数中过多的采用if-else\" class=\"headerlink\" title=\"函数中过多的采用if else\"></a>函数中过多的采用if else</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// commonly</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a ===<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 一般</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span>(a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"comment\">//....</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace ===》》》 Object</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruit = &#123;</span><br><span class=\"line\">    <span class=\"number\">1</span>: [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;11&#x27;</span>],</span><br><span class=\"line\">    <span class=\"number\">2</span>: [<span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;22&#x27;</span>],</span><br><span class=\"line\">    <span class=\"number\">3</span>: [<span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;33&#x27;</span>]</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fruit[a] || [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace ===》》》 Map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruit = newMap()</span><br><span class=\"line\">  .set(<span class=\"string\">&#x27;张三&#x27;</span>, [<span class=\"string\">&#x27;张三丰&#x27;</span>, <span class=\"string\">&#x27;张三力&#x27;</span>])</span><br><span class=\"line\">  .set(<span class=\"string\">&#x27;李四&#x27;</span>, [<span class=\"string\">&#x27;李思维&#x27;</span>, <span class=\"string\">&#x27;李素丽&#x27;</span>])</span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fruit.get(a) || [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace ===》》》filter</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruits = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"attr\">work</span>: <span class=\"string\">&#x27;js&#x27;</span> &#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"attr\">work</span>: <span class=\"string\">&#x27;php&#x27;</span> &#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;王五&#x27;</span>, <span class=\"attr\">work</span>: <span class=\"string\">&#x27;java&#x27;</span> &#125;, </span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fruits.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.name === a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace===》》》策略模式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"number\">2</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"number\">3</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">handler[a]() || handler[<span class=\"string\">&#x27;default&#x27;</span>]()</span><br></pre></td></tr></table></figure>\n<h2 id=\"温馨小提示\"><a href=\"#温馨小提示\" class=\"headerlink\" title=\"温馨小提示\"></a>温馨小提示</h2><p>一个函数完成一个独立的功能，不要一个函数混杂多个功能，在项目开发中有一条非常重要的原则【单一原则】所谓的单一原则就是，一个函数（文件），只做一件事情，在开发当中，没有那个项目是开发完成之后，就结束了。需要不断的更新，维护，那么单一原则，就是为了方便开发，和维护的，不要让一个函数“又当爹，又当妈”，这样代码的耦合性太高了，不好维护</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"判断数组长度\"><a href=\"#判断数组长度\" class=\"headerlink\" title=\"判断数组长度\"></a>判断数组长度</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.length) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!arr.length) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (a === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    b()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可以写成</span></span><br><span class=\"line\">a === <span class=\"number\">1</span> &amp;&amp; b()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!arr.length)&#123;</span><br><span class=\"line\">   b()</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"comment\">//可以写出</span></span><br><span class=\"line\">arr.length || b()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &amp;&amp;判断依赖的键是否存在，防止报错&#x27;xxx of undfined&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Symbol卢&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小Symbol卢&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> childrenName = user.children &amp;&amp; user.childre.name</span><br></pre></td></tr></table></figure>\n<h3 id=\"三目运算符\"><a href=\"#三目运算符\" class=\"headerlink\" title=\"三目运算符\"></a>三目运算符</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b;</span><br><span class=\"line\"><span class=\"keyword\">if</span>( a === <span class=\"string\">&#x27;&#x27;</span> )&#123;</span><br><span class=\"line\">    b = <span class=\"string\">&#x27;no&#x27;</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    b = <span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a ? <span class=\"string\">&#x27;no&#x27;</span> : <span class=\"string\">&#x27;ok&#x27;</span>; <span class=\"comment\">// &#x27;ok&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 数据类型的检测的第二种方式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;any&#125;</span> </span>data 要检测数据类型的变量</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span> </span>type 返回具体的类型名称【小写】</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> isTypeOf = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(data).replace(<span class=\"regexp\">/\\[object (\\w+)\\]/</span>, <span class=\"string\">&#x27;$1&#x27;</span>).toLowerCase()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-Array-includes-来处理多重-条件\"><a href=\"#使用-Array-includes-来处理多重-条件\" class=\"headerlink\" title=\"使用 Array.includes 来处理多重 || 条件\"></a>使用 Array.includes 来处理多重 || 条件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a === <span class=\"number\">1</span> || a === <span class=\"number\">2</span> || a === <span class=\"number\">3</span> || a === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.includes(a)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-Array-every-和-Array-some-来处理全部-部分满足条件\"><a href=\"#使用-Array-every-和-Array-some-来处理全部-部分满足条件\" class=\"headerlink\" title=\"使用 Array.every 和 Array.some 来处理全部/部分满足条件\"></a>使用 Array.every 和 Array.some 来处理全部/部分满足条件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> users = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"attr\">sex</span>:<span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"attr\">sex</span>:<span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;王五&#x27;</span>, <span class=\"attr\">sex</span>:<span class=\"number\">1</span> &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 条件：（简短形式）所有的用户都必须是女</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isAllGirl = users.every(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.sex === <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 条件：至少一个用户是男的</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isAnyMan = users.some(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.sex === <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用正则表达式\"><a href=\"#使用正则表达式\" class=\"headerlink\" title=\"使用正则表达式\"></a>使用正则表达式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> imgType =<span class=\"string\">&#x27;jpg&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(imgType === <span class=\"string\">&#x27;jpg&#x27;</span> || imgType === <span class=\"string\">&#x27;png&#x27;</span> || imgType === <span class=\"string\">&#x27;gif&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;is image&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用match匹配正则表达式</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(imgType.match(<span class=\"regexp\">/.*?(gif|png|jpg)/gi</span>))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;is image&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接字符串\"><a href=\"#连接字符串\" class=\"headerlink\" title=\"连接字符串\"></a>连接字符串</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;Symbol&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">&#x27;Hello,I\\&#x27;m&#x27;</span> + name + <span class=\"string\">&#x27;take care &#x27;</span><span class=\"comment\">// 采用传统加号，看着很冗余,且容易出错</span></span><br><span class=\"line\"><span class=\"comment\">// 艾玛，模板字符香，真想</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">`Hello,I&#x27;m <span class=\"subst\">$&#123;name&#125;</span> take care `</span></span><br></pre></td></tr></table></figure>"},{"title":"如何优雅的使用ES6","abbrlink":"e38dcee3","date":"2022-01-11T00:58:45.000Z","_content":"## 解构赋值\n### 解构的默认值\nundefined不支持，null相当于有值，但值为null\n```js\nlet [foo = true] = [];\nconsole.log('log',foo)\nlet [a,b=\"i100\"]=['百里']\nconsole.log(a+b); //控制台显示“百里i100”\n```\n> 注意：对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\n<!--more-->\n### 圆括号的使用\n在解构之前定义了变量在解构会报错，解决方法是在整体的外边加一个括号\n```js\nlet foo;\n({foo} = {foo: 'i100'});\nconsole.log('log',foo);\n```\n### 字符串解构\n```js\nconst [a,b,c,d] = 'test'\nconsole.log('log',a,b,c,d) // t,e,s,t\n```\n## 扩展与rest运算符\n### 对象扩展运算符\n编写一个方法，允许入参是不确定的\n```js\nfunction i100 (...arg) {\n  console.log('log',arg[0],arg[1])\n}\ni100(1,2,3)\n```\n### 扩展运算符用处\n声明2个数组arr1，arr2，把arr1赋值给arr2，然后改变arr2的值发现arr1的值也变了，这是对内存堆栈的引用，不是真正的赋值\n```js\nlet arr1 = ['www','i100','xyz'];\nlet arr2 = arr1;\nconsole.log('log',arr2)\narr2.push('add')\nconsole.log('i100',arr1)\n```\n> 我们可以利用扩展运算符\n```js\nlet arr2 = [...arr1]\n```\n### rest运算符\n与对象扩展运算符有相似之处\n```js\nfunction i100(first,...rest) {\n  console.log('i100',resr.length)\n}\ni100(0,1,2,3)\n```\n## 模板字符串\n### 简单使用\n```js\nlet i100 = '百里';\nlet blog = `这是${i100}的博客`\n```\n### 对运算的支持\n```js\nlet a=1;\nlet b=2;\nlet sum = `${a+b}`\n```\n### 字符串查询\n- 查询全部\n```js\nlet res = blog.includes(i100)\n```\n- 查询开头\n```js\nlet res = blog.startsWith(i100)\n```\n- 查询结尾\n```js\nlet res = blog.endsWith(i100)\n```\n## 新增数组知识\n### JSON格式转换\n特殊的json格式都可以轻松使用ES6的语法转变成数组\n```js\nlet json = {\n  '0': 'i100',\n  '1': '百里',\n  '2': '博客',\n  length: 3\n}\nlet arr = Array.from(json)\nconsole.log('i100',arr)\n```\n### Array.of()方法\n它负责把一堆文本或者变量转换成数组。\n```js\nlet arr = Array.of(1,2,3,4)\nconsole.log('i100',arr)\n```\n### find()实例方法\nfind方法是从数组中查找。在find方法中我们需要传入一个匿名函数，函数需要传入三个参数：\n- value：表示当前查找的值。\n- index：表示当前查找的数组索引。\n- arr：表示当前数组。\n在函数中如果找到符合条件的数组元素就进行return，并停止查找。\n```js\nlet arr = [1,2,3,4,5];\nlet res = arr.find(function(value, index, arr) { \n  return value > 2;\n})\n```\n### fill()实例方法\nfill()也是一个实例方法，它的作用是把数组进行填充，它接收三个参数，第一个参数是填充的变量，第二个是开始填充的位置，第三个是填充到的位置。\n```js\nlet arr = [1,2,3,4,5];\narr.fill('i100',2,3)\n// 上边的代码是把数组从第二位到第三位用i100进行填充。\n```\n### 数组的遍历\n- for...of循环\n这种形式比ES5的for循环要简单而且高效。先来看一个最简单的for…of循环\n```js\nlet arr = ['i100','百里','博客'];\nfor (let item of arr) {\n  console.log('i100',item);\n}\n```\nfor…of数组索引:有时候开发中是需要数组的索引的，那我们可以使用下面的代码输出数组索引\n```js\nlet arr = ['i100','百里','博客'];\nfor (let index of arr.keys()) {\n  console.log('i100',index);\n}\n```\n同时输出数组的内容和索引：我们用entries()这个实例方法，配合我们的for…of循环就可以同时输出内容和索引了。\n```js\nlet arr = ['i100','百里','博客'];\nfor (let [index,val] of arr.entries()) {\n  console.log('i100',index+':'+val)\n}\n```\n### entries实例方法\nentries()实例方式生成的是Iterator形式的数组，那这种形式的好处就是可以让我们在需要时用next()手动跳转到下一个值。\n```js\nlet arr = ['i100','百里','博客'];\nlet list = arr.entries();\nconsole.log('i100-1',list.next().value);\nconsole.log('i100-2',list.next().value);\nconsole.log('i100-3',list.next().value);\n```\n## 箭头函数和扩展\n### 默认值\n```js\nfunction add(a,b=1) {\n  return a+b;\n}\n\nconsole.log('i100',add(1));\n```\n### 主动抛出错误\n```js\nfunction add(a,b=1) {\n  if(a==0) {\n    throw new Error('This is error')\n  }\n  return a+b;\n}\nconsole.log('i100',add(0))\n```\n### 箭头函数\n箭头函数中不可加new，也就是说箭头函数不能当构造函数进行使用\n```js\nlet add = (a,b=1) => {\n  return a+b;\n}\n  console.log('i100',add(1))\n```\n## 函数与数组的补漏\n### 对象的函数解构\n```js\nlet json = {\n  a: 'i100',\n  b: '百里',\n  c: '博客'\n}\nfunction fun({a,b='test'}) {\n  console.log('i100',a,b)\n}\nfun(json)\n```\n## 数组函数解构\n声明一个数组，然后写一个方法，最后用…进行解构赋值。\n```js\nlet arr = ['i100','百里','博客'];\nfunction fun(a,b,c) {\n  console.log('i100',a,b,c)\n}\nfun(...arr)\n```\n### `in`的用法\n> in是用来判断对象或者数组中是否存在某个值的\n- 对象判断\n```js\nlet obj = {\n  a: 'i100',\n  b: '百里',\n  c: '博客'\n}\nconsole.log('i100' in obj); // true\n```\n- 数组判断\n先来看一下ES5判断的弊端，以前会使用length属性进行判断，为0表示没有数组元素。但是这并不准确，或者说真实开发中有弊端。\n```js\nlet arr = [,,,,,];\nconsole.log('i100',arr.length); // 5\n```\n上边的代码输出了5，但是数组中其实全是空值，这就是一个坑啊。那用ES6的in就可以解决这个问题。\n```js\nlet arr = [,,,,,];\nconsole.log('i100',0 in arr); // false\nlet arr1 = ['i100','百里','博客'];\nconsole.log('i100',0 in arr1) // true\n```\n> 这里的0指的是数组下标位置是否为空。\n### 数组遍历用法\n- `forEach`\n```js\nlet arr = ['i100','百里',,'博客'];\narr.forEach((val,index)=>console.log('i100',index,val))\n```\n> forEach循环的特点是会自动省略为空的数组元素，相当于直接给我们筛空了。当是有时候也会给我们帮倒忙。\n- `filter`\n```js\nlet arr = ['i100','百里','博客'];\narr.filter(x=>console.log(x));\n```\n- `some`\n```js\nlet arr = ['i100','百里','博客'];\narr.some(x=>console.log(x));\n```\n- `map`\n```js\nlet arr = ['i100','百里','博客'];\nconsole.log('i100',arr.map(x=>'wb'));\n```\n> map在这里起到一个替换的作用\n\n数组转换字符串 在开发中我们经常会碰到把数组输出成字符串的形式，我们今天学两种方法，你要注意两种方法的区别\n- `join`\n```js\nlet arr = ['i100','百里','博客'];\nconsole.log('i100',arr.join('|'))\n```\n> join()方法就是在数组元素中间，加了一些间隔，开发中很有用处\n- `toString`\n```js\nlet arr = ['i100','百里','博客'];\nconsole.log('i100',arr.toString());\n```\n> 转换时只是是用逗号隔开了。\n## ES6对象\n对象对于Javascript是非常重要的。在ES6中对象有了很多新特性。\n###对象赋值\n> ES6允许把声明的变量直接赋值给对象\n```js\nlet name = 'i100';\nlet skill = 'web';\nlet obj = {name,skill}\nconsole.log('i100',obj);\n```\n## 对象Key值构建\n有时候我们会在后台取出key值，而不是我们前台定义好的，这时候我们如何构建我们的key值那。比如我们在后台取了一个key值，然后可以用[ ] 的形式，进行对象的构建。\n```js\nlet key = 'skill';\nlet obj = {\n  [key]: 'web'\n}\nconsole.log('i100',obj.skill);\n```\n### 自定义对象方法\n- 对象方法就是把兑现中的属性，用匿名函数的形式编程方法\n```js\nlet obj = {\n  add: function(a,b) {\n    return a + b;\n  }\n}\nconsole.log('i100',obj.add(1,2));\n```\n- `Object.is()`对象比较\n对象的比较方法,以前进行对象值的比较，经常使用===来判断，比如下面的代码：\n```js\nlet obj1 = {name:'lisi'};\nlet obj2 = {name:'xiaoming'};\nlet res = Object.is(obj1,obj2);\nconsole.log('i100',res);\n```\n- `Object.assign()`合并对象\n```js\nlet a={a:'a'}\nlet b={b:'b'}\nlet c={c:'c'}\nlet d=Object.assign(a,b,c);\nconsole.log('i100',d);\n```\n## Symbol在对象的作用\n### 声明Symbol\n```js\nlet g = Symbol('i100');\nconsole.log('i100',g);\nconsole.log('i100',g.toString());\n```\n> 这时候我们仔细看控制台是有区别的，没有toString的是红字，toString的是黑字。\n### Symbol在对象中的应用\n```js\nlet i100 = Symbol();\nlet obj = {\n  [i100]: '百里'\n}\nconsole.log('i100',obj[i100]);\nobj[i100]='web';\nconsole.log('i100',obj[i100]);\n```\n### Symbol对象元素的保护作用\n>在对象中有很多值，但是循环输出时，并不希望全部输出，那我们就可以使用Symbol进行保护。\n\n- 没有进行保护的写法：\n```js\nlet obj = {\n  a: 'i100',\n  b: '百里',\n  c: '博客'\n};\nfor(let item in obj) {\n  console.log('i100',obj[item]);\n}\n```\n现在我不想别人知道我的年龄，这时候我就可以使用Symbol来进行循环保护。\n```js\nlet obj = {\n  a: 'i100',\n  b: '百里',\n};\nlet age = Symbol();\nobj[age] = 18;\nfor(let item in obj) {\n  console.log('i100',obj[item]);\n}\nconsole.log('i100',obj);\n```\n## Set数据结构\n> Set数据结构，注意这里不是数据类型，而是数据结构。它是ES6中新的东西，并且很有用处。Set的数据结构是以数组的形式构建的。\n### Set声明\n```js\nlet setArr = new Set(['i100','百里','博客']);\nconsole.log('i100',setArr); // Set(3) {'i100', '百里', '博客'}\n```\n> Set和Array 的区别是Set不允许内部有重复的值，如果有只显示一个，相当于去重。虽然Set很像数组，但是他不是数组。\n### Set值的增删查\n- 追加add\n在使用Array的时候，可以用push进行追加值，那Set稍有不同，它用更语义化的add进行追加\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.add('前端');\nconsole.log('i100',setArr);\n```\n- 删除delete\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.delete('前端');\nconsole.log('i100',setArr);\n```\n- 查找has\n用has进行值的查找，返回的是true或者false。\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.has('i100');\n```\n- 删除clear\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.clear();\nconsole.log('i100',setArr);\n```\n- set的for...of循环\n```js\nlet setArr = new Set(['i100','百里','博客']);\nfor(let item of setArr) {\n  console.log('i100',item);\n}\n```\n- size属性\nsize属性可以获取Set值的数量\n```js\nlet setArr = new Set(['i100','百里','博客']);\nconsole.log('i100',setArr.size);\n```\n- forEach循环\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.forEach((value)=>console.log(value));\n```\n## Map数据结构\n在一些构建工具中是非常喜欢使用map这种数据结构来进行配置的，因为map是一种灵活，简单的适合一对一查找的数据结构。\n```js\nlet obj = {\n  a: 'i100',\n  b: '百里',\n  c: '博客'\n};\nconsole.log('i100',obj.c);\nlet map = new Map();\n// 设置value\nmap.set(obj,'test');\n// 设置key\nmap.set('test',obj);\nconsole.log('i100',map);\n```\n### 取值get\n```js\nlet res = map.get(obj);\nconsole.log('i100',res);\n```\n### 删除delete\n删除delete指定值：\n```js\nmap.delete(obj)\n```\n### size属性\n```js\nmap.size\n```\n### 查找has\n```js\nmap.has('i100');\n```\n### 清除clear\n```js\nmap.clear()\n```\n总结：map在现在开发中已经经常使用，它的灵活性和高效性是我们喜欢的。开发中试着去使用map吧，你一定会喜欢上它的。\n## 用Proxy进行预处理\n>钩子函数：当我们在操作一个对象或者方法时会有几种动作，比如：在运行函数前初始化一些数据，在改变对象值后做一些善后处理。这些都算钩子函数，Proxy的存在就可以让我们给函数加上这样的钩子函数，你也可以理解为在执行方法前预处理一些代码。你可以简单的理解为他是函数或者对象的生命周期。 Proxy的应用可以使函数更加强大，业务逻辑更加清楚，而且在编写自己的框架或者通用组件时非常好用\n\n回顾定义对象方法\n```js\nvar obj={\n    add:function(val){\n        return val+10;\n    },\n    name:'I am Jspang'\n\n};\nconsole.log(obj.add(100));\nconsole.log(obj.name);\n```\n### 声明Proxy\n用new的方法对Proxy进行声明。可以看一下声明Proxy的基本形式。\n```js\nnew Proxy({},{});\n```\n> 需要注意的是这里是两个花括号，第一个花括号就相当于我们方法的主体，后边的花括号就是Proxy代理处理区域，相当于我们写钩子函数的地方。\n\n现在把上边的obj对象改成我们的Proxy形式。\n```js\nlet pro = new Proxy({\n  add: function(val) {\n    return val + 10;\n  },\n  name: 'I am i100'\n},{\n  get:function(target, key, property) {\n    console.log('come in Get',target, key, property);\n    return target[key];\n  }\n})\nconsole.log('i100',pro.name);\n```\n>可以在控制台看到结果，先输出了come in Get。相当于在方法调用前的钩子函数\n### get属性\nget属性是在你得到某对象属性值时预处理的方法，他接受三个参数\n- target：得到的目标值\n- key：目标的key值，相当于对象的属性\n- property：这个不太常用，用法还在研究中。\n### set属性\nset属性是值你要改变Proxy属性值时，进行的预先处理。它接收四个参数。\n- target:目标值。\n- key：目标的Key值。\n- value：要改变的值。\n- receiver：改变前的原始值。\n```js\nlet pro = new Proxy({\n  add: function(val) {\n    return val + 10;\n  },\n  name: 'I am i100'\n},{\n  get:function(target, key, property) {\n    console.log('come in Get',target, key, property);\n    return target[key];\n  },\n  set:function(target, key, value, receiver) {\n    console.log('i100-set',key,value);\n    return target[key] = value;\n  }\n})\nconsole.log('i100',pro.name);\npro.name = '李四';\nconsole.log('i100',pro.name);\n```\n### apple的使用\napply的作用是调用内部的方法，它使用在方法体是一个匿名函数时。\n```js\nvar twice = {\n  //目标对象，目标对象的上下文对象，目标对象的参数数组\n  apply:function (target,ctx,args) {\n    console.log(\"ctx\",ctx,\"args\",args);\n    return Reflect.apply(...arguments)*2;\n  }\n};\nfunction sum (left,right) {\n  return left*right;\n};\nvar proxy = new Proxy(sum,twice);\nconsole.log(\"proxy1\",proxy(1,2));\nconsole.log(\"proxy.call\",proxy.call(null,5,6));\nconsole.log(\"proxy,apply\",proxy.apply(null,[7,8]));\nconsole.log(\"proxy,apply\",Reflect.apply(proxy,null,[7,8]));\n```\n## promise对象的使用\n>ES6中的promise的出现给我们很好的解决了回调地狱的问题，在使用ES5的时候，在多层嵌套回调时，写完的代码层次过多，很难进行维护和二次开发，ES6认识到了这点问题，现在promise的使用，完美解决了这个问题。\n\n### promise基本用法\n模拟一个多步骤多过程，如在家吃饭需要三个步骤。\n- 开始做饭\n- 坐下来吃饭\n- 🤕️洗碗\n这个过程是有执行顺序多，确保上一步完成，才能继续下一步操作\n```js\nlet state = 1;\nfunction step1(resolve,reject) {\n    console.log('1.开始做饭');\n    if(state) {\n        resolve('做饭完成');\n    }else{\n        reject('做饭出错了');\n    }\n}\nfunction step2(resolve,reject) {\n    console.log('2.开始吃饭');\n    if(state) {\n        resolve('吃饭完成')\n    }else {\n        reject('吃饭出错')\n    }\n}\nfunction step3(resolve,reject) {\n    console.log('3.开始洗碗');\n    if(state) {\n        resolve('洗碗完成')\n    }else {\n        reject('洗碗出错')\n    }\n}\nnew Promise(step1).then(function (val) { \n    console.log(val);\n    return new Promise(step2)\n}).then(function (val) { \n    console.log(val);\n    return new Promise(step3)\n}).then(function (val) {\n    console.log(val);\n    return val;\n})\n```\n## class类的使用\n>在ES5中经常使用方法或者对象去模拟类的使用，虽然可以实现功能，但是代码并不优雅，ES6为我们提供了类的使用。需要注意的是我们在写类的时候和ES5中的对象和构造函数要区分开来，不要学混了。\n### 类的声明\n```js\nclass coder {\n    name(val) {\n        console.log('i100',val);\n    }\n}\n```\n### 类的使用\n```js\nclass Coder{\n    name(val) {\n        console.log('i100',val);\n    }\n    skill(val) {\n        let res = this.name + val;\n        console.log('skill',res);\n    }\n}\nlet i100 = new Coder();\ni100.name('百里');\ni100.skill('web');\n```\n这里需要注意的是两个方法中间不要写逗号了，还有这里的this指类本身，还有要注意return 的用法。\n### 类的传参\n在类的参数传递中我们用constructor( )进行传参。传递参数后可以直接使用this.xxx进行调用。\n```js\nclass Coder{\n    name(val) {\n        console.log('i100',val);\n    }\n    skill(val) {\n        let res = this.name + val;\n        console.log('skill',res);\n    }\n    constructor(a,b) {\n        this.a = b;\n        this.b = b;\n    }\n    add() {\n        return this.a + this.b;\n    }\n}\nlet i100 = new Coder(1,2);\nconsole.log('i100',i100);\n```\n用constructor来约定了传递参数，然后用作了一个add方法，把参数相加。\n### class的继承\n```js\nclass htmler extends Coder {\n    \n}\nlet i100 = new htmler();\ni100.name('百里')\n```\n声明一个htmler的新类并继承Coder类，htmler新类里边为空，这时候我们实例化新类，并调用里边的name方法。结果也是可以调用到的。\n## 模块化操作\n在ES5中我们要进行模块华操作需要引入第三方类库，随着前后端分离，前端的业务日渐复杂，ES6为我们增加了模块话操作。模块化操作主要包括两个方面。\n- export :负责进行模块化，也是模块的输出。\n- import : 负责把模块引，也是模块的引入操作。\n### export的用法\nexport可以让我们把变量，函数，对象进行模块话，提供外部调用接口，让外部进行引用。先来看个最简单的例子，把一个变量模块化。\n新建一个temp.js文件，然后在文件中输出一个模块变量\n```js\nexport let i00 = '百里';\n```\n然后可以在index.js中以import的形式引入。\n```js\nimport {i100} from './temp.js';\nconsole.log('i100',i100);\n```\n这就是一个最简单的模块的输出和引入。\n### as用法\n有些时候我们并不想暴露模块里边的变量名称，而给模块起一个更语义话的名称，这时候我们就可以使用as来操作。\n\n```js\nlet a = 'i100', b = '百里', c = 'web';\nexport {\n    x as a,\n    y as b,\n    z as c\n}\n```\n### export default的使用\n加上default相当是一个默认的入口。在一个文件里export default只能有一个。我们来对比一下export和export default的区别\n#### export\n```js\nexport let i100 = '百里';\nexport function add(a,b) {\n    return a+b;\n}\n```\n对应的导入方式\n```js\nimport {i100,add} from './temp';\n```\n#### export default\n```js\nexport default let i100 = '百里';\n```\n对应的导入方式\n```js\nimport str from './temp';\n```","source":"_posts/如何优雅的使用ES6.md","raw":"---\ntitle: 如何优雅的使用ES6\ntags: 优雅\ncategories: ES6\nabbrlink: e38dcee3\ndate: 2022-01-11 08:58:45\n---\n## 解构赋值\n### 解构的默认值\nundefined不支持，null相当于有值，但值为null\n```js\nlet [foo = true] = [];\nconsole.log('log',foo)\nlet [a,b=\"i100\"]=['百里']\nconsole.log(a+b); //控制台显示“百里i100”\n```\n> 注意：对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\n<!--more-->\n### 圆括号的使用\n在解构之前定义了变量在解构会报错，解决方法是在整体的外边加一个括号\n```js\nlet foo;\n({foo} = {foo: 'i100'});\nconsole.log('log',foo);\n```\n### 字符串解构\n```js\nconst [a,b,c,d] = 'test'\nconsole.log('log',a,b,c,d) // t,e,s,t\n```\n## 扩展与rest运算符\n### 对象扩展运算符\n编写一个方法，允许入参是不确定的\n```js\nfunction i100 (...arg) {\n  console.log('log',arg[0],arg[1])\n}\ni100(1,2,3)\n```\n### 扩展运算符用处\n声明2个数组arr1，arr2，把arr1赋值给arr2，然后改变arr2的值发现arr1的值也变了，这是对内存堆栈的引用，不是真正的赋值\n```js\nlet arr1 = ['www','i100','xyz'];\nlet arr2 = arr1;\nconsole.log('log',arr2)\narr2.push('add')\nconsole.log('i100',arr1)\n```\n> 我们可以利用扩展运算符\n```js\nlet arr2 = [...arr1]\n```\n### rest运算符\n与对象扩展运算符有相似之处\n```js\nfunction i100(first,...rest) {\n  console.log('i100',resr.length)\n}\ni100(0,1,2,3)\n```\n## 模板字符串\n### 简单使用\n```js\nlet i100 = '百里';\nlet blog = `这是${i100}的博客`\n```\n### 对运算的支持\n```js\nlet a=1;\nlet b=2;\nlet sum = `${a+b}`\n```\n### 字符串查询\n- 查询全部\n```js\nlet res = blog.includes(i100)\n```\n- 查询开头\n```js\nlet res = blog.startsWith(i100)\n```\n- 查询结尾\n```js\nlet res = blog.endsWith(i100)\n```\n## 新增数组知识\n### JSON格式转换\n特殊的json格式都可以轻松使用ES6的语法转变成数组\n```js\nlet json = {\n  '0': 'i100',\n  '1': '百里',\n  '2': '博客',\n  length: 3\n}\nlet arr = Array.from(json)\nconsole.log('i100',arr)\n```\n### Array.of()方法\n它负责把一堆文本或者变量转换成数组。\n```js\nlet arr = Array.of(1,2,3,4)\nconsole.log('i100',arr)\n```\n### find()实例方法\nfind方法是从数组中查找。在find方法中我们需要传入一个匿名函数，函数需要传入三个参数：\n- value：表示当前查找的值。\n- index：表示当前查找的数组索引。\n- arr：表示当前数组。\n在函数中如果找到符合条件的数组元素就进行return，并停止查找。\n```js\nlet arr = [1,2,3,4,5];\nlet res = arr.find(function(value, index, arr) { \n  return value > 2;\n})\n```\n### fill()实例方法\nfill()也是一个实例方法，它的作用是把数组进行填充，它接收三个参数，第一个参数是填充的变量，第二个是开始填充的位置，第三个是填充到的位置。\n```js\nlet arr = [1,2,3,4,5];\narr.fill('i100',2,3)\n// 上边的代码是把数组从第二位到第三位用i100进行填充。\n```\n### 数组的遍历\n- for...of循环\n这种形式比ES5的for循环要简单而且高效。先来看一个最简单的for…of循环\n```js\nlet arr = ['i100','百里','博客'];\nfor (let item of arr) {\n  console.log('i100',item);\n}\n```\nfor…of数组索引:有时候开发中是需要数组的索引的，那我们可以使用下面的代码输出数组索引\n```js\nlet arr = ['i100','百里','博客'];\nfor (let index of arr.keys()) {\n  console.log('i100',index);\n}\n```\n同时输出数组的内容和索引：我们用entries()这个实例方法，配合我们的for…of循环就可以同时输出内容和索引了。\n```js\nlet arr = ['i100','百里','博客'];\nfor (let [index,val] of arr.entries()) {\n  console.log('i100',index+':'+val)\n}\n```\n### entries实例方法\nentries()实例方式生成的是Iterator形式的数组，那这种形式的好处就是可以让我们在需要时用next()手动跳转到下一个值。\n```js\nlet arr = ['i100','百里','博客'];\nlet list = arr.entries();\nconsole.log('i100-1',list.next().value);\nconsole.log('i100-2',list.next().value);\nconsole.log('i100-3',list.next().value);\n```\n## 箭头函数和扩展\n### 默认值\n```js\nfunction add(a,b=1) {\n  return a+b;\n}\n\nconsole.log('i100',add(1));\n```\n### 主动抛出错误\n```js\nfunction add(a,b=1) {\n  if(a==0) {\n    throw new Error('This is error')\n  }\n  return a+b;\n}\nconsole.log('i100',add(0))\n```\n### 箭头函数\n箭头函数中不可加new，也就是说箭头函数不能当构造函数进行使用\n```js\nlet add = (a,b=1) => {\n  return a+b;\n}\n  console.log('i100',add(1))\n```\n## 函数与数组的补漏\n### 对象的函数解构\n```js\nlet json = {\n  a: 'i100',\n  b: '百里',\n  c: '博客'\n}\nfunction fun({a,b='test'}) {\n  console.log('i100',a,b)\n}\nfun(json)\n```\n## 数组函数解构\n声明一个数组，然后写一个方法，最后用…进行解构赋值。\n```js\nlet arr = ['i100','百里','博客'];\nfunction fun(a,b,c) {\n  console.log('i100',a,b,c)\n}\nfun(...arr)\n```\n### `in`的用法\n> in是用来判断对象或者数组中是否存在某个值的\n- 对象判断\n```js\nlet obj = {\n  a: 'i100',\n  b: '百里',\n  c: '博客'\n}\nconsole.log('i100' in obj); // true\n```\n- 数组判断\n先来看一下ES5判断的弊端，以前会使用length属性进行判断，为0表示没有数组元素。但是这并不准确，或者说真实开发中有弊端。\n```js\nlet arr = [,,,,,];\nconsole.log('i100',arr.length); // 5\n```\n上边的代码输出了5，但是数组中其实全是空值，这就是一个坑啊。那用ES6的in就可以解决这个问题。\n```js\nlet arr = [,,,,,];\nconsole.log('i100',0 in arr); // false\nlet arr1 = ['i100','百里','博客'];\nconsole.log('i100',0 in arr1) // true\n```\n> 这里的0指的是数组下标位置是否为空。\n### 数组遍历用法\n- `forEach`\n```js\nlet arr = ['i100','百里',,'博客'];\narr.forEach((val,index)=>console.log('i100',index,val))\n```\n> forEach循环的特点是会自动省略为空的数组元素，相当于直接给我们筛空了。当是有时候也会给我们帮倒忙。\n- `filter`\n```js\nlet arr = ['i100','百里','博客'];\narr.filter(x=>console.log(x));\n```\n- `some`\n```js\nlet arr = ['i100','百里','博客'];\narr.some(x=>console.log(x));\n```\n- `map`\n```js\nlet arr = ['i100','百里','博客'];\nconsole.log('i100',arr.map(x=>'wb'));\n```\n> map在这里起到一个替换的作用\n\n数组转换字符串 在开发中我们经常会碰到把数组输出成字符串的形式，我们今天学两种方法，你要注意两种方法的区别\n- `join`\n```js\nlet arr = ['i100','百里','博客'];\nconsole.log('i100',arr.join('|'))\n```\n> join()方法就是在数组元素中间，加了一些间隔，开发中很有用处\n- `toString`\n```js\nlet arr = ['i100','百里','博客'];\nconsole.log('i100',arr.toString());\n```\n> 转换时只是是用逗号隔开了。\n## ES6对象\n对象对于Javascript是非常重要的。在ES6中对象有了很多新特性。\n###对象赋值\n> ES6允许把声明的变量直接赋值给对象\n```js\nlet name = 'i100';\nlet skill = 'web';\nlet obj = {name,skill}\nconsole.log('i100',obj);\n```\n## 对象Key值构建\n有时候我们会在后台取出key值，而不是我们前台定义好的，这时候我们如何构建我们的key值那。比如我们在后台取了一个key值，然后可以用[ ] 的形式，进行对象的构建。\n```js\nlet key = 'skill';\nlet obj = {\n  [key]: 'web'\n}\nconsole.log('i100',obj.skill);\n```\n### 自定义对象方法\n- 对象方法就是把兑现中的属性，用匿名函数的形式编程方法\n```js\nlet obj = {\n  add: function(a,b) {\n    return a + b;\n  }\n}\nconsole.log('i100',obj.add(1,2));\n```\n- `Object.is()`对象比较\n对象的比较方法,以前进行对象值的比较，经常使用===来判断，比如下面的代码：\n```js\nlet obj1 = {name:'lisi'};\nlet obj2 = {name:'xiaoming'};\nlet res = Object.is(obj1,obj2);\nconsole.log('i100',res);\n```\n- `Object.assign()`合并对象\n```js\nlet a={a:'a'}\nlet b={b:'b'}\nlet c={c:'c'}\nlet d=Object.assign(a,b,c);\nconsole.log('i100',d);\n```\n## Symbol在对象的作用\n### 声明Symbol\n```js\nlet g = Symbol('i100');\nconsole.log('i100',g);\nconsole.log('i100',g.toString());\n```\n> 这时候我们仔细看控制台是有区别的，没有toString的是红字，toString的是黑字。\n### Symbol在对象中的应用\n```js\nlet i100 = Symbol();\nlet obj = {\n  [i100]: '百里'\n}\nconsole.log('i100',obj[i100]);\nobj[i100]='web';\nconsole.log('i100',obj[i100]);\n```\n### Symbol对象元素的保护作用\n>在对象中有很多值，但是循环输出时，并不希望全部输出，那我们就可以使用Symbol进行保护。\n\n- 没有进行保护的写法：\n```js\nlet obj = {\n  a: 'i100',\n  b: '百里',\n  c: '博客'\n};\nfor(let item in obj) {\n  console.log('i100',obj[item]);\n}\n```\n现在我不想别人知道我的年龄，这时候我就可以使用Symbol来进行循环保护。\n```js\nlet obj = {\n  a: 'i100',\n  b: '百里',\n};\nlet age = Symbol();\nobj[age] = 18;\nfor(let item in obj) {\n  console.log('i100',obj[item]);\n}\nconsole.log('i100',obj);\n```\n## Set数据结构\n> Set数据结构，注意这里不是数据类型，而是数据结构。它是ES6中新的东西，并且很有用处。Set的数据结构是以数组的形式构建的。\n### Set声明\n```js\nlet setArr = new Set(['i100','百里','博客']);\nconsole.log('i100',setArr); // Set(3) {'i100', '百里', '博客'}\n```\n> Set和Array 的区别是Set不允许内部有重复的值，如果有只显示一个，相当于去重。虽然Set很像数组，但是他不是数组。\n### Set值的增删查\n- 追加add\n在使用Array的时候，可以用push进行追加值，那Set稍有不同，它用更语义化的add进行追加\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.add('前端');\nconsole.log('i100',setArr);\n```\n- 删除delete\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.delete('前端');\nconsole.log('i100',setArr);\n```\n- 查找has\n用has进行值的查找，返回的是true或者false。\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.has('i100');\n```\n- 删除clear\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.clear();\nconsole.log('i100',setArr);\n```\n- set的for...of循环\n```js\nlet setArr = new Set(['i100','百里','博客']);\nfor(let item of setArr) {\n  console.log('i100',item);\n}\n```\n- size属性\nsize属性可以获取Set值的数量\n```js\nlet setArr = new Set(['i100','百里','博客']);\nconsole.log('i100',setArr.size);\n```\n- forEach循环\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.forEach((value)=>console.log(value));\n```\n## Map数据结构\n在一些构建工具中是非常喜欢使用map这种数据结构来进行配置的，因为map是一种灵活，简单的适合一对一查找的数据结构。\n```js\nlet obj = {\n  a: 'i100',\n  b: '百里',\n  c: '博客'\n};\nconsole.log('i100',obj.c);\nlet map = new Map();\n// 设置value\nmap.set(obj,'test');\n// 设置key\nmap.set('test',obj);\nconsole.log('i100',map);\n```\n### 取值get\n```js\nlet res = map.get(obj);\nconsole.log('i100',res);\n```\n### 删除delete\n删除delete指定值：\n```js\nmap.delete(obj)\n```\n### size属性\n```js\nmap.size\n```\n### 查找has\n```js\nmap.has('i100');\n```\n### 清除clear\n```js\nmap.clear()\n```\n总结：map在现在开发中已经经常使用，它的灵活性和高效性是我们喜欢的。开发中试着去使用map吧，你一定会喜欢上它的。\n## 用Proxy进行预处理\n>钩子函数：当我们在操作一个对象或者方法时会有几种动作，比如：在运行函数前初始化一些数据，在改变对象值后做一些善后处理。这些都算钩子函数，Proxy的存在就可以让我们给函数加上这样的钩子函数，你也可以理解为在执行方法前预处理一些代码。你可以简单的理解为他是函数或者对象的生命周期。 Proxy的应用可以使函数更加强大，业务逻辑更加清楚，而且在编写自己的框架或者通用组件时非常好用\n\n回顾定义对象方法\n```js\nvar obj={\n    add:function(val){\n        return val+10;\n    },\n    name:'I am Jspang'\n\n};\nconsole.log(obj.add(100));\nconsole.log(obj.name);\n```\n### 声明Proxy\n用new的方法对Proxy进行声明。可以看一下声明Proxy的基本形式。\n```js\nnew Proxy({},{});\n```\n> 需要注意的是这里是两个花括号，第一个花括号就相当于我们方法的主体，后边的花括号就是Proxy代理处理区域，相当于我们写钩子函数的地方。\n\n现在把上边的obj对象改成我们的Proxy形式。\n```js\nlet pro = new Proxy({\n  add: function(val) {\n    return val + 10;\n  },\n  name: 'I am i100'\n},{\n  get:function(target, key, property) {\n    console.log('come in Get',target, key, property);\n    return target[key];\n  }\n})\nconsole.log('i100',pro.name);\n```\n>可以在控制台看到结果，先输出了come in Get。相当于在方法调用前的钩子函数\n### get属性\nget属性是在你得到某对象属性值时预处理的方法，他接受三个参数\n- target：得到的目标值\n- key：目标的key值，相当于对象的属性\n- property：这个不太常用，用法还在研究中。\n### set属性\nset属性是值你要改变Proxy属性值时，进行的预先处理。它接收四个参数。\n- target:目标值。\n- key：目标的Key值。\n- value：要改变的值。\n- receiver：改变前的原始值。\n```js\nlet pro = new Proxy({\n  add: function(val) {\n    return val + 10;\n  },\n  name: 'I am i100'\n},{\n  get:function(target, key, property) {\n    console.log('come in Get',target, key, property);\n    return target[key];\n  },\n  set:function(target, key, value, receiver) {\n    console.log('i100-set',key,value);\n    return target[key] = value;\n  }\n})\nconsole.log('i100',pro.name);\npro.name = '李四';\nconsole.log('i100',pro.name);\n```\n### apple的使用\napply的作用是调用内部的方法，它使用在方法体是一个匿名函数时。\n```js\nvar twice = {\n  //目标对象，目标对象的上下文对象，目标对象的参数数组\n  apply:function (target,ctx,args) {\n    console.log(\"ctx\",ctx,\"args\",args);\n    return Reflect.apply(...arguments)*2;\n  }\n};\nfunction sum (left,right) {\n  return left*right;\n};\nvar proxy = new Proxy(sum,twice);\nconsole.log(\"proxy1\",proxy(1,2));\nconsole.log(\"proxy.call\",proxy.call(null,5,6));\nconsole.log(\"proxy,apply\",proxy.apply(null,[7,8]));\nconsole.log(\"proxy,apply\",Reflect.apply(proxy,null,[7,8]));\n```\n## promise对象的使用\n>ES6中的promise的出现给我们很好的解决了回调地狱的问题，在使用ES5的时候，在多层嵌套回调时，写完的代码层次过多，很难进行维护和二次开发，ES6认识到了这点问题，现在promise的使用，完美解决了这个问题。\n\n### promise基本用法\n模拟一个多步骤多过程，如在家吃饭需要三个步骤。\n- 开始做饭\n- 坐下来吃饭\n- 🤕️洗碗\n这个过程是有执行顺序多，确保上一步完成，才能继续下一步操作\n```js\nlet state = 1;\nfunction step1(resolve,reject) {\n    console.log('1.开始做饭');\n    if(state) {\n        resolve('做饭完成');\n    }else{\n        reject('做饭出错了');\n    }\n}\nfunction step2(resolve,reject) {\n    console.log('2.开始吃饭');\n    if(state) {\n        resolve('吃饭完成')\n    }else {\n        reject('吃饭出错')\n    }\n}\nfunction step3(resolve,reject) {\n    console.log('3.开始洗碗');\n    if(state) {\n        resolve('洗碗完成')\n    }else {\n        reject('洗碗出错')\n    }\n}\nnew Promise(step1).then(function (val) { \n    console.log(val);\n    return new Promise(step2)\n}).then(function (val) { \n    console.log(val);\n    return new Promise(step3)\n}).then(function (val) {\n    console.log(val);\n    return val;\n})\n```\n## class类的使用\n>在ES5中经常使用方法或者对象去模拟类的使用，虽然可以实现功能，但是代码并不优雅，ES6为我们提供了类的使用。需要注意的是我们在写类的时候和ES5中的对象和构造函数要区分开来，不要学混了。\n### 类的声明\n```js\nclass coder {\n    name(val) {\n        console.log('i100',val);\n    }\n}\n```\n### 类的使用\n```js\nclass Coder{\n    name(val) {\n        console.log('i100',val);\n    }\n    skill(val) {\n        let res = this.name + val;\n        console.log('skill',res);\n    }\n}\nlet i100 = new Coder();\ni100.name('百里');\ni100.skill('web');\n```\n这里需要注意的是两个方法中间不要写逗号了，还有这里的this指类本身，还有要注意return 的用法。\n### 类的传参\n在类的参数传递中我们用constructor( )进行传参。传递参数后可以直接使用this.xxx进行调用。\n```js\nclass Coder{\n    name(val) {\n        console.log('i100',val);\n    }\n    skill(val) {\n        let res = this.name + val;\n        console.log('skill',res);\n    }\n    constructor(a,b) {\n        this.a = b;\n        this.b = b;\n    }\n    add() {\n        return this.a + this.b;\n    }\n}\nlet i100 = new Coder(1,2);\nconsole.log('i100',i100);\n```\n用constructor来约定了传递参数，然后用作了一个add方法，把参数相加。\n### class的继承\n```js\nclass htmler extends Coder {\n    \n}\nlet i100 = new htmler();\ni100.name('百里')\n```\n声明一个htmler的新类并继承Coder类，htmler新类里边为空，这时候我们实例化新类，并调用里边的name方法。结果也是可以调用到的。\n## 模块化操作\n在ES5中我们要进行模块华操作需要引入第三方类库，随着前后端分离，前端的业务日渐复杂，ES6为我们增加了模块话操作。模块化操作主要包括两个方面。\n- export :负责进行模块化，也是模块的输出。\n- import : 负责把模块引，也是模块的引入操作。\n### export的用法\nexport可以让我们把变量，函数，对象进行模块话，提供外部调用接口，让外部进行引用。先来看个最简单的例子，把一个变量模块化。\n新建一个temp.js文件，然后在文件中输出一个模块变量\n```js\nexport let i00 = '百里';\n```\n然后可以在index.js中以import的形式引入。\n```js\nimport {i100} from './temp.js';\nconsole.log('i100',i100);\n```\n这就是一个最简单的模块的输出和引入。\n### as用法\n有些时候我们并不想暴露模块里边的变量名称，而给模块起一个更语义话的名称，这时候我们就可以使用as来操作。\n\n```js\nlet a = 'i100', b = '百里', c = 'web';\nexport {\n    x as a,\n    y as b,\n    z as c\n}\n```\n### export default的使用\n加上default相当是一个默认的入口。在一个文件里export default只能有一个。我们来对比一下export和export default的区别\n#### export\n```js\nexport let i100 = '百里';\nexport function add(a,b) {\n    return a+b;\n}\n```\n对应的导入方式\n```js\nimport {i100,add} from './temp';\n```\n#### export default\n```js\nexport default let i100 = '百里';\n```\n对应的导入方式\n```js\nimport str from './temp';\n```","slug":"如何优雅的使用ES6","published":1,"updated":"2022-01-11T16:55:25.947Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyaf40s40009esl321w0agzs","content":"<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><h3 id=\"解构的默认值\"><a href=\"#解构的默认值\" class=\"headerlink\" title=\"解构的默认值\"></a>解构的默认值</h3><p>undefined不支持，null相当于有值，但值为null</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo = <span class=\"literal\">true</span>] = [];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,foo)</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,b=<span class=\"string\">&quot;i100&quot;</span>]=[<span class=\"string\">&#x27;百里&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a+b); <span class=\"comment\">//控制台显示“百里i100”</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"圆括号的使用\"><a href=\"#圆括号的使用\" class=\"headerlink\" title=\"圆括号的使用\"></a>圆括号的使用</h3><p>在解构之前定义了变量在解构会报错，解决方法是在整体的外边加一个括号</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo;</span><br><span class=\"line\">(&#123;foo&#125; = &#123;<span class=\"attr\">foo</span>: <span class=\"string\">&#x27;i100&#x27;</span>&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,foo);</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串解构\"><a href=\"#字符串解构\" class=\"headerlink\" title=\"字符串解构\"></a>字符串解构</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a,b,c,d] = <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,a,b,c,d) <span class=\"comment\">// t,e,s,t</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展与rest运算符\"><a href=\"#扩展与rest运算符\" class=\"headerlink\" title=\"扩展与rest运算符\"></a>扩展与rest运算符</h2><h3 id=\"对象扩展运算符\"><a href=\"#对象扩展运算符\" class=\"headerlink\" title=\"对象扩展运算符\"></a>对象扩展运算符</h3><p>编写一个方法，允许入参是不确定的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">i100</span> (<span class=\"params\">...arg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,arg[<span class=\"number\">0</span>],arg[<span class=\"number\">1</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">i100(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展运算符用处\"><a href=\"#扩展运算符用处\" class=\"headerlink\" title=\"扩展运算符用处\"></a>扩展运算符用处</h3><p>声明2个数组arr1，arr2，把arr1赋值给arr2，然后改变arr2的值发现arr1的值也变了，这是对内存堆栈的引用，不是真正的赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"string\">&#x27;www&#x27;</span>,<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;xyz&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr1;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,arr2)</span><br><span class=\"line\">arr2.push(<span class=\"string\">&#x27;add&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr1)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们可以利用扩展运算符</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [...arr1]</span><br></pre></td></tr></table></figure>\n<h3 id=\"rest运算符\"><a href=\"#rest运算符\" class=\"headerlink\" title=\"rest运算符\"></a>rest运算符</h3><p>与对象扩展运算符有相似之处</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">i100</span>(<span class=\"params\">first,...rest</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,resr.length)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">i100(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><h3 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i100 = <span class=\"string\">&#x27;百里&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> blog = <span class=\"string\">`这是<span class=\"subst\">$&#123;i100&#125;</span>的博客`</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"对运算的支持\"><a href=\"#对运算的支持\" class=\"headerlink\" title=\"对运算的支持\"></a>对运算的支持</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = <span class=\"string\">`<span class=\"subst\">$&#123;a+b&#125;</span>`</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串查询\"><a href=\"#字符串查询\" class=\"headerlink\" title=\"字符串查询\"></a>字符串查询</h3><ul>\n<li>查询全部<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = blog.includes(i100)</span><br></pre></td></tr></table></figure></li>\n<li>查询开头<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = blog.startsWith(i100)</span><br></pre></td></tr></table></figure></li>\n<li>查询结尾<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = blog.endsWith(i100)</span><br></pre></td></tr></table></figure>\n<h2 id=\"新增数组知识\"><a href=\"#新增数组知识\" class=\"headerlink\" title=\"新增数组知识\"></a>新增数组知识</h2><h3 id=\"JSON格式转换\"><a href=\"#JSON格式转换\" class=\"headerlink\" title=\"JSON格式转换\"></a>JSON格式转换</h3>特殊的json格式都可以轻松使用ES6的语法转变成数组<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> json = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;0&#x27;</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;1&#x27;</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;2&#x27;</span>: <span class=\"string\">&#x27;博客&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"built_in\">Array</span>.from(json)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-of-方法\"><a href=\"#Array-of-方法\" class=\"headerlink\" title=\"Array.of()方法\"></a>Array.of()方法</h3>它负责把一堆文本或者变量转换成数组。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr)</span><br></pre></td></tr></table></figure>\n<h3 id=\"find-实例方法\"><a href=\"#find-实例方法\" class=\"headerlink\" title=\"find()实例方法\"></a>find()实例方法</h3>find方法是从数组中查找。在find方法中我们需要传入一个匿名函数，函数需要传入三个参数：</li>\n<li>value：表示当前查找的值。</li>\n<li>index：表示当前查找的数组索引。</li>\n<li>arr：表示当前数组。<br>在函数中如果找到符合条件的数组元素就进行return，并停止查找。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = arr.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"fill-实例方法\"><a href=\"#fill-实例方法\" class=\"headerlink\" title=\"fill()实例方法\"></a>fill()实例方法</h3>fill()也是一个实例方法，它的作用是把数组进行填充，它接收三个参数，第一个参数是填充的变量，第二个是开始填充的位置，第三个是填充到的位置。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">arr.fill(<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// 上边的代码是把数组从第二位到第三位用i100进行填充。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数组的遍历\"><a href=\"#数组的遍历\" class=\"headerlink\" title=\"数组的遍历\"></a>数组的遍历</h3></li>\n<li>for…of循环<br>这种形式比ES5的for循环要简单而且高效。先来看一个最简单的for…of循环<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nfor…of数组索引:有时候开发中是需要数组的索引的，那我们可以使用下面的代码输出数组索引<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> arr.keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,index);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n同时输出数组的内容和索引：我们用entries()这个实例方法，配合我们的for…of循环就可以同时输出内容和索引了。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index,val] <span class=\"keyword\">of</span> arr.entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,index+<span class=\"string\">&#x27;:&#x27;</span>+val)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"entries实例方法\"><a href=\"#entries实例方法\" class=\"headerlink\" title=\"entries实例方法\"></a>entries实例方法</h3>entries()实例方式生成的是Iterator形式的数组，那这种形式的好处就是可以让我们在需要时用next()手动跳转到下一个值。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = arr.entries();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100-1&#x27;</span>,list.next().value);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100-2&#x27;</span>,list.next().value);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100-3&#x27;</span>,list.next().value);</span><br></pre></td></tr></table></figure>\n<h2 id=\"箭头函数和扩展\"><a href=\"#箭头函数和扩展\" class=\"headerlink\" title=\"箭头函数和扩展\"></a>箭头函数和扩展</h2><h3 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b=<span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,add(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"主动抛出错误\"><a href=\"#主动抛出错误\" class=\"headerlink\" title=\"主动抛出错误\"></a>主动抛出错误</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b=<span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;This is error&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,add(<span class=\"number\">0</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3>箭头函数中不可加new，也就是说箭头函数不能当构造函数进行使用<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> add = <span class=\"function\">(<span class=\"params\">a,b=<span class=\"number\">1</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,add(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数与数组的补漏\"><a href=\"#函数与数组的补漏\" class=\"headerlink\" title=\"函数与数组的补漏\"></a>函数与数组的补漏</h2><h3 id=\"对象的函数解构\"><a href=\"#对象的函数解构\" class=\"headerlink\" title=\"对象的函数解构\"></a>对象的函数解构</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> json = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&#x27;博客&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">&#123;a,b=<span class=\"string\">&#x27;test&#x27;</span>&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,a,b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun(json)</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组函数解构\"><a href=\"#数组函数解构\" class=\"headerlink\" title=\"数组函数解构\"></a>数组函数解构</h2>声明一个数组，然后写一个方法，最后用…进行解构赋值。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">a,b,c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,a,b,c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun(...arr)</span><br></pre></td></tr></table></figure>\n<h3 id=\"in的用法\"><a href=\"#in的用法\" class=\"headerlink\" title=\"in的用法\"></a><code>in</code>的用法</h3><blockquote>\n<p>in是用来判断对象或者数组中是否存在某个值的</p>\n</blockquote>\n</li>\n<li>对象判断<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&#x27;博客&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span> <span class=\"keyword\">in</span> obj); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n<li>数组判断<br>先来看一下ES5判断的弊端，以前会使用length属性进行判断，为0表示没有数组元素。但是这并不准确，或者说真实开发中有弊端。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [,,,,,];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr.length); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n上边的代码输出了5，但是数组中其实全是空值，这就是一个坑啊。那用ES6的in就可以解决这个问题。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [,,,,,];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"number\">0</span> <span class=\"keyword\">in</span> arr); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"number\">0</span> <span class=\"keyword\">in</span> arr1) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里的0指的是数组下标位置是否为空。</p>\n</blockquote>\n<h3 id=\"数组遍历用法\"><a href=\"#数组遍历用法\" class=\"headerlink\" title=\"数组遍历用法\"></a>数组遍历用法</h3></li>\n<li><code>forEach</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">val,index</span>)=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,index,val))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>forEach循环的特点是会自动省略为空的数组元素，相当于直接给我们筛空了。当是有时候也会给我们帮倒忙。</p>\n</blockquote>\n</li>\n<li><code>filter</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\">arr.filter(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"built_in\">console</span>.log(x));</span><br></pre></td></tr></table></figure></li>\n<li><code>some</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\">arr.some(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"built_in\">console</span>.log(x));</span><br></pre></td></tr></table></figure></li>\n<li><code>map</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr.map(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"string\">&#x27;wb&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>map在这里起到一个替换的作用</p>\n</blockquote>\n</li>\n</ul>\n<p>数组转换字符串 在开发中我们经常会碰到把数组输出成字符串的形式，我们今天学两种方法，你要注意两种方法的区别</p>\n<ul>\n<li><p><code>join</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr.join(<span class=\"string\">&#x27;|&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>join()方法就是在数组元素中间，加了一些间隔，开发中很有用处</p>\n</blockquote>\n</li>\n<li><p><code>toString</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr.toString());</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>转换时只是是用逗号隔开了。</p>\n</blockquote>\n<h2 id=\"ES6对象\"><a href=\"#ES6对象\" class=\"headerlink\" title=\"ES6对象\"></a>ES6对象</h2><p>对象对于Javascript是非常重要的。在ES6中对象有了很多新特性。<br>###对象赋值</p>\n<blockquote>\n<p>ES6允许把声明的变量直接赋值给对象</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;i100&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> skill = <span class=\"string\">&#x27;web&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;name,skill&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj);</span><br></pre></td></tr></table></figure>\n<h2 id=\"对象Key值构建\"><a href=\"#对象Key值构建\" class=\"headerlink\" title=\"对象Key值构建\"></a>对象Key值构建</h2><p>有时候我们会在后台取出key值，而不是我们前台定义好的，这时候我们如何构建我们的key值那。比如我们在后台取了一个key值，然后可以用[ ] 的形式，进行对象的构建。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> key = <span class=\"string\">&#x27;skill&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [key]: <span class=\"string\">&#x27;web&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj.skill);</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义对象方法\"><a href=\"#自定义对象方法\" class=\"headerlink\" title=\"自定义对象方法\"></a>自定义对象方法</h3></li>\n<li><p>对象方法就是把兑现中的属性，用匿名函数的形式编程方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj.add(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure></li>\n<li><p><code>Object.is()</code>对象比较<br>对象的比较方法,以前进行对象值的比较，经常使用===来判断，比如下面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;lisi&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiaoming&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = <span class=\"built_in\">Object</span>.is(obj1,obj2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,res);</span><br></pre></td></tr></table></figure></li>\n<li><p><code>Object.assign()</code>合并对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a=&#123;<span class=\"attr\">a</span>:<span class=\"string\">&#x27;a&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b=&#123;<span class=\"attr\">b</span>:<span class=\"string\">&#x27;b&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c=&#123;<span class=\"attr\">c</span>:<span class=\"string\">&#x27;c&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d=<span class=\"built_in\">Object</span>.assign(a,b,c);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,d);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Symbol在对象的作用\"><a href=\"#Symbol在对象的作用\" class=\"headerlink\" title=\"Symbol在对象的作用\"></a>Symbol在对象的作用</h2><h3 id=\"声明Symbol\"><a href=\"#声明Symbol\" class=\"headerlink\" title=\"声明Symbol\"></a>声明Symbol</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> g = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;i100&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,g);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,g.toString());</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这时候我们仔细看控制台是有区别的，没有toString的是红字，toString的是黑字。</p>\n</blockquote>\n<h3 id=\"Symbol在对象中的应用\"><a href=\"#Symbol在对象中的应用\" class=\"headerlink\" title=\"Symbol在对象中的应用\"></a>Symbol在对象中的应用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i100 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [i100]: <span class=\"string\">&#x27;百里&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj[i100]);</span><br><span class=\"line\">obj[i100]=<span class=\"string\">&#x27;web&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj[i100]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Symbol对象元素的保护作用\"><a href=\"#Symbol对象元素的保护作用\" class=\"headerlink\" title=\"Symbol对象元素的保护作用\"></a>Symbol对象元素的保护作用</h3><blockquote>\n<p>在对象中有很多值，但是循环输出时，并不希望全部输出，那我们就可以使用Symbol进行保护。</p>\n</blockquote>\n</li>\n<li><p>没有进行保护的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&#x27;博客&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj[item]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我不想别人知道我的年龄，这时候我就可以使用Symbol来进行循环保护。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\">obj[age] = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj[item]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Set数据结构\"><a href=\"#Set数据结构\" class=\"headerlink\" title=\"Set数据结构\"></a>Set数据结构</h2><blockquote>\n<p>Set数据结构，注意这里不是数据类型，而是数据结构。它是ES6中新的东西，并且很有用处。Set的数据结构是以数组的形式构建的。</p>\n</blockquote>\n<h3 id=\"Set声明\"><a href=\"#Set声明\" class=\"headerlink\" title=\"Set声明\"></a>Set声明</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr); <span class=\"comment\">// Set(3) &#123;&#x27;i100&#x27;, &#x27;百里&#x27;, &#x27;博客&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Set和Array 的区别是Set不允许内部有重复的值，如果有只显示一个，相当于去重。虽然Set很像数组，但是他不是数组。</p>\n</blockquote>\n<h3 id=\"Set值的增删查\"><a href=\"#Set值的增删查\" class=\"headerlink\" title=\"Set值的增删查\"></a>Set值的增删查</h3></li>\n<li><p>追加add<br>在使用Array的时候，可以用push进行追加值，那Set稍有不同，它用更语义化的add进行追加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.add(<span class=\"string\">&#x27;前端&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr);</span><br></pre></td></tr></table></figure></li>\n<li><p>删除delete</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.delete(<span class=\"string\">&#x27;前端&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr);</span><br></pre></td></tr></table></figure></li>\n<li><p>查找has<br>用has进行值的查找，返回的是true或者false。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.has(<span class=\"string\">&#x27;i100&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>删除clear</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.clear();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr);</span><br></pre></td></tr></table></figure></li>\n<li><p>set的for…of循环</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> setArr) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>size属性<br>size属性可以获取Set值的数量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr.size);</span><br></pre></td></tr></table></figure></li>\n<li><p>forEach循环</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.forEach(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span><span class=\"built_in\">console</span>.log(value));</span><br></pre></td></tr></table></figure>\n<h2 id=\"Map数据结构\"><a href=\"#Map数据结构\" class=\"headerlink\" title=\"Map数据结构\"></a>Map数据结构</h2><p>在一些构建工具中是非常喜欢使用map这种数据结构来进行配置的，因为map是一种灵活，简单的适合一对一查找的数据结构。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&#x27;博客&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj.c);</span><br><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"comment\">// 设置value</span></span><br><span class=\"line\">map.set(obj,<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置key</span></span><br><span class=\"line\">map.set(<span class=\"string\">&#x27;test&#x27;</span>,obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,map);</span><br></pre></td></tr></table></figure>\n<h3 id=\"取值get\"><a href=\"#取值get\" class=\"headerlink\" title=\"取值get\"></a>取值get</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = map.get(obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,res);</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除delete\"><a href=\"#删除delete\" class=\"headerlink\" title=\"删除delete\"></a>删除delete</h3><p>删除delete指定值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.delete(obj)</span><br></pre></td></tr></table></figure>\n<h3 id=\"size属性\"><a href=\"#size属性\" class=\"headerlink\" title=\"size属性\"></a>size属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.size</span><br></pre></td></tr></table></figure>\n<h3 id=\"查找has\"><a href=\"#查找has\" class=\"headerlink\" title=\"查找has\"></a>查找has</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.has(<span class=\"string\">&#x27;i100&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"清除clear\"><a href=\"#清除clear\" class=\"headerlink\" title=\"清除clear\"></a>清除clear</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.clear()</span><br></pre></td></tr></table></figure>\n<p>总结：map在现在开发中已经经常使用，它的灵活性和高效性是我们喜欢的。开发中试着去使用map吧，你一定会喜欢上它的。</p>\n<h2 id=\"用Proxy进行预处理\"><a href=\"#用Proxy进行预处理\" class=\"headerlink\" title=\"用Proxy进行预处理\"></a>用Proxy进行预处理</h2><blockquote>\n<p>钩子函数：当我们在操作一个对象或者方法时会有几种动作，比如：在运行函数前初始化一些数据，在改变对象值后做一些善后处理。这些都算钩子函数，Proxy的存在就可以让我们给函数加上这样的钩子函数，你也可以理解为在执行方法前预处理一些代码。你可以简单的理解为他是函数或者对象的生命周期。 Proxy的应用可以使函数更加强大，业务逻辑更加清楚，而且在编写自己的框架或者通用组件时非常好用</p>\n</blockquote>\n</li>\n</ul>\n<p>回顾定义对象方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj=&#123;</span><br><span class=\"line\">    <span class=\"attr\">add</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val+<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;I am Jspang&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.add(<span class=\"number\">100</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name);</span><br></pre></td></tr></table></figure>\n<h3 id=\"声明Proxy\"><a href=\"#声明Proxy\" class=\"headerlink\" title=\"声明Proxy\"></a>声明Proxy</h3><p>用new的方法对Proxy进行声明。可以看一下声明Proxy的基本形式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;,&#123;&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要注意的是这里是两个花括号，第一个花括号就相当于我们方法的主体，后边的花括号就是Proxy代理处理区域，相当于我们写钩子函数的地方。</p>\n</blockquote>\n<p>现在把上边的obj对象改成我们的Proxy形式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pro = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val + <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;I am i100&#x27;</span></span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, property</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;come in Get&#x27;</span>,target, key, property);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,pro.name);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以在控制台看到结果，先输出了come in Get。相当于在方法调用前的钩子函数</p>\n</blockquote>\n<h3 id=\"get属性\"><a href=\"#get属性\" class=\"headerlink\" title=\"get属性\"></a>get属性</h3><p>get属性是在你得到某对象属性值时预处理的方法，他接受三个参数</p>\n<ul>\n<li>target：得到的目标值</li>\n<li>key：目标的key值，相当于对象的属性</li>\n<li>property：这个不太常用，用法还在研究中。<h3 id=\"set属性\"><a href=\"#set属性\" class=\"headerlink\" title=\"set属性\"></a>set属性</h3>set属性是值你要改变Proxy属性值时，进行的预先处理。它接收四个参数。</li>\n<li>target:目标值。</li>\n<li>key：目标的Key值。</li>\n<li>value：要改变的值。</li>\n<li>receiver：改变前的原始值。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pro = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val + <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;I am i100&#x27;</span></span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, property</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;come in Get&#x27;</span>,target, key, property);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">set</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100-set&#x27;</span>,key,value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[key] = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,pro.name);</span><br><span class=\"line\">pro.name = <span class=\"string\">&#x27;李四&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,pro.name);</span><br></pre></td></tr></table></figure>\n<h3 id=\"apple的使用\"><a href=\"#apple的使用\" class=\"headerlink\" title=\"apple的使用\"></a>apple的使用</h3>apply的作用是调用内部的方法，它使用在方法体是一个匿名函数时。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> twice = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//目标对象，目标对象的上下文对象，目标对象的参数数组</span></span><br><span class=\"line\">  <span class=\"attr\">apply</span>:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target,ctx,args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ctx&quot;</span>,ctx,<span class=\"string\">&quot;args&quot;</span>,args);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.apply(...arguments)*<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span> (<span class=\"params\">left,right</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> left*right;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(sum,twice);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;proxy1&quot;</span>,proxy(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;proxy.call&quot;</span>,proxy.call(<span class=\"literal\">null</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;proxy,apply&quot;</span>,proxy.apply(<span class=\"literal\">null</span>,[<span class=\"number\">7</span>,<span class=\"number\">8</span>]));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;proxy,apply&quot;</span>,<span class=\"built_in\">Reflect</span>.apply(proxy,<span class=\"literal\">null</span>,[<span class=\"number\">7</span>,<span class=\"number\">8</span>]));</span><br></pre></td></tr></table></figure>\n<h2 id=\"promise对象的使用\"><a href=\"#promise对象的使用\" class=\"headerlink\" title=\"promise对象的使用\"></a>promise对象的使用</h2><blockquote>\n<p>ES6中的promise的出现给我们很好的解决了回调地狱的问题，在使用ES5的时候，在多层嵌套回调时，写完的代码层次过多，很难进行维护和二次开发，ES6认识到了这点问题，现在promise的使用，完美解决了这个问题。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"promise基本用法\"><a href=\"#promise基本用法\" class=\"headerlink\" title=\"promise基本用法\"></a>promise基本用法</h3><p>模拟一个多步骤多过程，如在家吃饭需要三个步骤。</p>\n<ul>\n<li>开始做饭</li>\n<li>坐下来吃饭</li>\n<li>🤕️洗碗<br>这个过程是有执行顺序多，确保上一步完成，才能继续下一步操作<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> state = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step1</span>(<span class=\"params\">resolve,reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1.开始做饭&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(state) &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&#x27;做饭完成&#x27;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        reject(<span class=\"string\">&#x27;做饭出错了&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step2</span>(<span class=\"params\">resolve,reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2.开始吃饭&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(state) &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&#x27;吃饭完成&#x27;</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"string\">&#x27;吃饭出错&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step3</span>(<span class=\"params\">resolve,reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;3.开始洗碗&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(state) &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&#x27;洗碗完成&#x27;</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"string\">&#x27;洗碗出错&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(step1).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(step2)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(step3)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"class类的使用\"><a href=\"#class类的使用\" class=\"headerlink\" title=\"class类的使用\"></a>class类的使用</h2><blockquote>\n<p>在ES5中经常使用方法或者对象去模拟类的使用，虽然可以实现功能，但是代码并不优雅，ES6为我们提供了类的使用。需要注意的是我们在写类的时候和ES5中的对象和构造函数要区分开来，不要学混了。</p>\n</blockquote>\n<h3 id=\"类的声明\"><a href=\"#类的声明\" class=\"headerlink\" title=\"类的声明\"></a>类的声明</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">coder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">name</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类的使用\"><a href=\"#类的使用\" class=\"headerlink\" title=\"类的使用\"></a>类的使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Coder</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">name</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">skill</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = <span class=\"built_in\">this</span>.name + val;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;skill&#x27;</span>,res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> i100 = <span class=\"keyword\">new</span> Coder();</span><br><span class=\"line\">i100.name(<span class=\"string\">&#x27;百里&#x27;</span>);</span><br><span class=\"line\">i100.skill(<span class=\"string\">&#x27;web&#x27;</span>);</span><br></pre></td></tr></table></figure>\n这里需要注意的是两个方法中间不要写逗号了，还有这里的this指类本身，还有要注意return 的用法。<h3 id=\"类的传参\"><a href=\"#类的传参\" class=\"headerlink\" title=\"类的传参\"></a>类的传参</h3>在类的参数传递中我们用constructor( )进行传参。传递参数后可以直接使用this.xxx进行调用。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Coder</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">name</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">skill</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = <span class=\"built_in\">this</span>.name + val;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;skill&#x27;</span>,res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">a,b</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.a = b;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.b = b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.a + <span class=\"built_in\">this</span>.b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> i100 = <span class=\"keyword\">new</span> Coder(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,i100);</span><br></pre></td></tr></table></figure>\n用constructor来约定了传递参数，然后用作了一个add方法，把参数相加。<h3 id=\"class的继承\"><a href=\"#class的继承\" class=\"headerlink\" title=\"class的继承\"></a>class的继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">htmler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Coder</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> i100 = <span class=\"keyword\">new</span> htmler();</span><br><span class=\"line\">i100.name(<span class=\"string\">&#x27;百里&#x27;</span>)</span><br></pre></td></tr></table></figure>\n声明一个htmler的新类并继承Coder类，htmler新类里边为空，这时候我们实例化新类，并调用里边的name方法。结果也是可以调用到的。<h2 id=\"模块化操作\"><a href=\"#模块化操作\" class=\"headerlink\" title=\"模块化操作\"></a>模块化操作</h2>在ES5中我们要进行模块华操作需要引入第三方类库，随着前后端分离，前端的业务日渐复杂，ES6为我们增加了模块话操作。模块化操作主要包括两个方面。</li>\n<li>export :负责进行模块化，也是模块的输出。</li>\n<li>import : 负责把模块引，也是模块的引入操作。<h3 id=\"export的用法\"><a href=\"#export的用法\" class=\"headerlink\" title=\"export的用法\"></a>export的用法</h3>export可以让我们把变量，函数，对象进行模块话，提供外部调用接口，让外部进行引用。先来看个最简单的例子，把一个变量模块化。<br>新建一个temp.js文件，然后在文件中输出一个模块变量<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> i00 = <span class=\"string\">&#x27;百里&#x27;</span>;</span><br></pre></td></tr></table></figure>\n然后可以在index.js中以import的形式引入。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;i100&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./temp.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,i100);</span><br></pre></td></tr></table></figure>\n这就是一个最简单的模块的输出和引入。<h3 id=\"as用法\"><a href=\"#as用法\" class=\"headerlink\" title=\"as用法\"></a>as用法</h3>有些时候我们并不想暴露模块里边的变量名称，而给模块起一个更语义话的名称，这时候我们就可以使用as来操作。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;i100&#x27;</span>, b = <span class=\"string\">&#x27;百里&#x27;</span>, c = <span class=\"string\">&#x27;web&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">    x <span class=\"keyword\">as</span> a,</span><br><span class=\"line\">    y <span class=\"keyword\">as</span> b,</span><br><span class=\"line\">    z <span class=\"keyword\">as</span> c</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"export-default的使用\"><a href=\"#export-default的使用\" class=\"headerlink\" title=\"export default的使用\"></a>export default的使用</h3><p>加上default相当是一个默认的入口。在一个文件里export default只能有一个。我们来对比一下export和export default的区别</p>\n<h4 id=\"export\"><a href=\"#export\" class=\"headerlink\" title=\"export\"></a>export</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> i100 = <span class=\"string\">&#x27;百里&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对应的导入方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;i100,add&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./temp&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"export-default\"><a href=\"#export-default\" class=\"headerlink\" title=\"export default\"></a>export default</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">let</span> i100 = <span class=\"string\">&#x27;百里&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>对应的导入方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> str <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./temp&#x27;</span>;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><h3 id=\"解构的默认值\"><a href=\"#解构的默认值\" class=\"headerlink\" title=\"解构的默认值\"></a>解构的默认值</h3><p>undefined不支持，null相当于有值，但值为null</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo = <span class=\"literal\">true</span>] = [];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,foo)</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,b=<span class=\"string\">&quot;i100&quot;</span>]=[<span class=\"string\">&#x27;百里&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a+b); <span class=\"comment\">//控制台显示“百里i100”</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n</blockquote>","more":"<h3 id=\"圆括号的使用\"><a href=\"#圆括号的使用\" class=\"headerlink\" title=\"圆括号的使用\"></a>圆括号的使用</h3><p>在解构之前定义了变量在解构会报错，解决方法是在整体的外边加一个括号</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo;</span><br><span class=\"line\">(&#123;foo&#125; = &#123;<span class=\"attr\">foo</span>: <span class=\"string\">&#x27;i100&#x27;</span>&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,foo);</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串解构\"><a href=\"#字符串解构\" class=\"headerlink\" title=\"字符串解构\"></a>字符串解构</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a,b,c,d] = <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,a,b,c,d) <span class=\"comment\">// t,e,s,t</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展与rest运算符\"><a href=\"#扩展与rest运算符\" class=\"headerlink\" title=\"扩展与rest运算符\"></a>扩展与rest运算符</h2><h3 id=\"对象扩展运算符\"><a href=\"#对象扩展运算符\" class=\"headerlink\" title=\"对象扩展运算符\"></a>对象扩展运算符</h3><p>编写一个方法，允许入参是不确定的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">i100</span> (<span class=\"params\">...arg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,arg[<span class=\"number\">0</span>],arg[<span class=\"number\">1</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">i100(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展运算符用处\"><a href=\"#扩展运算符用处\" class=\"headerlink\" title=\"扩展运算符用处\"></a>扩展运算符用处</h3><p>声明2个数组arr1，arr2，把arr1赋值给arr2，然后改变arr2的值发现arr1的值也变了，这是对内存堆栈的引用，不是真正的赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"string\">&#x27;www&#x27;</span>,<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;xyz&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr1;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,arr2)</span><br><span class=\"line\">arr2.push(<span class=\"string\">&#x27;add&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr1)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们可以利用扩展运算符</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [...arr1]</span><br></pre></td></tr></table></figure>\n<h3 id=\"rest运算符\"><a href=\"#rest运算符\" class=\"headerlink\" title=\"rest运算符\"></a>rest运算符</h3><p>与对象扩展运算符有相似之处</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">i100</span>(<span class=\"params\">first,...rest</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,resr.length)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">i100(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><h3 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i100 = <span class=\"string\">&#x27;百里&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> blog = <span class=\"string\">`这是<span class=\"subst\">$&#123;i100&#125;</span>的博客`</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"对运算的支持\"><a href=\"#对运算的支持\" class=\"headerlink\" title=\"对运算的支持\"></a>对运算的支持</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = <span class=\"string\">`<span class=\"subst\">$&#123;a+b&#125;</span>`</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串查询\"><a href=\"#字符串查询\" class=\"headerlink\" title=\"字符串查询\"></a>字符串查询</h3><ul>\n<li>查询全部<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = blog.includes(i100)</span><br></pre></td></tr></table></figure></li>\n<li>查询开头<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = blog.startsWith(i100)</span><br></pre></td></tr></table></figure></li>\n<li>查询结尾<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = blog.endsWith(i100)</span><br></pre></td></tr></table></figure>\n<h2 id=\"新增数组知识\"><a href=\"#新增数组知识\" class=\"headerlink\" title=\"新增数组知识\"></a>新增数组知识</h2><h3 id=\"JSON格式转换\"><a href=\"#JSON格式转换\" class=\"headerlink\" title=\"JSON格式转换\"></a>JSON格式转换</h3>特殊的json格式都可以轻松使用ES6的语法转变成数组<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> json = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;0&#x27;</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;1&#x27;</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;2&#x27;</span>: <span class=\"string\">&#x27;博客&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"built_in\">Array</span>.from(json)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-of-方法\"><a href=\"#Array-of-方法\" class=\"headerlink\" title=\"Array.of()方法\"></a>Array.of()方法</h3>它负责把一堆文本或者变量转换成数组。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr)</span><br></pre></td></tr></table></figure>\n<h3 id=\"find-实例方法\"><a href=\"#find-实例方法\" class=\"headerlink\" title=\"find()实例方法\"></a>find()实例方法</h3>find方法是从数组中查找。在find方法中我们需要传入一个匿名函数，函数需要传入三个参数：</li>\n<li>value：表示当前查找的值。</li>\n<li>index：表示当前查找的数组索引。</li>\n<li>arr：表示当前数组。<br>在函数中如果找到符合条件的数组元素就进行return，并停止查找。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = arr.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"fill-实例方法\"><a href=\"#fill-实例方法\" class=\"headerlink\" title=\"fill()实例方法\"></a>fill()实例方法</h3>fill()也是一个实例方法，它的作用是把数组进行填充，它接收三个参数，第一个参数是填充的变量，第二个是开始填充的位置，第三个是填充到的位置。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">arr.fill(<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// 上边的代码是把数组从第二位到第三位用i100进行填充。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数组的遍历\"><a href=\"#数组的遍历\" class=\"headerlink\" title=\"数组的遍历\"></a>数组的遍历</h3></li>\n<li>for…of循环<br>这种形式比ES5的for循环要简单而且高效。先来看一个最简单的for…of循环<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nfor…of数组索引:有时候开发中是需要数组的索引的，那我们可以使用下面的代码输出数组索引<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> arr.keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,index);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n同时输出数组的内容和索引：我们用entries()这个实例方法，配合我们的for…of循环就可以同时输出内容和索引了。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index,val] <span class=\"keyword\">of</span> arr.entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,index+<span class=\"string\">&#x27;:&#x27;</span>+val)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"entries实例方法\"><a href=\"#entries实例方法\" class=\"headerlink\" title=\"entries实例方法\"></a>entries实例方法</h3>entries()实例方式生成的是Iterator形式的数组，那这种形式的好处就是可以让我们在需要时用next()手动跳转到下一个值。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = arr.entries();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100-1&#x27;</span>,list.next().value);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100-2&#x27;</span>,list.next().value);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100-3&#x27;</span>,list.next().value);</span><br></pre></td></tr></table></figure>\n<h2 id=\"箭头函数和扩展\"><a href=\"#箭头函数和扩展\" class=\"headerlink\" title=\"箭头函数和扩展\"></a>箭头函数和扩展</h2><h3 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b=<span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,add(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"主动抛出错误\"><a href=\"#主动抛出错误\" class=\"headerlink\" title=\"主动抛出错误\"></a>主动抛出错误</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b=<span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;This is error&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,add(<span class=\"number\">0</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3>箭头函数中不可加new，也就是说箭头函数不能当构造函数进行使用<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> add = <span class=\"function\">(<span class=\"params\">a,b=<span class=\"number\">1</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,add(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数与数组的补漏\"><a href=\"#函数与数组的补漏\" class=\"headerlink\" title=\"函数与数组的补漏\"></a>函数与数组的补漏</h2><h3 id=\"对象的函数解构\"><a href=\"#对象的函数解构\" class=\"headerlink\" title=\"对象的函数解构\"></a>对象的函数解构</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> json = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&#x27;博客&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">&#123;a,b=<span class=\"string\">&#x27;test&#x27;</span>&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,a,b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun(json)</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组函数解构\"><a href=\"#数组函数解构\" class=\"headerlink\" title=\"数组函数解构\"></a>数组函数解构</h2>声明一个数组，然后写一个方法，最后用…进行解构赋值。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">a,b,c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,a,b,c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun(...arr)</span><br></pre></td></tr></table></figure>\n<h3 id=\"in的用法\"><a href=\"#in的用法\" class=\"headerlink\" title=\"in的用法\"></a><code>in</code>的用法</h3><blockquote>\n<p>in是用来判断对象或者数组中是否存在某个值的</p>\n</blockquote>\n</li>\n<li>对象判断<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&#x27;博客&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span> <span class=\"keyword\">in</span> obj); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n<li>数组判断<br>先来看一下ES5判断的弊端，以前会使用length属性进行判断，为0表示没有数组元素。但是这并不准确，或者说真实开发中有弊端。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [,,,,,];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr.length); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n上边的代码输出了5，但是数组中其实全是空值，这就是一个坑啊。那用ES6的in就可以解决这个问题。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [,,,,,];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"number\">0</span> <span class=\"keyword\">in</span> arr); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"number\">0</span> <span class=\"keyword\">in</span> arr1) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里的0指的是数组下标位置是否为空。</p>\n</blockquote>\n<h3 id=\"数组遍历用法\"><a href=\"#数组遍历用法\" class=\"headerlink\" title=\"数组遍历用法\"></a>数组遍历用法</h3></li>\n<li><code>forEach</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">val,index</span>)=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,index,val))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>forEach循环的特点是会自动省略为空的数组元素，相当于直接给我们筛空了。当是有时候也会给我们帮倒忙。</p>\n</blockquote>\n</li>\n<li><code>filter</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\">arr.filter(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"built_in\">console</span>.log(x));</span><br></pre></td></tr></table></figure></li>\n<li><code>some</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\">arr.some(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"built_in\">console</span>.log(x));</span><br></pre></td></tr></table></figure></li>\n<li><code>map</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr.map(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"string\">&#x27;wb&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>map在这里起到一个替换的作用</p>\n</blockquote>\n</li>\n</ul>\n<p>数组转换字符串 在开发中我们经常会碰到把数组输出成字符串的形式，我们今天学两种方法，你要注意两种方法的区别</p>\n<ul>\n<li><p><code>join</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr.join(<span class=\"string\">&#x27;|&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>join()方法就是在数组元素中间，加了一些间隔，开发中很有用处</p>\n</blockquote>\n</li>\n<li><p><code>toString</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr.toString());</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>转换时只是是用逗号隔开了。</p>\n</blockquote>\n<h2 id=\"ES6对象\"><a href=\"#ES6对象\" class=\"headerlink\" title=\"ES6对象\"></a>ES6对象</h2><p>对象对于Javascript是非常重要的。在ES6中对象有了很多新特性。<br>###对象赋值</p>\n<blockquote>\n<p>ES6允许把声明的变量直接赋值给对象</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;i100&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> skill = <span class=\"string\">&#x27;web&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;name,skill&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj);</span><br></pre></td></tr></table></figure>\n<h2 id=\"对象Key值构建\"><a href=\"#对象Key值构建\" class=\"headerlink\" title=\"对象Key值构建\"></a>对象Key值构建</h2><p>有时候我们会在后台取出key值，而不是我们前台定义好的，这时候我们如何构建我们的key值那。比如我们在后台取了一个key值，然后可以用[ ] 的形式，进行对象的构建。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> key = <span class=\"string\">&#x27;skill&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [key]: <span class=\"string\">&#x27;web&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj.skill);</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义对象方法\"><a href=\"#自定义对象方法\" class=\"headerlink\" title=\"自定义对象方法\"></a>自定义对象方法</h3></li>\n<li><p>对象方法就是把兑现中的属性，用匿名函数的形式编程方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj.add(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure></li>\n<li><p><code>Object.is()</code>对象比较<br>对象的比较方法,以前进行对象值的比较，经常使用===来判断，比如下面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;lisi&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiaoming&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = <span class=\"built_in\">Object</span>.is(obj1,obj2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,res);</span><br></pre></td></tr></table></figure></li>\n<li><p><code>Object.assign()</code>合并对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a=&#123;<span class=\"attr\">a</span>:<span class=\"string\">&#x27;a&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b=&#123;<span class=\"attr\">b</span>:<span class=\"string\">&#x27;b&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c=&#123;<span class=\"attr\">c</span>:<span class=\"string\">&#x27;c&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d=<span class=\"built_in\">Object</span>.assign(a,b,c);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,d);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Symbol在对象的作用\"><a href=\"#Symbol在对象的作用\" class=\"headerlink\" title=\"Symbol在对象的作用\"></a>Symbol在对象的作用</h2><h3 id=\"声明Symbol\"><a href=\"#声明Symbol\" class=\"headerlink\" title=\"声明Symbol\"></a>声明Symbol</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> g = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;i100&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,g);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,g.toString());</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这时候我们仔细看控制台是有区别的，没有toString的是红字，toString的是黑字。</p>\n</blockquote>\n<h3 id=\"Symbol在对象中的应用\"><a href=\"#Symbol在对象中的应用\" class=\"headerlink\" title=\"Symbol在对象中的应用\"></a>Symbol在对象中的应用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i100 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [i100]: <span class=\"string\">&#x27;百里&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj[i100]);</span><br><span class=\"line\">obj[i100]=<span class=\"string\">&#x27;web&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj[i100]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Symbol对象元素的保护作用\"><a href=\"#Symbol对象元素的保护作用\" class=\"headerlink\" title=\"Symbol对象元素的保护作用\"></a>Symbol对象元素的保护作用</h3><blockquote>\n<p>在对象中有很多值，但是循环输出时，并不希望全部输出，那我们就可以使用Symbol进行保护。</p>\n</blockquote>\n</li>\n<li><p>没有进行保护的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&#x27;博客&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj[item]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我不想别人知道我的年龄，这时候我就可以使用Symbol来进行循环保护。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\">obj[age] = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj[item]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Set数据结构\"><a href=\"#Set数据结构\" class=\"headerlink\" title=\"Set数据结构\"></a>Set数据结构</h2><blockquote>\n<p>Set数据结构，注意这里不是数据类型，而是数据结构。它是ES6中新的东西，并且很有用处。Set的数据结构是以数组的形式构建的。</p>\n</blockquote>\n<h3 id=\"Set声明\"><a href=\"#Set声明\" class=\"headerlink\" title=\"Set声明\"></a>Set声明</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr); <span class=\"comment\">// Set(3) &#123;&#x27;i100&#x27;, &#x27;百里&#x27;, &#x27;博客&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Set和Array 的区别是Set不允许内部有重复的值，如果有只显示一个，相当于去重。虽然Set很像数组，但是他不是数组。</p>\n</blockquote>\n<h3 id=\"Set值的增删查\"><a href=\"#Set值的增删查\" class=\"headerlink\" title=\"Set值的增删查\"></a>Set值的增删查</h3></li>\n<li><p>追加add<br>在使用Array的时候，可以用push进行追加值，那Set稍有不同，它用更语义化的add进行追加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.add(<span class=\"string\">&#x27;前端&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr);</span><br></pre></td></tr></table></figure></li>\n<li><p>删除delete</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.delete(<span class=\"string\">&#x27;前端&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr);</span><br></pre></td></tr></table></figure></li>\n<li><p>查找has<br>用has进行值的查找，返回的是true或者false。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.has(<span class=\"string\">&#x27;i100&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>删除clear</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.clear();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr);</span><br></pre></td></tr></table></figure></li>\n<li><p>set的for…of循环</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> setArr) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>size属性<br>size属性可以获取Set值的数量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr.size);</span><br></pre></td></tr></table></figure></li>\n<li><p>forEach循环</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.forEach(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span><span class=\"built_in\">console</span>.log(value));</span><br></pre></td></tr></table></figure>\n<h2 id=\"Map数据结构\"><a href=\"#Map数据结构\" class=\"headerlink\" title=\"Map数据结构\"></a>Map数据结构</h2><p>在一些构建工具中是非常喜欢使用map这种数据结构来进行配置的，因为map是一种灵活，简单的适合一对一查找的数据结构。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&#x27;博客&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj.c);</span><br><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"comment\">// 设置value</span></span><br><span class=\"line\">map.set(obj,<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置key</span></span><br><span class=\"line\">map.set(<span class=\"string\">&#x27;test&#x27;</span>,obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,map);</span><br></pre></td></tr></table></figure>\n<h3 id=\"取值get\"><a href=\"#取值get\" class=\"headerlink\" title=\"取值get\"></a>取值get</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = map.get(obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,res);</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除delete\"><a href=\"#删除delete\" class=\"headerlink\" title=\"删除delete\"></a>删除delete</h3><p>删除delete指定值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.delete(obj)</span><br></pre></td></tr></table></figure>\n<h3 id=\"size属性\"><a href=\"#size属性\" class=\"headerlink\" title=\"size属性\"></a>size属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.size</span><br></pre></td></tr></table></figure>\n<h3 id=\"查找has\"><a href=\"#查找has\" class=\"headerlink\" title=\"查找has\"></a>查找has</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.has(<span class=\"string\">&#x27;i100&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"清除clear\"><a href=\"#清除clear\" class=\"headerlink\" title=\"清除clear\"></a>清除clear</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.clear()</span><br></pre></td></tr></table></figure>\n<p>总结：map在现在开发中已经经常使用，它的灵活性和高效性是我们喜欢的。开发中试着去使用map吧，你一定会喜欢上它的。</p>\n<h2 id=\"用Proxy进行预处理\"><a href=\"#用Proxy进行预处理\" class=\"headerlink\" title=\"用Proxy进行预处理\"></a>用Proxy进行预处理</h2><blockquote>\n<p>钩子函数：当我们在操作一个对象或者方法时会有几种动作，比如：在运行函数前初始化一些数据，在改变对象值后做一些善后处理。这些都算钩子函数，Proxy的存在就可以让我们给函数加上这样的钩子函数，你也可以理解为在执行方法前预处理一些代码。你可以简单的理解为他是函数或者对象的生命周期。 Proxy的应用可以使函数更加强大，业务逻辑更加清楚，而且在编写自己的框架或者通用组件时非常好用</p>\n</blockquote>\n</li>\n</ul>\n<p>回顾定义对象方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj=&#123;</span><br><span class=\"line\">    <span class=\"attr\">add</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val+<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;I am Jspang&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.add(<span class=\"number\">100</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name);</span><br></pre></td></tr></table></figure>\n<h3 id=\"声明Proxy\"><a href=\"#声明Proxy\" class=\"headerlink\" title=\"声明Proxy\"></a>声明Proxy</h3><p>用new的方法对Proxy进行声明。可以看一下声明Proxy的基本形式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;,&#123;&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要注意的是这里是两个花括号，第一个花括号就相当于我们方法的主体，后边的花括号就是Proxy代理处理区域，相当于我们写钩子函数的地方。</p>\n</blockquote>\n<p>现在把上边的obj对象改成我们的Proxy形式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pro = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val + <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;I am i100&#x27;</span></span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, property</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;come in Get&#x27;</span>,target, key, property);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,pro.name);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以在控制台看到结果，先输出了come in Get。相当于在方法调用前的钩子函数</p>\n</blockquote>\n<h3 id=\"get属性\"><a href=\"#get属性\" class=\"headerlink\" title=\"get属性\"></a>get属性</h3><p>get属性是在你得到某对象属性值时预处理的方法，他接受三个参数</p>\n<ul>\n<li>target：得到的目标值</li>\n<li>key：目标的key值，相当于对象的属性</li>\n<li>property：这个不太常用，用法还在研究中。<h3 id=\"set属性\"><a href=\"#set属性\" class=\"headerlink\" title=\"set属性\"></a>set属性</h3>set属性是值你要改变Proxy属性值时，进行的预先处理。它接收四个参数。</li>\n<li>target:目标值。</li>\n<li>key：目标的Key值。</li>\n<li>value：要改变的值。</li>\n<li>receiver：改变前的原始值。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pro = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val + <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;I am i100&#x27;</span></span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, property</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;come in Get&#x27;</span>,target, key, property);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">set</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100-set&#x27;</span>,key,value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[key] = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,pro.name);</span><br><span class=\"line\">pro.name = <span class=\"string\">&#x27;李四&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,pro.name);</span><br></pre></td></tr></table></figure>\n<h3 id=\"apple的使用\"><a href=\"#apple的使用\" class=\"headerlink\" title=\"apple的使用\"></a>apple的使用</h3>apply的作用是调用内部的方法，它使用在方法体是一个匿名函数时。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> twice = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//目标对象，目标对象的上下文对象，目标对象的参数数组</span></span><br><span class=\"line\">  <span class=\"attr\">apply</span>:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target,ctx,args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ctx&quot;</span>,ctx,<span class=\"string\">&quot;args&quot;</span>,args);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.apply(...arguments)*<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span> (<span class=\"params\">left,right</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> left*right;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(sum,twice);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;proxy1&quot;</span>,proxy(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;proxy.call&quot;</span>,proxy.call(<span class=\"literal\">null</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;proxy,apply&quot;</span>,proxy.apply(<span class=\"literal\">null</span>,[<span class=\"number\">7</span>,<span class=\"number\">8</span>]));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;proxy,apply&quot;</span>,<span class=\"built_in\">Reflect</span>.apply(proxy,<span class=\"literal\">null</span>,[<span class=\"number\">7</span>,<span class=\"number\">8</span>]));</span><br></pre></td></tr></table></figure>\n<h2 id=\"promise对象的使用\"><a href=\"#promise对象的使用\" class=\"headerlink\" title=\"promise对象的使用\"></a>promise对象的使用</h2><blockquote>\n<p>ES6中的promise的出现给我们很好的解决了回调地狱的问题，在使用ES5的时候，在多层嵌套回调时，写完的代码层次过多，很难进行维护和二次开发，ES6认识到了这点问题，现在promise的使用，完美解决了这个问题。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"promise基本用法\"><a href=\"#promise基本用法\" class=\"headerlink\" title=\"promise基本用法\"></a>promise基本用法</h3><p>模拟一个多步骤多过程，如在家吃饭需要三个步骤。</p>\n<ul>\n<li>开始做饭</li>\n<li>坐下来吃饭</li>\n<li>🤕️洗碗<br>这个过程是有执行顺序多，确保上一步完成，才能继续下一步操作<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> state = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step1</span>(<span class=\"params\">resolve,reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1.开始做饭&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(state) &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&#x27;做饭完成&#x27;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        reject(<span class=\"string\">&#x27;做饭出错了&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step2</span>(<span class=\"params\">resolve,reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2.开始吃饭&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(state) &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&#x27;吃饭完成&#x27;</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"string\">&#x27;吃饭出错&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step3</span>(<span class=\"params\">resolve,reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;3.开始洗碗&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(state) &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&#x27;洗碗完成&#x27;</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"string\">&#x27;洗碗出错&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(step1).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(step2)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(step3)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"class类的使用\"><a href=\"#class类的使用\" class=\"headerlink\" title=\"class类的使用\"></a>class类的使用</h2><blockquote>\n<p>在ES5中经常使用方法或者对象去模拟类的使用，虽然可以实现功能，但是代码并不优雅，ES6为我们提供了类的使用。需要注意的是我们在写类的时候和ES5中的对象和构造函数要区分开来，不要学混了。</p>\n</blockquote>\n<h3 id=\"类的声明\"><a href=\"#类的声明\" class=\"headerlink\" title=\"类的声明\"></a>类的声明</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">coder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">name</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类的使用\"><a href=\"#类的使用\" class=\"headerlink\" title=\"类的使用\"></a>类的使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Coder</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">name</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">skill</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = <span class=\"built_in\">this</span>.name + val;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;skill&#x27;</span>,res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> i100 = <span class=\"keyword\">new</span> Coder();</span><br><span class=\"line\">i100.name(<span class=\"string\">&#x27;百里&#x27;</span>);</span><br><span class=\"line\">i100.skill(<span class=\"string\">&#x27;web&#x27;</span>);</span><br></pre></td></tr></table></figure>\n这里需要注意的是两个方法中间不要写逗号了，还有这里的this指类本身，还有要注意return 的用法。<h3 id=\"类的传参\"><a href=\"#类的传参\" class=\"headerlink\" title=\"类的传参\"></a>类的传参</h3>在类的参数传递中我们用constructor( )进行传参。传递参数后可以直接使用this.xxx进行调用。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Coder</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">name</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">skill</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = <span class=\"built_in\">this</span>.name + val;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;skill&#x27;</span>,res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">a,b</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.a = b;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.b = b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.a + <span class=\"built_in\">this</span>.b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> i100 = <span class=\"keyword\">new</span> Coder(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,i100);</span><br></pre></td></tr></table></figure>\n用constructor来约定了传递参数，然后用作了一个add方法，把参数相加。<h3 id=\"class的继承\"><a href=\"#class的继承\" class=\"headerlink\" title=\"class的继承\"></a>class的继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">htmler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Coder</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> i100 = <span class=\"keyword\">new</span> htmler();</span><br><span class=\"line\">i100.name(<span class=\"string\">&#x27;百里&#x27;</span>)</span><br></pre></td></tr></table></figure>\n声明一个htmler的新类并继承Coder类，htmler新类里边为空，这时候我们实例化新类，并调用里边的name方法。结果也是可以调用到的。<h2 id=\"模块化操作\"><a href=\"#模块化操作\" class=\"headerlink\" title=\"模块化操作\"></a>模块化操作</h2>在ES5中我们要进行模块华操作需要引入第三方类库，随着前后端分离，前端的业务日渐复杂，ES6为我们增加了模块话操作。模块化操作主要包括两个方面。</li>\n<li>export :负责进行模块化，也是模块的输出。</li>\n<li>import : 负责把模块引，也是模块的引入操作。<h3 id=\"export的用法\"><a href=\"#export的用法\" class=\"headerlink\" title=\"export的用法\"></a>export的用法</h3>export可以让我们把变量，函数，对象进行模块话，提供外部调用接口，让外部进行引用。先来看个最简单的例子，把一个变量模块化。<br>新建一个temp.js文件，然后在文件中输出一个模块变量<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> i00 = <span class=\"string\">&#x27;百里&#x27;</span>;</span><br></pre></td></tr></table></figure>\n然后可以在index.js中以import的形式引入。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;i100&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./temp.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,i100);</span><br></pre></td></tr></table></figure>\n这就是一个最简单的模块的输出和引入。<h3 id=\"as用法\"><a href=\"#as用法\" class=\"headerlink\" title=\"as用法\"></a>as用法</h3>有些时候我们并不想暴露模块里边的变量名称，而给模块起一个更语义话的名称，这时候我们就可以使用as来操作。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;i100&#x27;</span>, b = <span class=\"string\">&#x27;百里&#x27;</span>, c = <span class=\"string\">&#x27;web&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">    x <span class=\"keyword\">as</span> a,</span><br><span class=\"line\">    y <span class=\"keyword\">as</span> b,</span><br><span class=\"line\">    z <span class=\"keyword\">as</span> c</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"export-default的使用\"><a href=\"#export-default的使用\" class=\"headerlink\" title=\"export default的使用\"></a>export default的使用</h3><p>加上default相当是一个默认的入口。在一个文件里export default只能有一个。我们来对比一下export和export default的区别</p>\n<h4 id=\"export\"><a href=\"#export\" class=\"headerlink\" title=\"export\"></a>export</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> i100 = <span class=\"string\">&#x27;百里&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对应的导入方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;i100,add&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./temp&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"export-default\"><a href=\"#export-default\" class=\"headerlink\" title=\"export default\"></a>export default</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">let</span> i100 = <span class=\"string\">&#x27;百里&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>对应的导入方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> str <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./temp&#x27;</span>;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckyaf40s00003esl379keafae","category_id":"ckyaf40s20005esl3hvai6fbb","_id":"ckyaf40s4000desl361cscvx7"},{"post_id":"ckyaf40s10004esl3egpl27lo","category_id":"ckyaf40s4000aesl3df7tezg8","_id":"ckyaf40s5000hesl354nb7cit"},{"post_id":"ckyaf40s30008esl33lrj647i","category_id":"ckyaf40s4000aesl3df7tezg8","_id":"ckyaf40s5000kesl33nzt4v9x"},{"post_id":"ckyaf40s40009esl321w0agzs","category_id":"ckyaf40s5000gesl33hirfvek","_id":"ckyaf40s5000oesl32lgt3wwl"}],"PostTag":[{"post_id":"ckyaf40s00003esl379keafae","tag_id":"ckyaf40s20006esl38v9cbj1f","_id":"ckyaf40s4000cesl380zy65a6"},{"post_id":"ckyaf40s10004esl3egpl27lo","tag_id":"ckyaf40s4000besl31nwcb71s","_id":"ckyaf40s5000jesl30khdbi50"},{"post_id":"ckyaf40s10004esl3egpl27lo","tag_id":"ckyaf40s4000fesl39qq8g2v8","_id":"ckyaf40s5000lesl3fc9o0pla"},{"post_id":"ckyaf40s30008esl33lrj647i","tag_id":"ckyaf40s5000iesl39u7wd0dp","_id":"ckyaf40s5000nesl3dqwk6y1f"},{"post_id":"ckyaf40s40009esl321w0agzs","tag_id":"ckyaf40s5000iesl39u7wd0dp","_id":"ckyaf40s6000pesl38caoc1qa"}],"Tag":[{"name":"github","_id":"ckyaf40s20006esl38v9cbj1f"},{"name":"centos","_id":"ckyaf40s4000besl31nwcb71s"},{"name":"nginx","_id":"ckyaf40s4000fesl39qq8g2v8"},{"name":"优雅","_id":"ckyaf40s5000iesl39u7wd0dp"}]}}