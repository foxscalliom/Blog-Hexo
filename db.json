{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/head.jpg","path":"images/head.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/git常用命令总结.md","hash":"10cbe8e61fbf1ad74264968af5e4b34dbe8c4fa8","modified":1641621256219},{"_id":"source/_posts/hello-world.md","hash":"a36b2ff191c8af027737e44954ad947a8b5d711b","modified":1641620655864},{"_id":"source/_posts/在centos7安装nodejs并升级nodejs版本.md","hash":"fb7aa2bf473331b3123e833a2cd3cb29fa21a9ec","modified":1641620655867},{"_id":"source/tags/index.md","hash":"8bb0bec2aba6aabd07fa9defe489589be42b1552","modified":1641622309895},{"_id":"source/categories/index.md","hash":"92b59b7bad94f90c393ee0d2681648e4f01d1216","modified":1641622372600},{"_id":"source/_posts/如何优雅的使用ES6.md","hash":"4f77d313a92196aab4ce64b2f1f325e8efc1e93e","modified":1641886848742},{"_id":"source/_posts/如何让你的代码更优雅.md","hash":"7f5d711e85469438640ecddd1ec2d626f24a0b5a","modified":1641862590594},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1641605849435},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1641605849436},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1641605849436},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1641605849437},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1641605849439},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1641605849438},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1641605849557},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1641605849442},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1641605849463},{"_id":"themes/next/_config.yml","hash":"9e3db589760ad15f7cb30d50c1ee1d63d81513e0","modified":1641862590596},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1641605849440},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1641605849445},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1641605849446},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1641605849445},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1641605849448},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1641605849447},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1641605849439},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1641605849443},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1641605849449},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1641605849466},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1641605849466},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1641605849465},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1641605849467},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1641605849450},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1641605849449},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1641605849468},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1641605849470},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1641605849469},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1641605849471},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1641605849472},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1641605849472},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1641605849474},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1641605849473},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1641605849475},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1641605849477},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1641605849478},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1641605849476},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1641605849478},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1641605849479},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1641605849481},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1641605849480},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1641605849481},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1641605849483},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1641605849482},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1641605849553},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1641605849553},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1641605849556},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1641605849580},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1641605849555},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1641605849552},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1641605849554},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1641605849456},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1641605849457},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1641605849458},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1641605849459},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1641605849459},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1641605849460},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1641605849461},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1641605849452},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1641605849452},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1641605849462},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1641605849463},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1641605849514},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1641605849514},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1641623891557},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1641605849487},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1641605849454},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1641605849517},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1641605849488},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1641605849453},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c2835ff083d87e661ccc487315191b5f9d437070","modified":1641629397877},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1641605849498},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1641605849521},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1641605849522},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1641605849512},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1641605849559},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1641605849536},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1641605849527},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1641605849572},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1641605849573},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1641605849574},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1641605849540},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1641605849571},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1641605849575},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1641605849501},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1641605849577},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1641605849578},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1641605849577},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1641605849579},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1641605849582},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1641605849581},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1641605849583},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1641605849584},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1641605849541},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1641605849583},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1641605849585},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1641605849485},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1641605849587},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1641605849588},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1641605849586},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1641605849586},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1641605849590},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1641605849806},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1641605849807},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1641605849653},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1641605849771},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1641605849676},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1641605849811},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1641605849809},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1641605849804},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1641605849768},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1641605849815},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1641605849774},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1641605849777},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1641605849780},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1641605849788},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1641605849791},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1641605849785},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1641605849793},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1641605849796},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1641605849799},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1641605849783},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1641605849801},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1641605849519},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1641605849518},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1641605849520},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1641605849520},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1641605849490},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1641605849516},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1641605849491},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1641605849495},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1641605849494},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1641605849817},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1641605849497},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1641605849501},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1641605849496},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1641605849500},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1641605849506},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1641605849524},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1641605849498},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1641605849512},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1641605849526},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1641605849509},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1641605849503},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1641605849525},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1641605849510},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1641605849527},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1641605849504},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1641605849530},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1641605849529},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1641605849509},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1641605849507},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1641605849535},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1641605849506},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1641605849532},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1641605849542},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1641605849534},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1641605849538},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1641605849532},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1641605849543},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1641605849560},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1641605849544},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1641605849562},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1641605849564},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1641605849537},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1641605849565},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1641605849566},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1641605849567},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1641605849561},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1641605849567},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1641605849569},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1641605849570},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1641605849550},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1641605849569},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1641605849535},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1641605849539},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1641605849546},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1641605849533},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1641605849545},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1641605849548},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1641605849551},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1641605849547},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1641605849549},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1641605849672},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1641605849674},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1641605849673},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1641605849675},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1641605849813},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1641605849676},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1641605849593},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1641605849827},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1641605849593},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1641605849594},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1641605849814},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1641605849828},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1641605849636},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1641605849637},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1641605849611},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1641605849644},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1641605849638},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1641605849643},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1641605849656},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1641605849644},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1641605849656},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1641605849645},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1641605849626},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1641605849652},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1641605849658},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1641605849660},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1641605849666},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1641605849626},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1641605849657},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1641605849659},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1641605849668},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1641605849671},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1641605849661},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1641605849662},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1641605849667},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1641605849664},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1641605849821},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1641605849665},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1641605849669},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1641605849663},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1641605849662},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1641605849824},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1641605849596},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1641605849639},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1641605849596},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1641605849597},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1641605849641},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1641605849598},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1641605849599},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1641605849642},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1641605849602},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1641605849601},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1641605849602},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1641605849618},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1641605849640},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1641605849605},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1641605849603},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1641605849608},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1641605849604},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1641605849609},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1641605849612},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1641605849607},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1641605849609},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1641605849606},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1641605849669},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1641605849613},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1641605849614},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1641605849620},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1641605849607},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1641605849622},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1641605849615},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1641605849621},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1641605849625},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1641605849646},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1641605849648},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1641605849624},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1641605849648},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1641605849650},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1641605849621},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1641605849624},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1641605849651},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1641605849649},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1641605849630},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1641605849630},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1641605849631},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1641605849651},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1641605849615},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1641605849610},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1641605849628},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1641605849633},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1641605849629},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1641605849632},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1641605849632},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1641605849635},{"_id":"themes/next/source/images/head.jpg","hash":"0b12831adc0835cd780f14b10b2c761453ca7410","modified":1639961342675},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1641605849825},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1641605849823},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1641605849634},{"_id":"public/atom.xml","hash":"5af1c6114443e1eb947be05d094509832c4e1352","modified":1641895118902},{"_id":"public/content.json","hash":"8bc5380ebeae2e51eaf9d26496b28f42ea705aeb","modified":1641895118902},{"_id":"public/search.xml","hash":"884341b227d3f317027ffa78a43786a648975592","modified":1641895118902},{"_id":"public/tags/index.html","hash":"2ab791b31e11fbe675525d8c9a58d156ac4c0d6a","modified":1641895118902},{"_id":"public/categories/index.html","hash":"f8dd9ca508f47708d5e10b531cc61e2cf51f7b1c","modified":1641895118902},{"_id":"public/archives/index.html","hash":"09f3937233ba38f8bface787104d3db4dd8e3f44","modified":1641895118902},{"_id":"public/archives/2022/index.html","hash":"a99c8a9b3f4cdbf20391dce5639eba249fb1ae99","modified":1641895118902},{"_id":"public/archives/2022/01/index.html","hash":"2cda7abcb6224a7cf4d2b182aea25370722ac808","modified":1641895118902},{"_id":"public/categories/Git/index.html","hash":"ef2fb664d76e1ce6851c10d94def6796660a9273","modified":1641895118902},{"_id":"public/categories/ES6/index.html","hash":"7f9915162c1d740e0423a10cf1f29b43607786d0","modified":1641895118902},{"_id":"public/categories/前端/index.html","hash":"4a8b61052a53dcade0613b545c73c4653609838b","modified":1641895118902},{"_id":"public/tags/github/index.html","hash":"054bdb3fbe90def9561b4bdc37e9813e96ef3819","modified":1641895118902},{"_id":"public/posts/e38dcee3.html","hash":"eebf415c565ebf9457629a8c07ee3b3d60cea209","modified":1641895118902},{"_id":"public/posts/932a8af7.html","hash":"e8bab7f0cadcdeaeee46c5d84c64f95690a74cdc","modified":1641895118902},{"_id":"public/posts/acc3d3b0.html","hash":"019ae12cfeb6121f1ce389f4703e9b0b57d1b360","modified":1641895118902},{"_id":"public/posts/59268fdb.html","hash":"6410399e039df4c25d38b34403a5bcb11982241b","modified":1641895118902},{"_id":"public/posts/4a17b156.html","hash":"5d1c42070d0a442281e4dcd0f7ab41c8fc9f8a7d","modified":1641895118902},{"_id":"public/index.html","hash":"8bdcc2940c15e3acc2b187e09dc2d657f9b7d91c","modified":1641895118902},{"_id":"public/tags/优雅/index.html","hash":"5bf4db7a0f07ee3bcd48c6b0f0154d4a1176f656","modified":1641895118902},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1641895118902},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1641895118902},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1641895118902},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1641895118902},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1641895118902},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1641895118902},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1641895118902},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1641895118902},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1641895118902},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1641895118902},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1641895118902},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1641895118902},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1641895118902},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1641895118902},{"_id":"public/images/head.jpg","hash":"0b12831adc0835cd780f14b10b2c761453ca7410","modified":1641895118902},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1641895118902},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1641895118902},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1641895118902},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1641895118902},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1641895118902},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1641895118902},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1641895118902},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1641895118902},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1641895118902},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1641895118902},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1641895118902},{"_id":"public/css/main.css","hash":"177d136dea0e666e933d7e78e0b79f3a69995e50","modified":1641895118902},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1641895118902},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1641895118902},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1641895118902}],"Category":[{"name":"Git","_id":"cky9xympd00040ovj7nl76vfo"},{"name":"ES6","_id":"cky9xympi00090ovj2i901r6f"},{"name":"前端","_id":"cky9xympj000d0ovj3tr7anqm"}],"Data":[],"Page":[{"title":"tags","date":"2022-01-08T05:50:54.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-01-08 13:50:54\ntype: \"tags\"\n---\n","updated":"2022-01-08T06:11:49.895Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cky9xymp100000ovjgkhd3efn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2022-01-08T05:51:34.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-01-08 13:51:34\ntype: \"categories\"\n---\n","updated":"2022-01-08T06:12:52.600Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cky9xympa00020ovj0by95yxo","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"abbrlink":"acc3d3b0","title":"git常用命令总结","date":"2022-01-07T16:00:00.000Z","_content":"## 新建仓库\n```\necho \"# test\" >> README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin git@github.com:foxscalliom/test.git\ngit push -u origin main\n```\n<!--more-->\n## 拉取仓库\n```\ngit remote add origin git@github.com:foxscalliom/test.git\ngit branch -M main\ngit push -u origin main\n```\n## 不保留本地\n```\ngit reset --hard \ngit pull origin main\n```","source":"_posts/git常用命令总结.md","raw":"---\nabbrlink: acc3d3b0\ntitle: git常用命令总结\ndate: 2022-01-08\ncategories: \n   - Git\ntags: \n   - github  \n---\n## 新建仓库\n```\necho \"# test\" >> README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin git@github.com:foxscalliom/test.git\ngit push -u origin main\n```\n<!--more-->\n## 拉取仓库\n```\ngit remote add origin git@github.com:foxscalliom/test.git\ngit branch -M main\ngit push -u origin main\n```\n## 不保留本地\n```\ngit reset --hard \ngit pull origin main\n```","slug":"git常用命令总结","published":1,"updated":"2022-01-08T05:54:16.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky9xymp700010ovj5tq73mmf","content":"<h2 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;# test&quot; &gt;&gt; README.md</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add README.md</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\">git branch -M main</span><br><span class=\"line\">git remote add origin git@github.com:foxscalliom/test.git</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h2 id=\"拉取仓库\"><a href=\"#拉取仓库\" class=\"headerlink\" title=\"拉取仓库\"></a>拉取仓库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:foxscalliom/test.git</span><br><span class=\"line\">git branch -M main</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n<h2 id=\"不保留本地\"><a href=\"#不保留本地\" class=\"headerlink\" title=\"不保留本地\"></a>不保留本地</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard </span><br><span class=\"line\">git pull origin main</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;# test&quot; &gt;&gt; README.md</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add README.md</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\">git branch -M main</span><br><span class=\"line\">git remote add origin git@github.com:foxscalliom/test.git</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"拉取仓库\"><a href=\"#拉取仓库\" class=\"headerlink\" title=\"拉取仓库\"></a>拉取仓库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:foxscalliom/test.git</span><br><span class=\"line\">git branch -M main</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n<h2 id=\"不保留本地\"><a href=\"#不保留本地\" class=\"headerlink\" title=\"不保留本地\"></a>不保留本地</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard </span><br><span class=\"line\">git pull origin main</span><br></pre></td></tr></table></figure>"},{"title":"Hello World","abbrlink":"4a17b156","date":"2021-12-31T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!--more-->\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\nabbrlink: 4a17b156\ndate: 2022-01-01\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!--more-->\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2022-01-08T05:44:15.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky9xympb00030ovj328l16kq","content":"<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo<i class=\"fa fa-external-link-alt\"></i></span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation<i class=\"fa fa-external-link-alt\"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting<i class=\"fa fa-external-link-alt\"></i></span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment<i class=\"fa fa-external-link-alt\"></i></span></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo<i class=\"fa fa-external-link-alt\"></i></span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation<i class=\"fa fa-external-link-alt\"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting<i class=\"fa fa-external-link-alt\"></i></span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>","more":"<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment<i class=\"fa fa-external-link-alt\"></i></span></p>"},{"title":"在centos7安装nodejs并升级nodejs版本","abbrlink":"59268fdb","date":"2022-01-06T16:00:00.000Z","_content":"## 1. 安装 nodejs\n------------\n\n### 1.1 使用 EPEL 安装\n\nEPEL（Extra Packages for Enterprise Linux）企业版 Linux 的额外软件包，是 Fedora 小组维护的一个软件仓库项目，为 RHEL/CentOS 提供他们默认不提供的软件包。  \n先确认系统是否已经安装了 epel-release 包：\n```\n$ yum info epel-release\n\n```\n<!--more-->\n如果有输出有关 epel-release 的已安装信息，则说明已经安装，如果提示没有安装或可安装，则安装\n\n```\n$ yum install epel-release\n```\n\n安装完后，就可以使用 yum 命令安装 nodejs 了，安装的一般会是 6.x 的版本，并且会将 npm(3.x) 作为依赖包一起安装\n```\n$ sudo yum install nodejs\n```\n\n安装完成后，验证是否正确的安装，`node -v`，如果输出如下版本信息，说明成功安装\n\n```\nv6.13.3\n```\n\n问题来了，现在 nodejs 发的版本比较快，有些新的框架需要 node 的新版本，那如何升级。到现在，node 的最新版本是`10.4.1`，那么，下面介绍如何升级 nodejs\n\n### 1.2 卸载 nodejs\n\n> 注意：这里卸载并非必要步骤。只是提供卸载的方案，请按需操作，不要安装后又删除又进行安装掉进死循环了。\n\n1.2.1 使用 yum 先删除一次\n\n```\nyum remove nodejs npm -y\n```\n\n1.2.2 手动删除残留\n\n*   进入 /usr/local/lib 删除所有 node 和 node_modules 文件夹\n*   进入 /usr/local/include 删除所有 node 和 node_modules 文件夹\n*   检查 ~ 文件夹里面的 \"local\" \"lib\" \"include\" 文件夹，然后删除里面的所有 \"node\" 和 \"node_modules\" 文件夹\n*   可以使用以下命令查找 `$ find ~/ -name node` `$ find ~/ -name node_modules`\n\n1.2.3 进入 /usr/local/bin 删除 node 的可执行文件\n\n*   删除: /usr/local/bin/npm\n*   删除: /usr/local/share/man/man1/node.1\n*   删除: /usr/local/lib/dtrace/node.d\n*   删除: rm -rf /home/[homedir]/.npm\n*   删除: rm -rf /home/root/.npm\n\n## 2. 升级 nodesj\n------------\n\n### 2.1 安装 n\n\nn 是 nodejs 管理工具，是 TJ 写的，Github: [https://github.com/tj/n](https://github.com/tj/n)\n\n```\n$ npm install -g n\n```\n\n### 2.2 安装 nodejs 版本\n\n安装最新版\n\n```\n$ n latest\n```\n\n安装指定版本\n\n```\n$ n 8.11.3  \n```\n\n### 2.3 切换 nodejs 版本\n\n```\n$ n\n```\n\n选择已安装的版本\n\n```\n   node/8.11.3\n   node/10.4.1\n```\n\n查看当前版本`node -v`，下面表示已切换成功\n\n```\nv8.13.3\n```\n\n但问题来了，切换后，查看版本还是原来的 v6.13.3，看下面 **使用 n 切换 nodejs 版本失效的解决办法**\n\n## 3 切换失效的解决办法\n-----------\n\n### 3.1 查看 node 当前安装路径\n\n```\n$ which node\n/usr/local/bin/node #举个例子\n```\n\n### 3.2 修改默认路径\n而 n 默认安装路径是 /usr/local，若你的 node 不是在此路径下，n 切换版本就不能把 bin、lib、include、share 复制该路径中，所以我们必须通过 N_PREFIX 变量来修改 n 的默认 node 安装路径。  \n编辑环境配置文件：\n\n```\n$ vim ~/.bash_profile\n```\n\n### 3.3 将下面两行代码插入到文件末尾：\n\n```\nexport N_PREFIX=/usr/local #node实际安装位置\nexport PATH=$N_PREFIX/bin:$PATH\n```\n\n### 3.4 `:wq`保存退出\n\n### 3.5 执行 source 使修改生效。\n\n```\n$ source ~/.bash_profile\n```\n\n### 3.6 这时候再查看`node -v`发现版本切换成功了。\n","source":"_posts/在centos7安装nodejs并升级nodejs版本.md","raw":"---\ntitle: 在centos7安装nodejs并升级nodejs版本\nabbrlink: 59268fdb\ndate: 2022-01-07\n---\n## 1. 安装 nodejs\n------------\n\n### 1.1 使用 EPEL 安装\n\nEPEL（Extra Packages for Enterprise Linux）企业版 Linux 的额外软件包，是 Fedora 小组维护的一个软件仓库项目，为 RHEL/CentOS 提供他们默认不提供的软件包。  \n先确认系统是否已经安装了 epel-release 包：\n```\n$ yum info epel-release\n\n```\n<!--more-->\n如果有输出有关 epel-release 的已安装信息，则说明已经安装，如果提示没有安装或可安装，则安装\n\n```\n$ yum install epel-release\n```\n\n安装完后，就可以使用 yum 命令安装 nodejs 了，安装的一般会是 6.x 的版本，并且会将 npm(3.x) 作为依赖包一起安装\n```\n$ sudo yum install nodejs\n```\n\n安装完成后，验证是否正确的安装，`node -v`，如果输出如下版本信息，说明成功安装\n\n```\nv6.13.3\n```\n\n问题来了，现在 nodejs 发的版本比较快，有些新的框架需要 node 的新版本，那如何升级。到现在，node 的最新版本是`10.4.1`，那么，下面介绍如何升级 nodejs\n\n### 1.2 卸载 nodejs\n\n> 注意：这里卸载并非必要步骤。只是提供卸载的方案，请按需操作，不要安装后又删除又进行安装掉进死循环了。\n\n1.2.1 使用 yum 先删除一次\n\n```\nyum remove nodejs npm -y\n```\n\n1.2.2 手动删除残留\n\n*   进入 /usr/local/lib 删除所有 node 和 node_modules 文件夹\n*   进入 /usr/local/include 删除所有 node 和 node_modules 文件夹\n*   检查 ~ 文件夹里面的 \"local\" \"lib\" \"include\" 文件夹，然后删除里面的所有 \"node\" 和 \"node_modules\" 文件夹\n*   可以使用以下命令查找 `$ find ~/ -name node` `$ find ~/ -name node_modules`\n\n1.2.3 进入 /usr/local/bin 删除 node 的可执行文件\n\n*   删除: /usr/local/bin/npm\n*   删除: /usr/local/share/man/man1/node.1\n*   删除: /usr/local/lib/dtrace/node.d\n*   删除: rm -rf /home/[homedir]/.npm\n*   删除: rm -rf /home/root/.npm\n\n## 2. 升级 nodesj\n------------\n\n### 2.1 安装 n\n\nn 是 nodejs 管理工具，是 TJ 写的，Github: [https://github.com/tj/n](https://github.com/tj/n)\n\n```\n$ npm install -g n\n```\n\n### 2.2 安装 nodejs 版本\n\n安装最新版\n\n```\n$ n latest\n```\n\n安装指定版本\n\n```\n$ n 8.11.3  \n```\n\n### 2.3 切换 nodejs 版本\n\n```\n$ n\n```\n\n选择已安装的版本\n\n```\n   node/8.11.3\n   node/10.4.1\n```\n\n查看当前版本`node -v`，下面表示已切换成功\n\n```\nv8.13.3\n```\n\n但问题来了，切换后，查看版本还是原来的 v6.13.3，看下面 **使用 n 切换 nodejs 版本失效的解决办法**\n\n## 3 切换失效的解决办法\n-----------\n\n### 3.1 查看 node 当前安装路径\n\n```\n$ which node\n/usr/local/bin/node #举个例子\n```\n\n### 3.2 修改默认路径\n而 n 默认安装路径是 /usr/local，若你的 node 不是在此路径下，n 切换版本就不能把 bin、lib、include、share 复制该路径中，所以我们必须通过 N_PREFIX 变量来修改 n 的默认 node 安装路径。  \n编辑环境配置文件：\n\n```\n$ vim ~/.bash_profile\n```\n\n### 3.3 将下面两行代码插入到文件末尾：\n\n```\nexport N_PREFIX=/usr/local #node实际安装位置\nexport PATH=$N_PREFIX/bin:$PATH\n```\n\n### 3.4 `:wq`保存退出\n\n### 3.5 执行 source 使修改生效。\n\n```\n$ source ~/.bash_profile\n```\n\n### 3.6 这时候再查看`node -v`发现版本切换成功了。\n","slug":"在centos7安装nodejs并升级nodejs版本","published":1,"updated":"2022-01-08T05:44:15.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky9xympf00060ovjew9wd8mu","content":"<h2 id=\"1-安装-nodejs\"><a href=\"#1-安装-nodejs\" class=\"headerlink\" title=\"1. 安装 nodejs\"></a>1. 安装 nodejs</h2><hr>\n<h3 id=\"1-1-使用-EPEL-安装\"><a href=\"#1-1-使用-EPEL-安装\" class=\"headerlink\" title=\"1.1 使用 EPEL 安装\"></a>1.1 使用 EPEL 安装</h3><p>EPEL（Extra Packages for Enterprise Linux）企业版 Linux 的额外软件包，是 Fedora 小组维护的一个软件仓库项目，为 RHEL/CentOS 提供他们默认不提供的软件包。<br>先确认系统是否已经安装了 epel-release 包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum info epel-release</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>如果有输出有关 epel-release 的已安装信息，则说明已经安装，如果提示没有安装或可安装，则安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install epel-release</span><br></pre></td></tr></table></figure>\n\n<p>安装完后，就可以使用 yum 命令安装 nodejs 了，安装的一般会是 6.x 的版本，并且会将 npm(3.x) 作为依赖包一起安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install nodejs</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，验证是否正确的安装，<code>node -v</code>，如果输出如下版本信息，说明成功安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v6.13.3</span><br></pre></td></tr></table></figure>\n\n<p>问题来了，现在 nodejs 发的版本比较快，有些新的框架需要 node 的新版本，那如何升级。到现在，node 的最新版本是<code>10.4.1</code>，那么，下面介绍如何升级 nodejs</p>\n<h3 id=\"1-2-卸载-nodejs\"><a href=\"#1-2-卸载-nodejs\" class=\"headerlink\" title=\"1.2 卸载 nodejs\"></a>1.2 卸载 nodejs</h3><blockquote>\n<p>注意：这里卸载并非必要步骤。只是提供卸载的方案，请按需操作，不要安装后又删除又进行安装掉进死循环了。</p>\n</blockquote>\n<p>1.2.1 使用 yum 先删除一次</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove nodejs npm -y</span><br></pre></td></tr></table></figure>\n\n<p>1.2.2 手动删除残留</p>\n<ul>\n<li>  进入 /usr/local/lib 删除所有 node 和 node_modules 文件夹</li>\n<li>  进入 /usr/local/include 删除所有 node 和 node_modules 文件夹</li>\n<li>  检查 ~ 文件夹里面的 “local” “lib” “include” 文件夹，然后删除里面的所有 “node” 和 “node_modules” 文件夹</li>\n<li>  可以使用以下命令查找 <code>$ find ~/ -name node</code> <code>$ find ~/ -name node_modules</code></li>\n</ul>\n<p>1.2.3 进入 /usr/local/bin 删除 node 的可执行文件</p>\n<ul>\n<li>  删除: /usr/local/bin/npm</li>\n<li>  删除: /usr/local/share/man/man1/node.1</li>\n<li>  删除: /usr/local/lib/dtrace/node.d</li>\n<li>  删除: rm -rf /home/[homedir]/.npm</li>\n<li>  删除: rm -rf /home/root/.npm</li>\n</ul>\n<h2 id=\"2-升级-nodesj\"><a href=\"#2-升级-nodesj\" class=\"headerlink\" title=\"2. 升级 nodesj\"></a>2. 升级 nodesj</h2><hr>\n<h3 id=\"2-1-安装-n\"><a href=\"#2-1-安装-n\" class=\"headerlink\" title=\"2.1 安装 n\"></a>2.1 安装 n</h3><p>n 是 nodejs 管理工具，是 TJ 写的，Github: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RqL24=\">https://github.com/tj/n<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g n</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-安装-nodejs-版本\"><a href=\"#2-2-安装-nodejs-版本\" class=\"headerlink\" title=\"2.2 安装 nodejs 版本\"></a>2.2 安装 nodejs 版本</h3><p>安装最新版</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ n latest</span><br></pre></td></tr></table></figure>\n\n<p>安装指定版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ n 8.11.3  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-切换-nodejs-版本\"><a href=\"#2-3-切换-nodejs-版本\" class=\"headerlink\" title=\"2.3 切换 nodejs 版本\"></a>2.3 切换 nodejs 版本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ n</span><br></pre></td></tr></table></figure>\n\n<p>选择已安装的版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node/8.11.3</span><br><span class=\"line\">node/10.4.1</span><br></pre></td></tr></table></figure>\n\n<p>查看当前版本<code>node -v</code>，下面表示已切换成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v8.13.3</span><br></pre></td></tr></table></figure>\n\n<p>但问题来了，切换后，查看版本还是原来的 v6.13.3，看下面 <strong>使用 n 切换 nodejs 版本失效的解决办法</strong></p>\n<h2 id=\"3-切换失效的解决办法\"><a href=\"#3-切换失效的解决办法\" class=\"headerlink\" title=\"3 切换失效的解决办法\"></a>3 切换失效的解决办法</h2><hr>\n<h3 id=\"3-1-查看-node-当前安装路径\"><a href=\"#3-1-查看-node-当前安装路径\" class=\"headerlink\" title=\"3.1 查看 node 当前安装路径\"></a>3.1 查看 node 当前安装路径</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ which node</span><br><span class=\"line\">/usr/local/bin/node #举个例子</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-修改默认路径\"><a href=\"#3-2-修改默认路径\" class=\"headerlink\" title=\"3.2 修改默认路径\"></a>3.2 修改默认路径</h3><p>而 n 默认安装路径是 /usr/local，若你的 node 不是在此路径下，n 切换版本就不能把 bin、lib、include、share 复制该路径中，所以我们必须通过 N_PREFIX 变量来修改 n 的默认 node 安装路径。<br>编辑环境配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-将下面两行代码插入到文件末尾：\"><a href=\"#3-3-将下面两行代码插入到文件末尾：\" class=\"headerlink\" title=\"3.3 将下面两行代码插入到文件末尾：\"></a>3.3 将下面两行代码插入到文件末尾：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export N_PREFIX=/usr/local #node实际安装位置</span><br><span class=\"line\">export PATH=$N_PREFIX/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-wq保存退出\"><a href=\"#3-4-wq保存退出\" class=\"headerlink\" title=\"3.4 :wq保存退出\"></a>3.4 <code>:wq</code>保存退出</h3><h3 id=\"3-5-执行-source-使修改生效。\"><a href=\"#3-5-执行-source-使修改生效。\" class=\"headerlink\" title=\"3.5 执行 source 使修改生效。\"></a>3.5 执行 source 使修改生效。</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-6-这时候再查看node-v发现版本切换成功了。\"><a href=\"#3-6-这时候再查看node-v发现版本切换成功了。\" class=\"headerlink\" title=\"3.6 这时候再查看node -v发现版本切换成功了。\"></a>3.6 这时候再查看<code>node -v</code>发现版本切换成功了。</h3>","site":{"data":{}},"excerpt":"<h2 id=\"1-安装-nodejs\"><a href=\"#1-安装-nodejs\" class=\"headerlink\" title=\"1. 安装 nodejs\"></a>1. 安装 nodejs</h2><hr>\n<h3 id=\"1-1-使用-EPEL-安装\"><a href=\"#1-1-使用-EPEL-安装\" class=\"headerlink\" title=\"1.1 使用 EPEL 安装\"></a>1.1 使用 EPEL 安装</h3><p>EPEL（Extra Packages for Enterprise Linux）企业版 Linux 的额外软件包，是 Fedora 小组维护的一个软件仓库项目，为 RHEL/CentOS 提供他们默认不提供的软件包。<br>先确认系统是否已经安装了 epel-release 包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum info epel-release</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","more":"<p>如果有输出有关 epel-release 的已安装信息，则说明已经安装，如果提示没有安装或可安装，则安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install epel-release</span><br></pre></td></tr></table></figure>\n\n<p>安装完后，就可以使用 yum 命令安装 nodejs 了，安装的一般会是 6.x 的版本，并且会将 npm(3.x) 作为依赖包一起安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install nodejs</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，验证是否正确的安装，<code>node -v</code>，如果输出如下版本信息，说明成功安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v6.13.3</span><br></pre></td></tr></table></figure>\n\n<p>问题来了，现在 nodejs 发的版本比较快，有些新的框架需要 node 的新版本，那如何升级。到现在，node 的最新版本是<code>10.4.1</code>，那么，下面介绍如何升级 nodejs</p>\n<h3 id=\"1-2-卸载-nodejs\"><a href=\"#1-2-卸载-nodejs\" class=\"headerlink\" title=\"1.2 卸载 nodejs\"></a>1.2 卸载 nodejs</h3><blockquote>\n<p>注意：这里卸载并非必要步骤。只是提供卸载的方案，请按需操作，不要安装后又删除又进行安装掉进死循环了。</p>\n</blockquote>\n<p>1.2.1 使用 yum 先删除一次</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove nodejs npm -y</span><br></pre></td></tr></table></figure>\n\n<p>1.2.2 手动删除残留</p>\n<ul>\n<li>  进入 /usr/local/lib 删除所有 node 和 node_modules 文件夹</li>\n<li>  进入 /usr/local/include 删除所有 node 和 node_modules 文件夹</li>\n<li>  检查 ~ 文件夹里面的 “local” “lib” “include” 文件夹，然后删除里面的所有 “node” 和 “node_modules” 文件夹</li>\n<li>  可以使用以下命令查找 <code>$ find ~/ -name node</code> <code>$ find ~/ -name node_modules</code></li>\n</ul>\n<p>1.2.3 进入 /usr/local/bin 删除 node 的可执行文件</p>\n<ul>\n<li>  删除: /usr/local/bin/npm</li>\n<li>  删除: /usr/local/share/man/man1/node.1</li>\n<li>  删除: /usr/local/lib/dtrace/node.d</li>\n<li>  删除: rm -rf /home/[homedir]/.npm</li>\n<li>  删除: rm -rf /home/root/.npm</li>\n</ul>\n<h2 id=\"2-升级-nodesj\"><a href=\"#2-升级-nodesj\" class=\"headerlink\" title=\"2. 升级 nodesj\"></a>2. 升级 nodesj</h2><hr>\n<h3 id=\"2-1-安装-n\"><a href=\"#2-1-安装-n\" class=\"headerlink\" title=\"2.1 安装 n\"></a>2.1 安装 n</h3><p>n 是 nodejs 管理工具，是 TJ 写的，Github: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RqL24=\">https://github.com/tj/n<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g n</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-安装-nodejs-版本\"><a href=\"#2-2-安装-nodejs-版本\" class=\"headerlink\" title=\"2.2 安装 nodejs 版本\"></a>2.2 安装 nodejs 版本</h3><p>安装最新版</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ n latest</span><br></pre></td></tr></table></figure>\n\n<p>安装指定版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ n 8.11.3  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-切换-nodejs-版本\"><a href=\"#2-3-切换-nodejs-版本\" class=\"headerlink\" title=\"2.3 切换 nodejs 版本\"></a>2.3 切换 nodejs 版本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ n</span><br></pre></td></tr></table></figure>\n\n<p>选择已安装的版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node/8.11.3</span><br><span class=\"line\">node/10.4.1</span><br></pre></td></tr></table></figure>\n\n<p>查看当前版本<code>node -v</code>，下面表示已切换成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v8.13.3</span><br></pre></td></tr></table></figure>\n\n<p>但问题来了，切换后，查看版本还是原来的 v6.13.3，看下面 <strong>使用 n 切换 nodejs 版本失效的解决办法</strong></p>\n<h2 id=\"3-切换失效的解决办法\"><a href=\"#3-切换失效的解决办法\" class=\"headerlink\" title=\"3 切换失效的解决办法\"></a>3 切换失效的解决办法</h2><hr>\n<h3 id=\"3-1-查看-node-当前安装路径\"><a href=\"#3-1-查看-node-当前安装路径\" class=\"headerlink\" title=\"3.1 查看 node 当前安装路径\"></a>3.1 查看 node 当前安装路径</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ which node</span><br><span class=\"line\">/usr/local/bin/node #举个例子</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-修改默认路径\"><a href=\"#3-2-修改默认路径\" class=\"headerlink\" title=\"3.2 修改默认路径\"></a>3.2 修改默认路径</h3><p>而 n 默认安装路径是 /usr/local，若你的 node 不是在此路径下，n 切换版本就不能把 bin、lib、include、share 复制该路径中，所以我们必须通过 N_PREFIX 变量来修改 n 的默认 node 安装路径。<br>编辑环境配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-将下面两行代码插入到文件末尾：\"><a href=\"#3-3-将下面两行代码插入到文件末尾：\" class=\"headerlink\" title=\"3.3 将下面两行代码插入到文件末尾：\"></a>3.3 将下面两行代码插入到文件末尾：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export N_PREFIX=/usr/local #node实际安装位置</span><br><span class=\"line\">export PATH=$N_PREFIX/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-wq保存退出\"><a href=\"#3-4-wq保存退出\" class=\"headerlink\" title=\"3.4 :wq保存退出\"></a>3.4 <code>:wq</code>保存退出</h3><h3 id=\"3-5-执行-source-使修改生效。\"><a href=\"#3-5-执行-source-使修改生效。\" class=\"headerlink\" title=\"3.5 执行 source 使修改生效。\"></a>3.5 执行 source 使修改生效。</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-6-这时候再查看node-v发现版本切换成功了。\"><a href=\"#3-6-这时候再查看node-v发现版本切换成功了。\" class=\"headerlink\" title=\"3.6 这时候再查看node -v发现版本切换成功了。\"></a>3.6 这时候再查看<code>node -v</code>发现版本切换成功了。</h3>"},{"title":"如何优雅的使用ES6","date":"2022-01-11T00:58:45.000Z","_content":"## 解构赋值\n### 解构的默认值\nundefined不支持，null相当于有值，但值为null\n```js\nlet [foo = true] = [];\nconsole.log('log',foo)\nlet [a,b=\"i100\"]=['百里']\nconsole.log(a+b); //控制台显示“百里i100”\n```\n> 注意：对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\n### 圆括号的使用\n在解构之前定义了变量在解构会报错，解决方法是在整体的外边加一个括号\n```js\nlet foo;\n({foo} = {foo: 'i100'});\nconsole.log('log',foo);\n```\n### 字符串解构\n```js\nconst [a,b,c,d] = 'test'\nconsole.log('log',a,b,c,d) // t,e,s,t\n```\n## 扩展与rest运算符\n### 对象扩展运算符\n编写一个方法，允许入参是不确定的\n```js\nfunction i100 (...arg) {\n  console.log('log',arg[0],arg[1])\n}\ni100(1,2,3)\n```\n### 扩展运算符用处\n声明2个数组arr1，arr2，把arr1赋值给arr2，然后改变arr2的值发现arr1的值也变了，这是对内存堆栈的引用，不是真正的赋值\n```js\nlet arr1 = ['www','i100','xyz'];\nlet arr2 = arr1;\nconsole.log('log',arr2)\narr2.push('add')\nconsole.log('i100',arr1)\n```\n> 我们可以利用扩展运算符\n```js\nlet arr2 = [...arr1]\n```\n### rest运算符\n与对象扩展运算符有相似之处\n```js\nfunction i100(first,...rest) {\n  console.log('i100',resr.length)\n}\ni100(0,1,2,3)\n```\n## 模板字符串\n### 简单使用\n```js\nlet i100 = '百里';\nlet blog = `这是${i100}的博客`\n```\n### 对运算的支持\n```js\nlet a=1;\nlet b=2;\nlet sum = `${a+b}`\n```\n### 字符串查询\n- 查询全部\n```js\nlet res = blog.includes(i100)\n```\n- 查询开头\n```js\nlet res = blog.startsWith(i100)\n```\n- 查询结尾\n```js\nlet res = blog.endsWith(i100)\n```\n## 新增数组知识\n### JSON格式转换\n特殊的json格式都可以轻松使用ES6的语法转变成数组\n```js\nlet json = {\n  '0': 'i100',\n  '1': '百里',\n  '2': '博客',\n  length: 3\n}\nlet arr = Array.from(json)\nconsole.log('i100',arr)\n```\n### Array.of()方法\n它负责把一堆文本或者变量转换成数组。\n```js\nlet arr = Array.of(1,2,3,4)\nconsole.log('i100',arr)\n```\n### find()实例方法\nfind方法是从数组中查找。在find方法中我们需要传入一个匿名函数，函数需要传入三个参数：\n- value：表示当前查找的值。\n- index：表示当前查找的数组索引。\n- arr：表示当前数组。\n在函数中如果找到符合条件的数组元素就进行return，并停止查找。\n```js\nlet arr = [1,2,3,4,5];\nlet res = arr.find(function(value, index, arr) { \n  return value > 2;\n})\n```\n### fill()实例方法\nfill()也是一个实例方法，它的作用是把数组进行填充，它接收三个参数，第一个参数是填充的变量，第二个是开始填充的位置，第三个是填充到的位置。\n```js\nlet arr = [1,2,3,4,5];\narr.fill('i100',2,3)\n// 上边的代码是把数组从第二位到第三位用i100进行填充。\n```\n### 数组的遍历\n- for...of循环\n这种形式比ES5的for循环要简单而且高效。先来看一个最简单的for…of循环\n```js\nlet arr = ['i100','百里','博客'];\nfor (let item of arr) {\n  console.log('i100',item);\n}\n```\nfor…of数组索引:有时候开发中是需要数组的索引的，那我们可以使用下面的代码输出数组索引\n```js\nlet arr = ['i100','百里','博客'];\nfor (let index of arr.keys()) {\n  console.log('i100',index);\n}\n```\n同时输出数组的内容和索引：我们用entries()这个实例方法，配合我们的for…of循环就可以同时输出内容和索引了。\n```js\nlet arr = ['i100','百里','博客'];\nfor (let [index,val] of arr.entries()) {\n  console.log('i100',index+':'+val)\n}\n```\n### entries实例方法\nentries()实例方式生成的是Iterator形式的数组，那这种形式的好处就是可以让我们在需要时用next()手动跳转到下一个值。\n```js\nlet arr = ['i100','百里','博客'];\nlet list = arr.entries();\nconsole.log('i100-1',list.next().value);\nconsole.log('i100-2',list.next().value);\nconsole.log('i100-3',list.next().value);\n```\n## 箭头函数和扩展\n### 默认值\n```js\nfunction add(a,b=1) {\n  return a+b;\n}\n\nconsole.log('i100',add(1));\n```\n### 主动抛出错误\n```js\nfunction add(a,b=1) {\n  if(a==0) {\n    throw new Error('This is error')\n  }\n  return a+b;\n}\nconsole.log('i100',add(0))\n```\n### 箭头函数\n箭头函数中不可加new，也就是说箭头函数不能当构造函数进行使用\n```js\nlet add = (a,b=1) => {\n  return a+b;\n}\n  console.log('i100',add(1))\n```\n## 函数与数组的补漏\n### 对象的函数解构\n```js\nlet json = {\n  a: 'i100',\n  b: '百里',\n  c: '博客'\n}\nfunction fun({a,b='test'}) {\n  console.log('i100',a,b)\n}\nfun(json)\n```\n## 数组函数解构\n声明一个数组，然后写一个方法，最后用…进行解构赋值。\n```js\nlet arr = ['i100','百里','博客'];\nfunction fun(a,b,c) {\n  console.log('i100',a,b,c)\n}\nfun(...arr)\n```\n### `in`的用法\n> in是用来判断对象或者数组中是否存在某个值的\n- 对象判断\n```js\nlet obj = {\n  a: 'i100',\n  b: '百里',\n  c: '博客'\n}\nconsole.log('i100' in obj); // true\n```\n- 数组判断\n先来看一下ES5判断的弊端，以前会使用length属性进行判断，为0表示没有数组元素。但是这并不准确，或者说真实开发中有弊端。\n```js\nlet arr = [,,,,,];\nconsole.log('i100',arr.length); // 5\n```\n上边的代码输出了5，但是数组中其实全是空值，这就是一个坑啊。那用ES6的in就可以解决这个问题。\n```js\nlet arr = [,,,,,];\nconsole.log('i100',0 in arr); // false\nlet arr1 = ['i100','百里','博客'];\nconsole.log('i100',0 in arr1) // true\n```\n> 这里的0指的是数组下标位置是否为空。\n### 数组遍历用法\n- `forEach`\n```js\nlet arr = ['i100','百里',,'博客'];\narr.forEach((val,index)=>console.log('i100',index,val))\n```\n> forEach循环的特点是会自动省略为空的数组元素，相当于直接给我们筛空了。当是有时候也会给我们帮倒忙。\n- `filter`\n```js\nlet arr = ['i100','百里','博客'];\narr.filter(x=>console.log(x));\n```\n- `some`\n```js\nlet arr = ['i100','百里','博客'];\narr.some(x=>console.log(x));\n```\n- `map`\n```js\nlet arr = ['i100','百里','博客'];\nconsole.log('i100',arr.map(x=>'wb'));\n```\n> map在这里起到一个替换的作用\n\n数组转换字符串 在开发中我们经常会碰到把数组输出成字符串的形式，我们今天学两种方法，你要注意两种方法的区别\n- `join`\n```js\nlet arr = ['i100','百里','博客'];\nconsole.log('i100',arr.join('|'))\n```\n> join()方法就是在数组元素中间，加了一些间隔，开发中很有用处\n- `toString`\n```js\nlet arr = ['i100','百里','博客'];\nconsole.log('i100',arr.toString());\n```\n> 转换时只是是用逗号隔开了。\n## ES6对象\n对象对于Javascript是非常重要的。在ES6中对象有了很多新特性。\n###对象赋值\n> ES6允许把声明的变量直接赋值给对象\n```js\nlet name = 'i100';\nlet skill = 'web';\nlet obj = {name,skill}\nconsole.log('i100',obj);\n```\n## 对象Key值构建\n有时候我们会在后台取出key值，而不是我们前台定义好的，这时候我们如何构建我们的key值那。比如我们在后台取了一个key值，然后可以用[ ] 的形式，进行对象的构建。\n```js\nlet key = 'skill';\nlet obj = {\n  [key]: 'web'\n}\nconsole.log('i100',obj.skill);\n```\n### 自定义对象方法\n- 对象方法就是把兑现中的属性，用匿名函数的形式编程方法\n```js\nlet obj = {\n  add: function(a,b) {\n    return a + b;\n  }\n}\nconsole.log('i100',obj.add(1,2));\n```\n- `Object.is()`对象比较\n对象的比较方法,以前进行对象值的比较，经常使用===来判断，比如下面的代码：\n```js\nlet obj1 = {name:'lisi'};\nlet obj2 = {name:'xiaoming'};\nlet res = Object.is(obj1,obj2);\nconsole.log('i100',res);\n```\n> ===为同值相等，is()为严格相等;\n- `Object.assign()`合并对象\n```js\nlet a={a:'a'}\nlet b={b:'b'}\nlet c={c:'c'}\nlet d=Object.assign(a,b,c);\nconsole.log('i100',d);\n```\n## Symbol在对象的作用\n### 声明Symbol\n```js\nlet g = Symbol('i100');\nconsole.log('i100',g);\nconsole.log('i100',g.toString());\n```\n> 这时候我们仔细看控制台是有区别的，没有toString的是红字，toString的是黑字。\n### Symbol在对象中的应用\n```js\nlet i100 = Symbol();\nlet obj = {\n  [i100]: '百里'\n}\nconsole.log('i100',obj[i100]);\nobj[i100]='web';\nconsole.log('i100',obj[i100]);\n```\n### Symbol对象元素的保护作用\n>在对象中有很多值，但是循环输出时，并不希望全部输出，那我们就可以使用Symbol进行保护。\n\n- 没有进行保护的写法：\n```js\nlet obj = {\n  a: 'i100',\n  b: '百里',\n  c: '博客'\n};\nfor(let item in obj) {\n  console.log('i100',obj[item]);\n}\n```\n现在我不想别人知道我的年龄，这时候我就可以使用Symbol来进行循环保护。\n```js\nlet obj = {\n  a: 'i100',\n  b: '百里',\n};\nlet age = Symbol();\nobj[age] = 18;\nfor(let item in obj) {\n  console.log('i100',obj[item]);\n}\nconsole.log('i100',obj);\n```\n## Set和WeakSet数据结构\n> Set数据结构，注意这里不是数据类型，而是数据结构。它是ES6中新的东西，并且很有用处。Set的数据结构是以数组的形式构建的。\n### Set声明\n```js\nlet setArr = new Set(['i100','百里','博客']);\nconsole.log('i100',setArr); // Set(3) {'i100', '百里', '博客'}\n```\n> Set和Array 的区别是Set不允许内部有重复的值，如果有只显示一个，相当于去重。虽然Set很像数组，但是他不是数组。\n### Set值的增删查\n- 追加add\n在使用Array的时候，可以用push进行追加值，那Set稍有不同，它用更语义化的add进行追加\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.add('前端');\nconsole.log('i100',setArr);\n```\n- 删除delete\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.delete('前端');\nconsole.log('i100',setArr);\n```\n- 查找has\n用has进行值的查找，返回的是true或者false。\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.has('i100');\n```\n- 删除clear\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.clear();\nconsole.log('i100',setArr);\n```\n- set的for...of循环\n```js\nlet setArr = new Set(['i100','百里','博客']);\nfor(let item of setArr) {\n  console.log('i100',item);\n}\n```\n- size属性\nsize属性可以获取Set值的数量\n```js\nlet setArr = new Set(['i100','百里','博客']);\nconsole.log('i100',setArr.size);\n```\n- forEach循环\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.forEach((value)=>console.log(value));\n```\n## Map数据结构\n在一些构建工具中是非常喜欢使用map这种数据结构来进行配置的，因为map是一种灵活，简单的适合一对一查找的数据结构。\n```js\nlet obj = {\n  a: 'i100',\n  b: '百里',\n  c: '博客'\n};\nconsole.log('i100',obj.c);\nlet map = new Map();\n// 设置value\nmap.set(obj,'test');\n// 设置key\nmap.set('test',obj);\nconsole.log('i100',map);\n```\n### 取值get\n```js\nlet res = map.get(obj);\nconsole.log('i100',res);\n```\n### 删除delete\n删除delete指定值：\n```js\nmap.delete(obj)\n```\n### size属性\n```js\nmap.size\n```\n### 查找has\n```js\nmap.has('i100');\n```\n### 清除clear\n```js\nmap.clear()\n```\n总结：map在现在开发中已经经常使用，它的灵活性和高效性是我们喜欢的。开发中试着去使用map吧，你一定会喜欢上它的。\n## 用Proxy进行预处理\n>钩子函数：当我们在操作一个对象或者方法时会有几种动作，比如：在运行函数前初始化一些数据，在改变对象值后做一些善后处理。这些都算钩子函数，Proxy的存在就可以让我们给函数加上这样的钩子函数，你也可以理解为在执行方法前预处理一些代码。你可以简单的理解为他是函数或者对象的生命周期。 Proxy的应用可以使函数更加强大，业务逻辑更加清楚，而且在编写自己的框架或者通用组件时非常好用\n\n回顾定义对象方法\n```js\nvar obj={\n    add:function(val){\n        return val+10;\n    },\n    name:'I am Jspang'\n\n};\nconsole.log(obj.add(100));\nconsole.log(obj.name);\n```\n### 声明Proxy\n用new的方法对Proxy进行声明。可以看一下声明Proxy的基本形式。\n```js\nnew Proxy({},{});\n```\n> 需要注意的是这里是两个花括号，第一个花括号就相当于我们方法的主体，后边的花括号就是Proxy代理处理区域，相当于我们写钩子函数的地方。\n\n现在把上边的obj对象改成我们的Proxy形式。\n```js\nlet pro = new Proxy({\n  add: function(val) {\n    return val + 10;\n  },\n  name: 'I am i100'\n},{\n  get:function(target, key, property) {\n    console.log('come in Get',target, key, property);\n    return target[key];\n  }\n})\nconsole.log('i100',pro.name);\n```\n>可以在控制台看到结果，先输出了come in Get。相当于在方法调用前的钩子函数\n### get属性\nget属性是在你得到某对象属性值时预处理的方法，他接受三个参数\n- target：得到的目标值\n- key：目标的key值，相当于对象的属性\n- property：这个不太常用，用法还在研究中。\n### set属性\nset属性是值你要改变Proxy属性值时，进行的预先处理。它接收四个参数。\n- target:目标值。\n- key：目标的Key值。\n- value：要改变的值。\n- receiver：改变前的原始值。\n```js\nlet pro = new Proxy({\n  add: function(val) {\n    return val + 10;\n  },\n  name: 'I am i100'\n},{\n  get:function(target, key, property) {\n    console.log('come in Get',target, key, property);\n    return target[key];\n  },\n  set:function(target, key, value, receiver) {\n    console.log('i100-set',key,value);\n    return target[key] = value;\n  }\n})\nconsole.log('i100',pro.name);\npro.name = '李四';\nconsole.log('i100',pro.name);\n```\n### apple的使用\napply的作用是调用内部的方法，它使用在方法体是一个匿名函数时。\n```js\nvar twice = {\n  //目标对象，目标对象的上下文对象，目标对象的参数数组\n  apply:function (target,ctx,args) {\n    console.log(\"ctx\",ctx,\"args\",args);\n    return Reflect.apply(...arguments)*2;\n  }\n};\nfunction sum (left,right) {\n  return left*right;\n};\nvar proxy = new Proxy(sum,twice);\nconsole.log(\"proxy1\",proxy(1,2));\nconsole.log(\"proxy.call\",proxy.call(null,5,6));\nconsole.log(\"proxy,apply\",proxy.apply(null,[7,8]));\nconsole.log(\"proxy,apply\",Reflect.apply(proxy,null,[7,8]));\n```","source":"_posts/如何优雅的使用ES6.md","raw":"---\ntitle: 如何优雅的使用ES6\ndate: 2022-01-11 08:58:45\ntags: 优雅\ncategories: ES6\n---\n## 解构赋值\n### 解构的默认值\nundefined不支持，null相当于有值，但值为null\n```js\nlet [foo = true] = [];\nconsole.log('log',foo)\nlet [a,b=\"i100\"]=['百里']\nconsole.log(a+b); //控制台显示“百里i100”\n```\n> 注意：对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\n### 圆括号的使用\n在解构之前定义了变量在解构会报错，解决方法是在整体的外边加一个括号\n```js\nlet foo;\n({foo} = {foo: 'i100'});\nconsole.log('log',foo);\n```\n### 字符串解构\n```js\nconst [a,b,c,d] = 'test'\nconsole.log('log',a,b,c,d) // t,e,s,t\n```\n## 扩展与rest运算符\n### 对象扩展运算符\n编写一个方法，允许入参是不确定的\n```js\nfunction i100 (...arg) {\n  console.log('log',arg[0],arg[1])\n}\ni100(1,2,3)\n```\n### 扩展运算符用处\n声明2个数组arr1，arr2，把arr1赋值给arr2，然后改变arr2的值发现arr1的值也变了，这是对内存堆栈的引用，不是真正的赋值\n```js\nlet arr1 = ['www','i100','xyz'];\nlet arr2 = arr1;\nconsole.log('log',arr2)\narr2.push('add')\nconsole.log('i100',arr1)\n```\n> 我们可以利用扩展运算符\n```js\nlet arr2 = [...arr1]\n```\n### rest运算符\n与对象扩展运算符有相似之处\n```js\nfunction i100(first,...rest) {\n  console.log('i100',resr.length)\n}\ni100(0,1,2,3)\n```\n## 模板字符串\n### 简单使用\n```js\nlet i100 = '百里';\nlet blog = `这是${i100}的博客`\n```\n### 对运算的支持\n```js\nlet a=1;\nlet b=2;\nlet sum = `${a+b}`\n```\n### 字符串查询\n- 查询全部\n```js\nlet res = blog.includes(i100)\n```\n- 查询开头\n```js\nlet res = blog.startsWith(i100)\n```\n- 查询结尾\n```js\nlet res = blog.endsWith(i100)\n```\n## 新增数组知识\n### JSON格式转换\n特殊的json格式都可以轻松使用ES6的语法转变成数组\n```js\nlet json = {\n  '0': 'i100',\n  '1': '百里',\n  '2': '博客',\n  length: 3\n}\nlet arr = Array.from(json)\nconsole.log('i100',arr)\n```\n### Array.of()方法\n它负责把一堆文本或者变量转换成数组。\n```js\nlet arr = Array.of(1,2,3,4)\nconsole.log('i100',arr)\n```\n### find()实例方法\nfind方法是从数组中查找。在find方法中我们需要传入一个匿名函数，函数需要传入三个参数：\n- value：表示当前查找的值。\n- index：表示当前查找的数组索引。\n- arr：表示当前数组。\n在函数中如果找到符合条件的数组元素就进行return，并停止查找。\n```js\nlet arr = [1,2,3,4,5];\nlet res = arr.find(function(value, index, arr) { \n  return value > 2;\n})\n```\n### fill()实例方法\nfill()也是一个实例方法，它的作用是把数组进行填充，它接收三个参数，第一个参数是填充的变量，第二个是开始填充的位置，第三个是填充到的位置。\n```js\nlet arr = [1,2,3,4,5];\narr.fill('i100',2,3)\n// 上边的代码是把数组从第二位到第三位用i100进行填充。\n```\n### 数组的遍历\n- for...of循环\n这种形式比ES5的for循环要简单而且高效。先来看一个最简单的for…of循环\n```js\nlet arr = ['i100','百里','博客'];\nfor (let item of arr) {\n  console.log('i100',item);\n}\n```\nfor…of数组索引:有时候开发中是需要数组的索引的，那我们可以使用下面的代码输出数组索引\n```js\nlet arr = ['i100','百里','博客'];\nfor (let index of arr.keys()) {\n  console.log('i100',index);\n}\n```\n同时输出数组的内容和索引：我们用entries()这个实例方法，配合我们的for…of循环就可以同时输出内容和索引了。\n```js\nlet arr = ['i100','百里','博客'];\nfor (let [index,val] of arr.entries()) {\n  console.log('i100',index+':'+val)\n}\n```\n### entries实例方法\nentries()实例方式生成的是Iterator形式的数组，那这种形式的好处就是可以让我们在需要时用next()手动跳转到下一个值。\n```js\nlet arr = ['i100','百里','博客'];\nlet list = arr.entries();\nconsole.log('i100-1',list.next().value);\nconsole.log('i100-2',list.next().value);\nconsole.log('i100-3',list.next().value);\n```\n## 箭头函数和扩展\n### 默认值\n```js\nfunction add(a,b=1) {\n  return a+b;\n}\n\nconsole.log('i100',add(1));\n```\n### 主动抛出错误\n```js\nfunction add(a,b=1) {\n  if(a==0) {\n    throw new Error('This is error')\n  }\n  return a+b;\n}\nconsole.log('i100',add(0))\n```\n### 箭头函数\n箭头函数中不可加new，也就是说箭头函数不能当构造函数进行使用\n```js\nlet add = (a,b=1) => {\n  return a+b;\n}\n  console.log('i100',add(1))\n```\n## 函数与数组的补漏\n### 对象的函数解构\n```js\nlet json = {\n  a: 'i100',\n  b: '百里',\n  c: '博客'\n}\nfunction fun({a,b='test'}) {\n  console.log('i100',a,b)\n}\nfun(json)\n```\n## 数组函数解构\n声明一个数组，然后写一个方法，最后用…进行解构赋值。\n```js\nlet arr = ['i100','百里','博客'];\nfunction fun(a,b,c) {\n  console.log('i100',a,b,c)\n}\nfun(...arr)\n```\n### `in`的用法\n> in是用来判断对象或者数组中是否存在某个值的\n- 对象判断\n```js\nlet obj = {\n  a: 'i100',\n  b: '百里',\n  c: '博客'\n}\nconsole.log('i100' in obj); // true\n```\n- 数组判断\n先来看一下ES5判断的弊端，以前会使用length属性进行判断，为0表示没有数组元素。但是这并不准确，或者说真实开发中有弊端。\n```js\nlet arr = [,,,,,];\nconsole.log('i100',arr.length); // 5\n```\n上边的代码输出了5，但是数组中其实全是空值，这就是一个坑啊。那用ES6的in就可以解决这个问题。\n```js\nlet arr = [,,,,,];\nconsole.log('i100',0 in arr); // false\nlet arr1 = ['i100','百里','博客'];\nconsole.log('i100',0 in arr1) // true\n```\n> 这里的0指的是数组下标位置是否为空。\n### 数组遍历用法\n- `forEach`\n```js\nlet arr = ['i100','百里',,'博客'];\narr.forEach((val,index)=>console.log('i100',index,val))\n```\n> forEach循环的特点是会自动省略为空的数组元素，相当于直接给我们筛空了。当是有时候也会给我们帮倒忙。\n- `filter`\n```js\nlet arr = ['i100','百里','博客'];\narr.filter(x=>console.log(x));\n```\n- `some`\n```js\nlet arr = ['i100','百里','博客'];\narr.some(x=>console.log(x));\n```\n- `map`\n```js\nlet arr = ['i100','百里','博客'];\nconsole.log('i100',arr.map(x=>'wb'));\n```\n> map在这里起到一个替换的作用\n\n数组转换字符串 在开发中我们经常会碰到把数组输出成字符串的形式，我们今天学两种方法，你要注意两种方法的区别\n- `join`\n```js\nlet arr = ['i100','百里','博客'];\nconsole.log('i100',arr.join('|'))\n```\n> join()方法就是在数组元素中间，加了一些间隔，开发中很有用处\n- `toString`\n```js\nlet arr = ['i100','百里','博客'];\nconsole.log('i100',arr.toString());\n```\n> 转换时只是是用逗号隔开了。\n## ES6对象\n对象对于Javascript是非常重要的。在ES6中对象有了很多新特性。\n###对象赋值\n> ES6允许把声明的变量直接赋值给对象\n```js\nlet name = 'i100';\nlet skill = 'web';\nlet obj = {name,skill}\nconsole.log('i100',obj);\n```\n## 对象Key值构建\n有时候我们会在后台取出key值，而不是我们前台定义好的，这时候我们如何构建我们的key值那。比如我们在后台取了一个key值，然后可以用[ ] 的形式，进行对象的构建。\n```js\nlet key = 'skill';\nlet obj = {\n  [key]: 'web'\n}\nconsole.log('i100',obj.skill);\n```\n### 自定义对象方法\n- 对象方法就是把兑现中的属性，用匿名函数的形式编程方法\n```js\nlet obj = {\n  add: function(a,b) {\n    return a + b;\n  }\n}\nconsole.log('i100',obj.add(1,2));\n```\n- `Object.is()`对象比较\n对象的比较方法,以前进行对象值的比较，经常使用===来判断，比如下面的代码：\n```js\nlet obj1 = {name:'lisi'};\nlet obj2 = {name:'xiaoming'};\nlet res = Object.is(obj1,obj2);\nconsole.log('i100',res);\n```\n> ===为同值相等，is()为严格相等;\n- `Object.assign()`合并对象\n```js\nlet a={a:'a'}\nlet b={b:'b'}\nlet c={c:'c'}\nlet d=Object.assign(a,b,c);\nconsole.log('i100',d);\n```\n## Symbol在对象的作用\n### 声明Symbol\n```js\nlet g = Symbol('i100');\nconsole.log('i100',g);\nconsole.log('i100',g.toString());\n```\n> 这时候我们仔细看控制台是有区别的，没有toString的是红字，toString的是黑字。\n### Symbol在对象中的应用\n```js\nlet i100 = Symbol();\nlet obj = {\n  [i100]: '百里'\n}\nconsole.log('i100',obj[i100]);\nobj[i100]='web';\nconsole.log('i100',obj[i100]);\n```\n### Symbol对象元素的保护作用\n>在对象中有很多值，但是循环输出时，并不希望全部输出，那我们就可以使用Symbol进行保护。\n\n- 没有进行保护的写法：\n```js\nlet obj = {\n  a: 'i100',\n  b: '百里',\n  c: '博客'\n};\nfor(let item in obj) {\n  console.log('i100',obj[item]);\n}\n```\n现在我不想别人知道我的年龄，这时候我就可以使用Symbol来进行循环保护。\n```js\nlet obj = {\n  a: 'i100',\n  b: '百里',\n};\nlet age = Symbol();\nobj[age] = 18;\nfor(let item in obj) {\n  console.log('i100',obj[item]);\n}\nconsole.log('i100',obj);\n```\n## Set和WeakSet数据结构\n> Set数据结构，注意这里不是数据类型，而是数据结构。它是ES6中新的东西，并且很有用处。Set的数据结构是以数组的形式构建的。\n### Set声明\n```js\nlet setArr = new Set(['i100','百里','博客']);\nconsole.log('i100',setArr); // Set(3) {'i100', '百里', '博客'}\n```\n> Set和Array 的区别是Set不允许内部有重复的值，如果有只显示一个，相当于去重。虽然Set很像数组，但是他不是数组。\n### Set值的增删查\n- 追加add\n在使用Array的时候，可以用push进行追加值，那Set稍有不同，它用更语义化的add进行追加\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.add('前端');\nconsole.log('i100',setArr);\n```\n- 删除delete\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.delete('前端');\nconsole.log('i100',setArr);\n```\n- 查找has\n用has进行值的查找，返回的是true或者false。\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.has('i100');\n```\n- 删除clear\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.clear();\nconsole.log('i100',setArr);\n```\n- set的for...of循环\n```js\nlet setArr = new Set(['i100','百里','博客']);\nfor(let item of setArr) {\n  console.log('i100',item);\n}\n```\n- size属性\nsize属性可以获取Set值的数量\n```js\nlet setArr = new Set(['i100','百里','博客']);\nconsole.log('i100',setArr.size);\n```\n- forEach循环\n```js\nlet setArr = new Set(['i100','百里','博客']);\nsetArr.forEach((value)=>console.log(value));\n```\n## Map数据结构\n在一些构建工具中是非常喜欢使用map这种数据结构来进行配置的，因为map是一种灵活，简单的适合一对一查找的数据结构。\n```js\nlet obj = {\n  a: 'i100',\n  b: '百里',\n  c: '博客'\n};\nconsole.log('i100',obj.c);\nlet map = new Map();\n// 设置value\nmap.set(obj,'test');\n// 设置key\nmap.set('test',obj);\nconsole.log('i100',map);\n```\n### 取值get\n```js\nlet res = map.get(obj);\nconsole.log('i100',res);\n```\n### 删除delete\n删除delete指定值：\n```js\nmap.delete(obj)\n```\n### size属性\n```js\nmap.size\n```\n### 查找has\n```js\nmap.has('i100');\n```\n### 清除clear\n```js\nmap.clear()\n```\n总结：map在现在开发中已经经常使用，它的灵活性和高效性是我们喜欢的。开发中试着去使用map吧，你一定会喜欢上它的。\n## 用Proxy进行预处理\n>钩子函数：当我们在操作一个对象或者方法时会有几种动作，比如：在运行函数前初始化一些数据，在改变对象值后做一些善后处理。这些都算钩子函数，Proxy的存在就可以让我们给函数加上这样的钩子函数，你也可以理解为在执行方法前预处理一些代码。你可以简单的理解为他是函数或者对象的生命周期。 Proxy的应用可以使函数更加强大，业务逻辑更加清楚，而且在编写自己的框架或者通用组件时非常好用\n\n回顾定义对象方法\n```js\nvar obj={\n    add:function(val){\n        return val+10;\n    },\n    name:'I am Jspang'\n\n};\nconsole.log(obj.add(100));\nconsole.log(obj.name);\n```\n### 声明Proxy\n用new的方法对Proxy进行声明。可以看一下声明Proxy的基本形式。\n```js\nnew Proxy({},{});\n```\n> 需要注意的是这里是两个花括号，第一个花括号就相当于我们方法的主体，后边的花括号就是Proxy代理处理区域，相当于我们写钩子函数的地方。\n\n现在把上边的obj对象改成我们的Proxy形式。\n```js\nlet pro = new Proxy({\n  add: function(val) {\n    return val + 10;\n  },\n  name: 'I am i100'\n},{\n  get:function(target, key, property) {\n    console.log('come in Get',target, key, property);\n    return target[key];\n  }\n})\nconsole.log('i100',pro.name);\n```\n>可以在控制台看到结果，先输出了come in Get。相当于在方法调用前的钩子函数\n### get属性\nget属性是在你得到某对象属性值时预处理的方法，他接受三个参数\n- target：得到的目标值\n- key：目标的key值，相当于对象的属性\n- property：这个不太常用，用法还在研究中。\n### set属性\nset属性是值你要改变Proxy属性值时，进行的预先处理。它接收四个参数。\n- target:目标值。\n- key：目标的Key值。\n- value：要改变的值。\n- receiver：改变前的原始值。\n```js\nlet pro = new Proxy({\n  add: function(val) {\n    return val + 10;\n  },\n  name: 'I am i100'\n},{\n  get:function(target, key, property) {\n    console.log('come in Get',target, key, property);\n    return target[key];\n  },\n  set:function(target, key, value, receiver) {\n    console.log('i100-set',key,value);\n    return target[key] = value;\n  }\n})\nconsole.log('i100',pro.name);\npro.name = '李四';\nconsole.log('i100',pro.name);\n```\n### apple的使用\napply的作用是调用内部的方法，它使用在方法体是一个匿名函数时。\n```js\nvar twice = {\n  //目标对象，目标对象的上下文对象，目标对象的参数数组\n  apply:function (target,ctx,args) {\n    console.log(\"ctx\",ctx,\"args\",args);\n    return Reflect.apply(...arguments)*2;\n  }\n};\nfunction sum (left,right) {\n  return left*right;\n};\nvar proxy = new Proxy(sum,twice);\nconsole.log(\"proxy1\",proxy(1,2));\nconsole.log(\"proxy.call\",proxy.call(null,5,6));\nconsole.log(\"proxy,apply\",proxy.apply(null,[7,8]));\nconsole.log(\"proxy,apply\",Reflect.apply(proxy,null,[7,8]));\n```","slug":"如何优雅的使用ES6","published":1,"updated":"2022-01-11T07:40:48.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky9xympg00070ovj5rlx40q8","content":"<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><h3 id=\"解构的默认值\"><a href=\"#解构的默认值\" class=\"headerlink\" title=\"解构的默认值\"></a>解构的默认值</h3><p>undefined不支持，null相当于有值，但值为null</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo = <span class=\"literal\">true</span>] = [];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,foo)</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,b=<span class=\"string\">&quot;i100&quot;</span>]=[<span class=\"string\">&#x27;百里&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a+b); <span class=\"comment\">//控制台显示“百里i100”</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n</blockquote>\n<h3 id=\"圆括号的使用\"><a href=\"#圆括号的使用\" class=\"headerlink\" title=\"圆括号的使用\"></a>圆括号的使用</h3><p>在解构之前定义了变量在解构会报错，解决方法是在整体的外边加一个括号</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo;</span><br><span class=\"line\">(&#123;foo&#125; = &#123;<span class=\"attr\">foo</span>: <span class=\"string\">&#x27;i100&#x27;</span>&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,foo);</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串解构\"><a href=\"#字符串解构\" class=\"headerlink\" title=\"字符串解构\"></a>字符串解构</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a,b,c,d] = <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,a,b,c,d) <span class=\"comment\">// t,e,s,t</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展与rest运算符\"><a href=\"#扩展与rest运算符\" class=\"headerlink\" title=\"扩展与rest运算符\"></a>扩展与rest运算符</h2><h3 id=\"对象扩展运算符\"><a href=\"#对象扩展运算符\" class=\"headerlink\" title=\"对象扩展运算符\"></a>对象扩展运算符</h3><p>编写一个方法，允许入参是不确定的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">i100</span> (<span class=\"params\">...arg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,arg[<span class=\"number\">0</span>],arg[<span class=\"number\">1</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">i100(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展运算符用处\"><a href=\"#扩展运算符用处\" class=\"headerlink\" title=\"扩展运算符用处\"></a>扩展运算符用处</h3><p>声明2个数组arr1，arr2，把arr1赋值给arr2，然后改变arr2的值发现arr1的值也变了，这是对内存堆栈的引用，不是真正的赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"string\">&#x27;www&#x27;</span>,<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;xyz&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr1;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,arr2)</span><br><span class=\"line\">arr2.push(<span class=\"string\">&#x27;add&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr1)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们可以利用扩展运算符</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [...arr1]</span><br></pre></td></tr></table></figure>\n<h3 id=\"rest运算符\"><a href=\"#rest运算符\" class=\"headerlink\" title=\"rest运算符\"></a>rest运算符</h3><p>与对象扩展运算符有相似之处</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">i100</span>(<span class=\"params\">first,...rest</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,resr.length)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">i100(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><h3 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i100 = <span class=\"string\">&#x27;百里&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> blog = <span class=\"string\">`这是<span class=\"subst\">$&#123;i100&#125;</span>的博客`</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"对运算的支持\"><a href=\"#对运算的支持\" class=\"headerlink\" title=\"对运算的支持\"></a>对运算的支持</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = <span class=\"string\">`<span class=\"subst\">$&#123;a+b&#125;</span>`</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串查询\"><a href=\"#字符串查询\" class=\"headerlink\" title=\"字符串查询\"></a>字符串查询</h3><ul>\n<li>查询全部<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = blog.includes(i100)</span><br></pre></td></tr></table></figure></li>\n<li>查询开头<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = blog.startsWith(i100)</span><br></pre></td></tr></table></figure></li>\n<li>查询结尾<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = blog.endsWith(i100)</span><br></pre></td></tr></table></figure>\n<h2 id=\"新增数组知识\"><a href=\"#新增数组知识\" class=\"headerlink\" title=\"新增数组知识\"></a>新增数组知识</h2><h3 id=\"JSON格式转换\"><a href=\"#JSON格式转换\" class=\"headerlink\" title=\"JSON格式转换\"></a>JSON格式转换</h3>特殊的json格式都可以轻松使用ES6的语法转变成数组<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> json = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;0&#x27;</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;1&#x27;</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;2&#x27;</span>: <span class=\"string\">&#x27;博客&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"built_in\">Array</span>.from(json)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-of-方法\"><a href=\"#Array-of-方法\" class=\"headerlink\" title=\"Array.of()方法\"></a>Array.of()方法</h3>它负责把一堆文本或者变量转换成数组。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr)</span><br></pre></td></tr></table></figure>\n<h3 id=\"find-实例方法\"><a href=\"#find-实例方法\" class=\"headerlink\" title=\"find()实例方法\"></a>find()实例方法</h3>find方法是从数组中查找。在find方法中我们需要传入一个匿名函数，函数需要传入三个参数：</li>\n<li>value：表示当前查找的值。</li>\n<li>index：表示当前查找的数组索引。</li>\n<li>arr：表示当前数组。<br>在函数中如果找到符合条件的数组元素就进行return，并停止查找。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = arr.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"fill-实例方法\"><a href=\"#fill-实例方法\" class=\"headerlink\" title=\"fill()实例方法\"></a>fill()实例方法</h3>fill()也是一个实例方法，它的作用是把数组进行填充，它接收三个参数，第一个参数是填充的变量，第二个是开始填充的位置，第三个是填充到的位置。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">arr.fill(<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// 上边的代码是把数组从第二位到第三位用i100进行填充。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数组的遍历\"><a href=\"#数组的遍历\" class=\"headerlink\" title=\"数组的遍历\"></a>数组的遍历</h3></li>\n<li>for…of循环<br>这种形式比ES5的for循环要简单而且高效。先来看一个最简单的for…of循环<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nfor…of数组索引:有时候开发中是需要数组的索引的，那我们可以使用下面的代码输出数组索引<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> arr.keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,index);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n同时输出数组的内容和索引：我们用entries()这个实例方法，配合我们的for…of循环就可以同时输出内容和索引了。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index,val] <span class=\"keyword\">of</span> arr.entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,index+<span class=\"string\">&#x27;:&#x27;</span>+val)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"entries实例方法\"><a href=\"#entries实例方法\" class=\"headerlink\" title=\"entries实例方法\"></a>entries实例方法</h3>entries()实例方式生成的是Iterator形式的数组，那这种形式的好处就是可以让我们在需要时用next()手动跳转到下一个值。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = arr.entries();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100-1&#x27;</span>,list.next().value);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100-2&#x27;</span>,list.next().value);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100-3&#x27;</span>,list.next().value);</span><br></pre></td></tr></table></figure>\n<h2 id=\"箭头函数和扩展\"><a href=\"#箭头函数和扩展\" class=\"headerlink\" title=\"箭头函数和扩展\"></a>箭头函数和扩展</h2><h3 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b=<span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,add(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"主动抛出错误\"><a href=\"#主动抛出错误\" class=\"headerlink\" title=\"主动抛出错误\"></a>主动抛出错误</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b=<span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;This is error&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,add(<span class=\"number\">0</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3>箭头函数中不可加new，也就是说箭头函数不能当构造函数进行使用<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> add = <span class=\"function\">(<span class=\"params\">a,b=<span class=\"number\">1</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,add(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数与数组的补漏\"><a href=\"#函数与数组的补漏\" class=\"headerlink\" title=\"函数与数组的补漏\"></a>函数与数组的补漏</h2><h3 id=\"对象的函数解构\"><a href=\"#对象的函数解构\" class=\"headerlink\" title=\"对象的函数解构\"></a>对象的函数解构</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> json = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&#x27;博客&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">&#123;a,b=<span class=\"string\">&#x27;test&#x27;</span>&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,a,b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun(json)</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组函数解构\"><a href=\"#数组函数解构\" class=\"headerlink\" title=\"数组函数解构\"></a>数组函数解构</h2>声明一个数组，然后写一个方法，最后用…进行解构赋值。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">a,b,c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,a,b,c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun(...arr)</span><br></pre></td></tr></table></figure>\n<h3 id=\"in的用法\"><a href=\"#in的用法\" class=\"headerlink\" title=\"in的用法\"></a><code>in</code>的用法</h3><blockquote>\n<p>in是用来判断对象或者数组中是否存在某个值的</p>\n</blockquote>\n</li>\n<li>对象判断<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&#x27;博客&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span> <span class=\"keyword\">in</span> obj); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n<li>数组判断<br>先来看一下ES5判断的弊端，以前会使用length属性进行判断，为0表示没有数组元素。但是这并不准确，或者说真实开发中有弊端。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [,,,,,];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr.length); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n上边的代码输出了5，但是数组中其实全是空值，这就是一个坑啊。那用ES6的in就可以解决这个问题。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [,,,,,];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"number\">0</span> <span class=\"keyword\">in</span> arr); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"number\">0</span> <span class=\"keyword\">in</span> arr1) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里的0指的是数组下标位置是否为空。</p>\n</blockquote>\n<h3 id=\"数组遍历用法\"><a href=\"#数组遍历用法\" class=\"headerlink\" title=\"数组遍历用法\"></a>数组遍历用法</h3></li>\n<li><code>forEach</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">val,index</span>)=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,index,val))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>forEach循环的特点是会自动省略为空的数组元素，相当于直接给我们筛空了。当是有时候也会给我们帮倒忙。</p>\n</blockquote>\n</li>\n<li><code>filter</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\">arr.filter(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"built_in\">console</span>.log(x));</span><br></pre></td></tr></table></figure></li>\n<li><code>some</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\">arr.some(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"built_in\">console</span>.log(x));</span><br></pre></td></tr></table></figure></li>\n<li><code>map</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr.map(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"string\">&#x27;wb&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>map在这里起到一个替换的作用</p>\n</blockquote>\n</li>\n</ul>\n<p>数组转换字符串 在开发中我们经常会碰到把数组输出成字符串的形式，我们今天学两种方法，你要注意两种方法的区别</p>\n<ul>\n<li><p><code>join</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr.join(<span class=\"string\">&#x27;|&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>join()方法就是在数组元素中间，加了一些间隔，开发中很有用处</p>\n</blockquote>\n</li>\n<li><p><code>toString</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr.toString());</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>转换时只是是用逗号隔开了。</p>\n</blockquote>\n<h2 id=\"ES6对象\"><a href=\"#ES6对象\" class=\"headerlink\" title=\"ES6对象\"></a>ES6对象</h2><p>对象对于Javascript是非常重要的。在ES6中对象有了很多新特性。<br>###对象赋值</p>\n<blockquote>\n<p>ES6允许把声明的变量直接赋值给对象</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;i100&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> skill = <span class=\"string\">&#x27;web&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;name,skill&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj);</span><br></pre></td></tr></table></figure>\n<h2 id=\"对象Key值构建\"><a href=\"#对象Key值构建\" class=\"headerlink\" title=\"对象Key值构建\"></a>对象Key值构建</h2><p>有时候我们会在后台取出key值，而不是我们前台定义好的，这时候我们如何构建我们的key值那。比如我们在后台取了一个key值，然后可以用[ ] 的形式，进行对象的构建。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> key = <span class=\"string\">&#x27;skill&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [key]: <span class=\"string\">&#x27;web&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj.skill);</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义对象方法\"><a href=\"#自定义对象方法\" class=\"headerlink\" title=\"自定义对象方法\"></a>自定义对象方法</h3></li>\n<li><p>对象方法就是把兑现中的属性，用匿名函数的形式编程方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj.add(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure></li>\n<li><p><code>Object.is()</code>对象比较<br>对象的比较方法,以前进行对象值的比较，经常使用===来判断，比如下面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;lisi&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiaoming&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = <span class=\"built_in\">Object</span>.is(obj1,obj2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,res);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>===为同值相等，is()为严格相等;</p>\n</blockquote>\n</li>\n<li><p><code>Object.assign()</code>合并对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a=&#123;<span class=\"attr\">a</span>:<span class=\"string\">&#x27;a&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b=&#123;<span class=\"attr\">b</span>:<span class=\"string\">&#x27;b&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c=&#123;<span class=\"attr\">c</span>:<span class=\"string\">&#x27;c&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d=<span class=\"built_in\">Object</span>.assign(a,b,c);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,d);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Symbol在对象的作用\"><a href=\"#Symbol在对象的作用\" class=\"headerlink\" title=\"Symbol在对象的作用\"></a>Symbol在对象的作用</h2><h3 id=\"声明Symbol\"><a href=\"#声明Symbol\" class=\"headerlink\" title=\"声明Symbol\"></a>声明Symbol</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> g = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;i100&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,g);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,g.toString());</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这时候我们仔细看控制台是有区别的，没有toString的是红字，toString的是黑字。</p>\n</blockquote>\n<h3 id=\"Symbol在对象中的应用\"><a href=\"#Symbol在对象中的应用\" class=\"headerlink\" title=\"Symbol在对象中的应用\"></a>Symbol在对象中的应用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i100 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [i100]: <span class=\"string\">&#x27;百里&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj[i100]);</span><br><span class=\"line\">obj[i100]=<span class=\"string\">&#x27;web&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj[i100]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Symbol对象元素的保护作用\"><a href=\"#Symbol对象元素的保护作用\" class=\"headerlink\" title=\"Symbol对象元素的保护作用\"></a>Symbol对象元素的保护作用</h3><blockquote>\n<p>在对象中有很多值，但是循环输出时，并不希望全部输出，那我们就可以使用Symbol进行保护。</p>\n</blockquote>\n</li>\n<li><p>没有进行保护的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&#x27;博客&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj[item]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我不想别人知道我的年龄，这时候我就可以使用Symbol来进行循环保护。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\">obj[age] = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj[item]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Set和WeakSet数据结构\"><a href=\"#Set和WeakSet数据结构\" class=\"headerlink\" title=\"Set和WeakSet数据结构\"></a>Set和WeakSet数据结构</h2><blockquote>\n<p>Set数据结构，注意这里不是数据类型，而是数据结构。它是ES6中新的东西，并且很有用处。Set的数据结构是以数组的形式构建的。</p>\n</blockquote>\n<h3 id=\"Set声明\"><a href=\"#Set声明\" class=\"headerlink\" title=\"Set声明\"></a>Set声明</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr); <span class=\"comment\">// Set(3) &#123;&#x27;i100&#x27;, &#x27;百里&#x27;, &#x27;博客&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Set和Array 的区别是Set不允许内部有重复的值，如果有只显示一个，相当于去重。虽然Set很像数组，但是他不是数组。</p>\n</blockquote>\n<h3 id=\"Set值的增删查\"><a href=\"#Set值的增删查\" class=\"headerlink\" title=\"Set值的增删查\"></a>Set值的增删查</h3></li>\n<li><p>追加add<br>在使用Array的时候，可以用push进行追加值，那Set稍有不同，它用更语义化的add进行追加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.add(<span class=\"string\">&#x27;前端&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr);</span><br></pre></td></tr></table></figure></li>\n<li><p>删除delete</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.delete(<span class=\"string\">&#x27;前端&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr);</span><br></pre></td></tr></table></figure></li>\n<li><p>查找has<br>用has进行值的查找，返回的是true或者false。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.has(<span class=\"string\">&#x27;i100&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>删除clear</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.clear();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr);</span><br></pre></td></tr></table></figure></li>\n<li><p>set的for…of循环</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> setArr) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>size属性<br>size属性可以获取Set值的数量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr.size);</span><br></pre></td></tr></table></figure></li>\n<li><p>forEach循环</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.forEach(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span><span class=\"built_in\">console</span>.log(value));</span><br></pre></td></tr></table></figure>\n<h2 id=\"Map数据结构\"><a href=\"#Map数据结构\" class=\"headerlink\" title=\"Map数据结构\"></a>Map数据结构</h2><p>在一些构建工具中是非常喜欢使用map这种数据结构来进行配置的，因为map是一种灵活，简单的适合一对一查找的数据结构。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&#x27;博客&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj.c);</span><br><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"comment\">// 设置value</span></span><br><span class=\"line\">map.set(obj,<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置key</span></span><br><span class=\"line\">map.set(<span class=\"string\">&#x27;test&#x27;</span>,obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,map);</span><br></pre></td></tr></table></figure>\n<h3 id=\"取值get\"><a href=\"#取值get\" class=\"headerlink\" title=\"取值get\"></a>取值get</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = map.get(obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,res);</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除delete\"><a href=\"#删除delete\" class=\"headerlink\" title=\"删除delete\"></a>删除delete</h3><p>删除delete指定值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.delete(obj)</span><br></pre></td></tr></table></figure>\n<h3 id=\"size属性\"><a href=\"#size属性\" class=\"headerlink\" title=\"size属性\"></a>size属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.size</span><br></pre></td></tr></table></figure>\n<h3 id=\"查找has\"><a href=\"#查找has\" class=\"headerlink\" title=\"查找has\"></a>查找has</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.has(<span class=\"string\">&#x27;i100&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"清除clear\"><a href=\"#清除clear\" class=\"headerlink\" title=\"清除clear\"></a>清除clear</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.clear()</span><br></pre></td></tr></table></figure>\n<p>总结：map在现在开发中已经经常使用，它的灵活性和高效性是我们喜欢的。开发中试着去使用map吧，你一定会喜欢上它的。</p>\n<h2 id=\"用Proxy进行预处理\"><a href=\"#用Proxy进行预处理\" class=\"headerlink\" title=\"用Proxy进行预处理\"></a>用Proxy进行预处理</h2><blockquote>\n<p>钩子函数：当我们在操作一个对象或者方法时会有几种动作，比如：在运行函数前初始化一些数据，在改变对象值后做一些善后处理。这些都算钩子函数，Proxy的存在就可以让我们给函数加上这样的钩子函数，你也可以理解为在执行方法前预处理一些代码。你可以简单的理解为他是函数或者对象的生命周期。 Proxy的应用可以使函数更加强大，业务逻辑更加清楚，而且在编写自己的框架或者通用组件时非常好用</p>\n</blockquote>\n</li>\n</ul>\n<p>回顾定义对象方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj=&#123;</span><br><span class=\"line\">    <span class=\"attr\">add</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val+<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;I am Jspang&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.add(<span class=\"number\">100</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name);</span><br></pre></td></tr></table></figure>\n<h3 id=\"声明Proxy\"><a href=\"#声明Proxy\" class=\"headerlink\" title=\"声明Proxy\"></a>声明Proxy</h3><p>用new的方法对Proxy进行声明。可以看一下声明Proxy的基本形式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;,&#123;&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要注意的是这里是两个花括号，第一个花括号就相当于我们方法的主体，后边的花括号就是Proxy代理处理区域，相当于我们写钩子函数的地方。</p>\n</blockquote>\n<p>现在把上边的obj对象改成我们的Proxy形式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pro = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val + <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;I am i100&#x27;</span></span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, property</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;come in Get&#x27;</span>,target, key, property);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,pro.name);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以在控制台看到结果，先输出了come in Get。相当于在方法调用前的钩子函数</p>\n</blockquote>\n<h3 id=\"get属性\"><a href=\"#get属性\" class=\"headerlink\" title=\"get属性\"></a>get属性</h3><p>get属性是在你得到某对象属性值时预处理的方法，他接受三个参数</p>\n<ul>\n<li>target：得到的目标值</li>\n<li>key：目标的key值，相当于对象的属性</li>\n<li>property：这个不太常用，用法还在研究中。<h3 id=\"set属性\"><a href=\"#set属性\" class=\"headerlink\" title=\"set属性\"></a>set属性</h3>set属性是值你要改变Proxy属性值时，进行的预先处理。它接收四个参数。</li>\n<li>target:目标值。</li>\n<li>key：目标的Key值。</li>\n<li>value：要改变的值。</li>\n<li>receiver：改变前的原始值。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pro = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val + <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;I am i100&#x27;</span></span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, property</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;come in Get&#x27;</span>,target, key, property);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">set</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100-set&#x27;</span>,key,value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[key] = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,pro.name);</span><br><span class=\"line\">pro.name = <span class=\"string\">&#x27;李四&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,pro.name);</span><br></pre></td></tr></table></figure>\n<h3 id=\"apple的使用\"><a href=\"#apple的使用\" class=\"headerlink\" title=\"apple的使用\"></a>apple的使用</h3>apply的作用是调用内部的方法，它使用在方法体是一个匿名函数时。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> twice = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//目标对象，目标对象的上下文对象，目标对象的参数数组</span></span><br><span class=\"line\">  <span class=\"attr\">apply</span>:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target,ctx,args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ctx&quot;</span>,ctx,<span class=\"string\">&quot;args&quot;</span>,args);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.apply(...arguments)*<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span> (<span class=\"params\">left,right</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> left*right;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(sum,twice);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;proxy1&quot;</span>,proxy(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;proxy.call&quot;</span>,proxy.call(<span class=\"literal\">null</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;proxy,apply&quot;</span>,proxy.apply(<span class=\"literal\">null</span>,[<span class=\"number\">7</span>,<span class=\"number\">8</span>]));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;proxy,apply&quot;</span>,<span class=\"built_in\">Reflect</span>.apply(proxy,<span class=\"literal\">null</span>,[<span class=\"number\">7</span>,<span class=\"number\">8</span>]));</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"abbrlink":"e38dcee3","excerpt":"","more":"<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><h3 id=\"解构的默认值\"><a href=\"#解构的默认值\" class=\"headerlink\" title=\"解构的默认值\"></a>解构的默认值</h3><p>undefined不支持，null相当于有值，但值为null</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo = <span class=\"literal\">true</span>] = [];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,foo)</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,b=<span class=\"string\">&quot;i100&quot;</span>]=[<span class=\"string\">&#x27;百里&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a+b); <span class=\"comment\">//控制台显示“百里i100”</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n</blockquote>\n<h3 id=\"圆括号的使用\"><a href=\"#圆括号的使用\" class=\"headerlink\" title=\"圆括号的使用\"></a>圆括号的使用</h3><p>在解构之前定义了变量在解构会报错，解决方法是在整体的外边加一个括号</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo;</span><br><span class=\"line\">(&#123;foo&#125; = &#123;<span class=\"attr\">foo</span>: <span class=\"string\">&#x27;i100&#x27;</span>&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,foo);</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串解构\"><a href=\"#字符串解构\" class=\"headerlink\" title=\"字符串解构\"></a>字符串解构</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a,b,c,d] = <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,a,b,c,d) <span class=\"comment\">// t,e,s,t</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展与rest运算符\"><a href=\"#扩展与rest运算符\" class=\"headerlink\" title=\"扩展与rest运算符\"></a>扩展与rest运算符</h2><h3 id=\"对象扩展运算符\"><a href=\"#对象扩展运算符\" class=\"headerlink\" title=\"对象扩展运算符\"></a>对象扩展运算符</h3><p>编写一个方法，允许入参是不确定的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">i100</span> (<span class=\"params\">...arg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,arg[<span class=\"number\">0</span>],arg[<span class=\"number\">1</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">i100(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展运算符用处\"><a href=\"#扩展运算符用处\" class=\"headerlink\" title=\"扩展运算符用处\"></a>扩展运算符用处</h3><p>声明2个数组arr1，arr2，把arr1赋值给arr2，然后改变arr2的值发现arr1的值也变了，这是对内存堆栈的引用，不是真正的赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"string\">&#x27;www&#x27;</span>,<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;xyz&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr1;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;log&#x27;</span>,arr2)</span><br><span class=\"line\">arr2.push(<span class=\"string\">&#x27;add&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr1)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们可以利用扩展运算符</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [...arr1]</span><br></pre></td></tr></table></figure>\n<h3 id=\"rest运算符\"><a href=\"#rest运算符\" class=\"headerlink\" title=\"rest运算符\"></a>rest运算符</h3><p>与对象扩展运算符有相似之处</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">i100</span>(<span class=\"params\">first,...rest</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,resr.length)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">i100(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><h3 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i100 = <span class=\"string\">&#x27;百里&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> blog = <span class=\"string\">`这是<span class=\"subst\">$&#123;i100&#125;</span>的博客`</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"对运算的支持\"><a href=\"#对运算的支持\" class=\"headerlink\" title=\"对运算的支持\"></a>对运算的支持</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = <span class=\"string\">`<span class=\"subst\">$&#123;a+b&#125;</span>`</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串查询\"><a href=\"#字符串查询\" class=\"headerlink\" title=\"字符串查询\"></a>字符串查询</h3><ul>\n<li>查询全部<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = blog.includes(i100)</span><br></pre></td></tr></table></figure></li>\n<li>查询开头<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = blog.startsWith(i100)</span><br></pre></td></tr></table></figure></li>\n<li>查询结尾<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = blog.endsWith(i100)</span><br></pre></td></tr></table></figure>\n<h2 id=\"新增数组知识\"><a href=\"#新增数组知识\" class=\"headerlink\" title=\"新增数组知识\"></a>新增数组知识</h2><h3 id=\"JSON格式转换\"><a href=\"#JSON格式转换\" class=\"headerlink\" title=\"JSON格式转换\"></a>JSON格式转换</h3>特殊的json格式都可以轻松使用ES6的语法转变成数组<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> json = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;0&#x27;</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;1&#x27;</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;2&#x27;</span>: <span class=\"string\">&#x27;博客&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"built_in\">Array</span>.from(json)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-of-方法\"><a href=\"#Array-of-方法\" class=\"headerlink\" title=\"Array.of()方法\"></a>Array.of()方法</h3>它负责把一堆文本或者变量转换成数组。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr)</span><br></pre></td></tr></table></figure>\n<h3 id=\"find-实例方法\"><a href=\"#find-实例方法\" class=\"headerlink\" title=\"find()实例方法\"></a>find()实例方法</h3>find方法是从数组中查找。在find方法中我们需要传入一个匿名函数，函数需要传入三个参数：</li>\n<li>value：表示当前查找的值。</li>\n<li>index：表示当前查找的数组索引。</li>\n<li>arr：表示当前数组。<br>在函数中如果找到符合条件的数组元素就进行return，并停止查找。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = arr.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"fill-实例方法\"><a href=\"#fill-实例方法\" class=\"headerlink\" title=\"fill()实例方法\"></a>fill()实例方法</h3>fill()也是一个实例方法，它的作用是把数组进行填充，它接收三个参数，第一个参数是填充的变量，第二个是开始填充的位置，第三个是填充到的位置。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">arr.fill(<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// 上边的代码是把数组从第二位到第三位用i100进行填充。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数组的遍历\"><a href=\"#数组的遍历\" class=\"headerlink\" title=\"数组的遍历\"></a>数组的遍历</h3></li>\n<li>for…of循环<br>这种形式比ES5的for循环要简单而且高效。先来看一个最简单的for…of循环<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nfor…of数组索引:有时候开发中是需要数组的索引的，那我们可以使用下面的代码输出数组索引<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> arr.keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,index);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n同时输出数组的内容和索引：我们用entries()这个实例方法，配合我们的for…of循环就可以同时输出内容和索引了。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index,val] <span class=\"keyword\">of</span> arr.entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,index+<span class=\"string\">&#x27;:&#x27;</span>+val)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"entries实例方法\"><a href=\"#entries实例方法\" class=\"headerlink\" title=\"entries实例方法\"></a>entries实例方法</h3>entries()实例方式生成的是Iterator形式的数组，那这种形式的好处就是可以让我们在需要时用next()手动跳转到下一个值。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = arr.entries();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100-1&#x27;</span>,list.next().value);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100-2&#x27;</span>,list.next().value);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100-3&#x27;</span>,list.next().value);</span><br></pre></td></tr></table></figure>\n<h2 id=\"箭头函数和扩展\"><a href=\"#箭头函数和扩展\" class=\"headerlink\" title=\"箭头函数和扩展\"></a>箭头函数和扩展</h2><h3 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b=<span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,add(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"主动抛出错误\"><a href=\"#主动抛出错误\" class=\"headerlink\" title=\"主动抛出错误\"></a>主动抛出错误</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b=<span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;This is error&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,add(<span class=\"number\">0</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3>箭头函数中不可加new，也就是说箭头函数不能当构造函数进行使用<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> add = <span class=\"function\">(<span class=\"params\">a,b=<span class=\"number\">1</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,add(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数与数组的补漏\"><a href=\"#函数与数组的补漏\" class=\"headerlink\" title=\"函数与数组的补漏\"></a>函数与数组的补漏</h2><h3 id=\"对象的函数解构\"><a href=\"#对象的函数解构\" class=\"headerlink\" title=\"对象的函数解构\"></a>对象的函数解构</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> json = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&#x27;博客&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">&#123;a,b=<span class=\"string\">&#x27;test&#x27;</span>&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,a,b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun(json)</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组函数解构\"><a href=\"#数组函数解构\" class=\"headerlink\" title=\"数组函数解构\"></a>数组函数解构</h2>声明一个数组，然后写一个方法，最后用…进行解构赋值。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">a,b,c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,a,b,c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun(...arr)</span><br></pre></td></tr></table></figure>\n<h3 id=\"in的用法\"><a href=\"#in的用法\" class=\"headerlink\" title=\"in的用法\"></a><code>in</code>的用法</h3><blockquote>\n<p>in是用来判断对象或者数组中是否存在某个值的</p>\n</blockquote>\n</li>\n<li>对象判断<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&#x27;博客&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span> <span class=\"keyword\">in</span> obj); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n<li>数组判断<br>先来看一下ES5判断的弊端，以前会使用length属性进行判断，为0表示没有数组元素。但是这并不准确，或者说真实开发中有弊端。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [,,,,,];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr.length); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n上边的代码输出了5，但是数组中其实全是空值，这就是一个坑啊。那用ES6的in就可以解决这个问题。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [,,,,,];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"number\">0</span> <span class=\"keyword\">in</span> arr); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"number\">0</span> <span class=\"keyword\">in</span> arr1) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里的0指的是数组下标位置是否为空。</p>\n</blockquote>\n<h3 id=\"数组遍历用法\"><a href=\"#数组遍历用法\" class=\"headerlink\" title=\"数组遍历用法\"></a>数组遍历用法</h3></li>\n<li><code>forEach</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">val,index</span>)=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,index,val))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>forEach循环的特点是会自动省略为空的数组元素，相当于直接给我们筛空了。当是有时候也会给我们帮倒忙。</p>\n</blockquote>\n</li>\n<li><code>filter</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\">arr.filter(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"built_in\">console</span>.log(x));</span><br></pre></td></tr></table></figure></li>\n<li><code>some</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\">arr.some(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"built_in\">console</span>.log(x));</span><br></pre></td></tr></table></figure></li>\n<li><code>map</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr.map(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"string\">&#x27;wb&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>map在这里起到一个替换的作用</p>\n</blockquote>\n</li>\n</ul>\n<p>数组转换字符串 在开发中我们经常会碰到把数组输出成字符串的形式，我们今天学两种方法，你要注意两种方法的区别</p>\n<ul>\n<li><p><code>join</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr.join(<span class=\"string\">&#x27;|&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>join()方法就是在数组元素中间，加了一些间隔，开发中很有用处</p>\n</blockquote>\n</li>\n<li><p><code>toString</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,arr.toString());</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>转换时只是是用逗号隔开了。</p>\n</blockquote>\n<h2 id=\"ES6对象\"><a href=\"#ES6对象\" class=\"headerlink\" title=\"ES6对象\"></a>ES6对象</h2><p>对象对于Javascript是非常重要的。在ES6中对象有了很多新特性。<br>###对象赋值</p>\n<blockquote>\n<p>ES6允许把声明的变量直接赋值给对象</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;i100&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> skill = <span class=\"string\">&#x27;web&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;name,skill&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj);</span><br></pre></td></tr></table></figure>\n<h2 id=\"对象Key值构建\"><a href=\"#对象Key值构建\" class=\"headerlink\" title=\"对象Key值构建\"></a>对象Key值构建</h2><p>有时候我们会在后台取出key值，而不是我们前台定义好的，这时候我们如何构建我们的key值那。比如我们在后台取了一个key值，然后可以用[ ] 的形式，进行对象的构建。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> key = <span class=\"string\">&#x27;skill&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [key]: <span class=\"string\">&#x27;web&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj.skill);</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义对象方法\"><a href=\"#自定义对象方法\" class=\"headerlink\" title=\"自定义对象方法\"></a>自定义对象方法</h3></li>\n<li><p>对象方法就是把兑现中的属性，用匿名函数的形式编程方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj.add(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure></li>\n<li><p><code>Object.is()</code>对象比较<br>对象的比较方法,以前进行对象值的比较，经常使用===来判断，比如下面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;lisi&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiaoming&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = <span class=\"built_in\">Object</span>.is(obj1,obj2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,res);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>===为同值相等，is()为严格相等;</p>\n</blockquote>\n</li>\n<li><p><code>Object.assign()</code>合并对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a=&#123;<span class=\"attr\">a</span>:<span class=\"string\">&#x27;a&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b=&#123;<span class=\"attr\">b</span>:<span class=\"string\">&#x27;b&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c=&#123;<span class=\"attr\">c</span>:<span class=\"string\">&#x27;c&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d=<span class=\"built_in\">Object</span>.assign(a,b,c);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,d);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Symbol在对象的作用\"><a href=\"#Symbol在对象的作用\" class=\"headerlink\" title=\"Symbol在对象的作用\"></a>Symbol在对象的作用</h2><h3 id=\"声明Symbol\"><a href=\"#声明Symbol\" class=\"headerlink\" title=\"声明Symbol\"></a>声明Symbol</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> g = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;i100&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,g);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,g.toString());</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这时候我们仔细看控制台是有区别的，没有toString的是红字，toString的是黑字。</p>\n</blockquote>\n<h3 id=\"Symbol在对象中的应用\"><a href=\"#Symbol在对象中的应用\" class=\"headerlink\" title=\"Symbol在对象中的应用\"></a>Symbol在对象中的应用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i100 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [i100]: <span class=\"string\">&#x27;百里&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj[i100]);</span><br><span class=\"line\">obj[i100]=<span class=\"string\">&#x27;web&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj[i100]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Symbol对象元素的保护作用\"><a href=\"#Symbol对象元素的保护作用\" class=\"headerlink\" title=\"Symbol对象元素的保护作用\"></a>Symbol对象元素的保护作用</h3><blockquote>\n<p>在对象中有很多值，但是循环输出时，并不希望全部输出，那我们就可以使用Symbol进行保护。</p>\n</blockquote>\n</li>\n<li><p>没有进行保护的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&#x27;博客&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj[item]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我不想别人知道我的年龄，这时候我就可以使用Symbol来进行循环保护。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\">obj[age] = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj[item]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Set和WeakSet数据结构\"><a href=\"#Set和WeakSet数据结构\" class=\"headerlink\" title=\"Set和WeakSet数据结构\"></a>Set和WeakSet数据结构</h2><blockquote>\n<p>Set数据结构，注意这里不是数据类型，而是数据结构。它是ES6中新的东西，并且很有用处。Set的数据结构是以数组的形式构建的。</p>\n</blockquote>\n<h3 id=\"Set声明\"><a href=\"#Set声明\" class=\"headerlink\" title=\"Set声明\"></a>Set声明</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr); <span class=\"comment\">// Set(3) &#123;&#x27;i100&#x27;, &#x27;百里&#x27;, &#x27;博客&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Set和Array 的区别是Set不允许内部有重复的值，如果有只显示一个，相当于去重。虽然Set很像数组，但是他不是数组。</p>\n</blockquote>\n<h3 id=\"Set值的增删查\"><a href=\"#Set值的增删查\" class=\"headerlink\" title=\"Set值的增删查\"></a>Set值的增删查</h3></li>\n<li><p>追加add<br>在使用Array的时候，可以用push进行追加值，那Set稍有不同，它用更语义化的add进行追加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.add(<span class=\"string\">&#x27;前端&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr);</span><br></pre></td></tr></table></figure></li>\n<li><p>删除delete</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.delete(<span class=\"string\">&#x27;前端&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr);</span><br></pre></td></tr></table></figure></li>\n<li><p>查找has<br>用has进行值的查找，返回的是true或者false。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.has(<span class=\"string\">&#x27;i100&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>删除clear</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.clear();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr);</span><br></pre></td></tr></table></figure></li>\n<li><p>set的for…of循环</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> setArr) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>size属性<br>size属性可以获取Set值的数量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,setArr.size);</span><br></pre></td></tr></table></figure></li>\n<li><p>forEach循环</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&#x27;i100&#x27;</span>,<span class=\"string\">&#x27;百里&#x27;</span>,<span class=\"string\">&#x27;博客&#x27;</span>]);</span><br><span class=\"line\">setArr.forEach(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span><span class=\"built_in\">console</span>.log(value));</span><br></pre></td></tr></table></figure>\n<h2 id=\"Map数据结构\"><a href=\"#Map数据结构\" class=\"headerlink\" title=\"Map数据结构\"></a>Map数据结构</h2><p>在一些构建工具中是非常喜欢使用map这种数据结构来进行配置的，因为map是一种灵活，简单的适合一对一查找的数据结构。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;i100&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"string\">&#x27;百里&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&#x27;博客&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,obj.c);</span><br><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"comment\">// 设置value</span></span><br><span class=\"line\">map.set(obj,<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置key</span></span><br><span class=\"line\">map.set(<span class=\"string\">&#x27;test&#x27;</span>,obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,map);</span><br></pre></td></tr></table></figure>\n<h3 id=\"取值get\"><a href=\"#取值get\" class=\"headerlink\" title=\"取值get\"></a>取值get</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = map.get(obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,res);</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除delete\"><a href=\"#删除delete\" class=\"headerlink\" title=\"删除delete\"></a>删除delete</h3><p>删除delete指定值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.delete(obj)</span><br></pre></td></tr></table></figure>\n<h3 id=\"size属性\"><a href=\"#size属性\" class=\"headerlink\" title=\"size属性\"></a>size属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.size</span><br></pre></td></tr></table></figure>\n<h3 id=\"查找has\"><a href=\"#查找has\" class=\"headerlink\" title=\"查找has\"></a>查找has</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.has(<span class=\"string\">&#x27;i100&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"清除clear\"><a href=\"#清除clear\" class=\"headerlink\" title=\"清除clear\"></a>清除clear</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.clear()</span><br></pre></td></tr></table></figure>\n<p>总结：map在现在开发中已经经常使用，它的灵活性和高效性是我们喜欢的。开发中试着去使用map吧，你一定会喜欢上它的。</p>\n<h2 id=\"用Proxy进行预处理\"><a href=\"#用Proxy进行预处理\" class=\"headerlink\" title=\"用Proxy进行预处理\"></a>用Proxy进行预处理</h2><blockquote>\n<p>钩子函数：当我们在操作一个对象或者方法时会有几种动作，比如：在运行函数前初始化一些数据，在改变对象值后做一些善后处理。这些都算钩子函数，Proxy的存在就可以让我们给函数加上这样的钩子函数，你也可以理解为在执行方法前预处理一些代码。你可以简单的理解为他是函数或者对象的生命周期。 Proxy的应用可以使函数更加强大，业务逻辑更加清楚，而且在编写自己的框架或者通用组件时非常好用</p>\n</blockquote>\n</li>\n</ul>\n<p>回顾定义对象方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj=&#123;</span><br><span class=\"line\">    <span class=\"attr\">add</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val+<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;I am Jspang&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.add(<span class=\"number\">100</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name);</span><br></pre></td></tr></table></figure>\n<h3 id=\"声明Proxy\"><a href=\"#声明Proxy\" class=\"headerlink\" title=\"声明Proxy\"></a>声明Proxy</h3><p>用new的方法对Proxy进行声明。可以看一下声明Proxy的基本形式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;,&#123;&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要注意的是这里是两个花括号，第一个花括号就相当于我们方法的主体，后边的花括号就是Proxy代理处理区域，相当于我们写钩子函数的地方。</p>\n</blockquote>\n<p>现在把上边的obj对象改成我们的Proxy形式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pro = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val + <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;I am i100&#x27;</span></span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, property</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;come in Get&#x27;</span>,target, key, property);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,pro.name);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以在控制台看到结果，先输出了come in Get。相当于在方法调用前的钩子函数</p>\n</blockquote>\n<h3 id=\"get属性\"><a href=\"#get属性\" class=\"headerlink\" title=\"get属性\"></a>get属性</h3><p>get属性是在你得到某对象属性值时预处理的方法，他接受三个参数</p>\n<ul>\n<li>target：得到的目标值</li>\n<li>key：目标的key值，相当于对象的属性</li>\n<li>property：这个不太常用，用法还在研究中。<h3 id=\"set属性\"><a href=\"#set属性\" class=\"headerlink\" title=\"set属性\"></a>set属性</h3>set属性是值你要改变Proxy属性值时，进行的预先处理。它接收四个参数。</li>\n<li>target:目标值。</li>\n<li>key：目标的Key值。</li>\n<li>value：要改变的值。</li>\n<li>receiver：改变前的原始值。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pro = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val + <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;I am i100&#x27;</span></span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, property</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;come in Get&#x27;</span>,target, key, property);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">set</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100-set&#x27;</span>,key,value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[key] = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,pro.name);</span><br><span class=\"line\">pro.name = <span class=\"string\">&#x27;李四&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i100&#x27;</span>,pro.name);</span><br></pre></td></tr></table></figure>\n<h3 id=\"apple的使用\"><a href=\"#apple的使用\" class=\"headerlink\" title=\"apple的使用\"></a>apple的使用</h3>apply的作用是调用内部的方法，它使用在方法体是一个匿名函数时。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> twice = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//目标对象，目标对象的上下文对象，目标对象的参数数组</span></span><br><span class=\"line\">  <span class=\"attr\">apply</span>:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target,ctx,args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ctx&quot;</span>,ctx,<span class=\"string\">&quot;args&quot;</span>,args);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.apply(...arguments)*<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span> (<span class=\"params\">left,right</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> left*right;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(sum,twice);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;proxy1&quot;</span>,proxy(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;proxy.call&quot;</span>,proxy.call(<span class=\"literal\">null</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;proxy,apply&quot;</span>,proxy.apply(<span class=\"literal\">null</span>,[<span class=\"number\">7</span>,<span class=\"number\">8</span>]));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;proxy,apply&quot;</span>,<span class=\"built_in\">Reflect</span>.apply(proxy,<span class=\"literal\">null</span>,[<span class=\"number\">7</span>,<span class=\"number\">8</span>]));</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"如何让你的代码更优雅","abbrlink":"932a8af7","date":"2022-01-08T08:35:04.000Z","_content":"## 常量赋值\n### 引用数据类型\n包括接口中返回的数据，要做好兜底\n```js\nlet lastName = fullName[1] || ''\nlet propertyValue=Object.attr || 0\n```\n### 指明类型\n要按强类型风格写代码定义变量的时候要指明类型，并且在变量声明之后，不要随意的去更改变量的数据类型\n```js\n// 假设声明三个变量a,b,c\nlet a,b,c; // difference，定义变量时没有指明类型\nlet a = \"\", b = [], c = {}; // good\n```\n## 逻辑判断\n### `==`逻辑判断注意\n`==` 表示只要值相等即为真，`===` 要求不仅值相等，而且也要求类型相同\n使用== 有时候会达不到预期的结果，埋下隐患\n```js\n0  == ''          // true\n0  == '0'         // true\n'' == 0           // true\n'' == '0'         // false\nfalse == '0'        // true\nfalse == 'false'    // false\nfalse == undefined  // false\nfalse == null       // false\nnull == undefined   // true\ntrue == 1           // true\n```\n### 数据类型不确定\n如果变量的数据类型不确定，那咱就手动的转换一下，让它确定\n```js\nlet total = \"6\";\nif(parseInt(total) === 6){} // grace 手动转换一下数据类型\n```\n<!--more-->\n## 数组\n### 数组拷贝\n```js\nlet items=['1','2','3'];\nconst itemCopy = [...items]\n// joining arrays \nconst odd = [1, 3, 5 ]; \nconst nums = [2 ,4 , 6, ...odd]; \n```\n### 变量赋值\n```js\nconst Arr = [1, 2, 3, 4];\nconst [first, second] = Arr; \n```\n## 函数的命名\n 返回布尔值函数应以is/can/has等单词开头，能够让人更直观的了解到这个函数的功能；获取接口中的数据使用get开头进行命名,动作函数要以动词开头。\n```js\n// grace\nlet isSupport = () => {};\nlet canUpdate = () => {};\nlet geUserInfo = (user) => {}\nlet setUserInfo = (user) => {}\n```\n## 优先使用箭头函数\n```js\n// grace 是不是看着更简介优雅了\nlet findAge = (arr, age)=> arr.filter(num => num === age)\n```\n## 函数的入参\n函数的入参，是能够让使用者，在调用这个函数的时候，能够更加的清晰明了的把这个函数所需要的参数传递给函数，不容易出现，参数传递错误（参数的顺序颠倒等）一些低级，而又不好查找的问题\n```js\n// difference\n// true和false啥意思，没有个注释的话，看上去就是一脸懵逼\nfunction getImages(api, true, false); \n// grace\n// 一目了然，知道这些true和false是啥意思\nfunction getImages({\n    imageApi: api,\n    includePageBackground: true, \n    compress: false,\n})\n```\n## 接收参数\n如果函数的的参数是对象，也要优先使用解构赋值，上代码\n```js\n// 假设现在的场景是获取用户的信息上的现用名，和曾用名\n// difference\nfunction getFullName(user) {\n  const firstName = user.firstName;\n  const lastName = user.lastName;\n}\n\n// commonly\nfunction getFullName(obj) {\n  const { firstName, lastName } = obj;\n}\n\n// grace\nfunction getFullName({ firstName, lastName }) {\n}\n\n// grace 给它个默认值\nfunction getFullName({firstName, lastName = '无'}) {\n}\n \n// 觉得参数的名称太长，咱再来个重命名  解构时重命名简化命名\n// grace\nfunction getFullName ({firstName: first, lastName: last}) {\n \n}\n```\n## 参数效验\n更少的嵌套，不满足条件尽早 return，尽可能的减少嵌套，嵌套的层级越少，函数看着越简洁优雅\n```js\nfunction test(name, sex = 1) {\n  // 不满足条件尽早抛出错误\n  if (!name){ \n      throw new Error('没有传递name参数');\n  }\n}\n```\n## 函数的出参\n对象作为返回值，更便于以后添加返回值，以及更改返回值的顺序，相对于数组更加的灵活，更便于扩展\n```js\n// 函数返回多个值，推荐使用对象作为函数的返回值\n// commonly\nfunction processInput(input) {\n  return [left, right, top, bottom];\n}\n\n// grace\nfunction processInput(input) {\n  return { left, right, top, bottom };\n}\nconst { left, right } = processInput(input);\n```\n## 立即执行函数\n立即执行函数也推荐写成箭头函数的形式。首先是因为更简洁，并且也绑定好 this（箭头函数不会去改变this的指向）。\n```js\n(() => {\n  console.log('立即执行函数');\n})();\n```\n## 优先使用函数式编程\n```js\n// difference\nfor(i = 1; i <= 10; i++) {\n   a[i] = a[i] +1;\n}\n// grace\nlet b = a.map(item => ++item) //是不是更简洁了\n```\n## 函数中过多的采用if else\n```js\n// commonly\nif (a === 1) {\n    //...\n} else if (a ===2) {\n   // ...\n} else if (a === 3) {\n    //...\n} else {\n   //...\n}\n    \n// 一般\nswitch(a) {\n    case 1:\n        //....\n    case 2:\n        //....\n    case 3:\n        //....\n    default:\n    //....\n}\n\n// grace ===》》》 Object\nconst fruit = {\n    1: ['1', '11'],\n    2: ['2', '22'],\n    3: ['3', '33']\n };\nlet test = (a) => {\n  return fruit[a] || [];\n}\n\n// grace ===》》》 Map\nconst fruit = newMap()\n  .set('张三', ['张三丰', '张三力'])\n  .set('李四', ['李思维', '李素丽'])\nlet test = (a) => {\n\treturn fruit.get(a) || [];\n}\n\n// grace ===》》》filter\nconst fruits = [\n    { name: '张三', work: 'js' }, \n    { name: '李四', work: 'php' }, \n    { name: '王五', work: 'java' }, \n];\nlet test = (a) => {\n  return fruits.filter(item => item.name === a);\n}\n\n// grace===》》》策略模式\nlet handler = {\n    1: () => {\n        //....\n    },\n    2: () => {\n        //....\n    },\n    3: () => {\n        //....\n    },\n    default: () => {\n        //....\n    }\n}\nhandler[a]() || handler['default']()\n```\n## 温馨小提示\n一个函数完成一个独立的功能，不要一个函数混杂多个功能，在项目开发中有一条非常重要的原则【单一原则】所谓的单一原则就是，一个函数（文件），只做一件事情，在开发当中，没有那个项目是开发完成之后，就结束了。需要不断的更新，维护，那么单一原则，就是为了方便开发，和维护的，不要让一个函数“又当爹，又当妈”，这样代码的耦合性太高了，不好维护\n## 其他\n### 判断数组长度\n```js\n// difference\nif (arr.length !== 0) {\n    //...\n}\n\n// grace\nif (arr.length) {\n    //...\n}\n\n\n// difference\nif (arr.length === 0) {\n    //...\n}\n\n// grace\nif (!arr.length) {\n    //...\n}\n```\n### 逻辑运算符\n```js\nif (a === 1) {\n    b()\n}\n//可以写成\na === 1 && b()\n\nconst arr = [1,2,3];\nif(!arr.length){\n   b()\n }\n//可以写出\narr.length || b()\n\n// &&判断依赖的键是否存在，防止报错'xxx of undfined'\nlet user = {\n    name: 'Symbol卢',\n    age: 18,\n    children: {\n        name: '小Symbol卢'\n    }\n}\nlet childrenName = user.children && user.childre.name\n```\n### 三目运算符\n```js\n// difference\nconst a = '';\nlet b;\nif( a === '' ){\n    b = 'no'\n} else {\n    b = 'ok'\n}\n\nconst a = ''\nlet b = a ? 'no' : 'ok'; // 'ok'\n```\n### 函数定义\n```js\n/**\n * @description: 数据类型的检测的第二种方式\n * @param {any} data 要检测数据类型的变量\n * @return {string} type 返回具体的类型名称【小写】\n */\nexport const isTypeOf = (data) => {\n    return Object.prototype.toString.call(data).replace(/\\[object (\\w+)\\]/, '$1').toLowerCase()\n}\n```\n### 使用 Array.includes 来处理多重 || 条件\n```js\n// difference\nif (a === 1 || a === 2 || a === 3 || a === 4) {\n    //...\n}\n// grace\nlet arr = [1, 2, 3, 4]\nif (arr.includes(a)) {\n    //...\n}\n```\n### 使用 Array.every 和 Array.some 来处理全部/部分满足条件\n```js\n// grace\nconst users = [\n    { name: '张三', sex:1 },\n    { name: '李四', sex:2 },\n    { name: '王五', sex:1 }\n  ];\nfunction test() {\n  // 条件：（简短形式）所有的用户都必须是女\n  const isAllGirl = users.every(item => item.sex === 1);\n  // 条件：至少一个用户是男的\n  const isAnyMan = users.some(item => item.sex === 2);\n}\n```\n### 使用正则表达式\n```js\nconst imgType ='jpg'\nif(imgType === 'jpg' || imgType === 'png' || imgType === 'gif'){\n    console.log('is image')\n}\n// 使用match匹配正则表达式\nif(imgType.match(/.*?(gif|png|jpg)/gi)){\n    console.log('is image')\n}\n```\n### 连接字符串\n```js\nlet name = 'Symbol'\nlet message = 'Hello,I\\'m' + name + 'take care '// 采用传统加号，看着很冗余,且容易出错\n// 艾玛，模板字符香，真想\nlet message = `Hello,I'm ${name} take care `\n```","source":"_posts/如何让你的代码更优雅.md","raw":"---\ntitle: 如何让你的代码更优雅\ntags: 优雅\ncategories: 前端\nabbrlink: 932a8af7\ndate: 2022-01-08 16:35:04\n---\n## 常量赋值\n### 引用数据类型\n包括接口中返回的数据，要做好兜底\n```js\nlet lastName = fullName[1] || ''\nlet propertyValue=Object.attr || 0\n```\n### 指明类型\n要按强类型风格写代码定义变量的时候要指明类型，并且在变量声明之后，不要随意的去更改变量的数据类型\n```js\n// 假设声明三个变量a,b,c\nlet a,b,c; // difference，定义变量时没有指明类型\nlet a = \"\", b = [], c = {}; // good\n```\n## 逻辑判断\n### `==`逻辑判断注意\n`==` 表示只要值相等即为真，`===` 要求不仅值相等，而且也要求类型相同\n使用== 有时候会达不到预期的结果，埋下隐患\n```js\n0  == ''          // true\n0  == '0'         // true\n'' == 0           // true\n'' == '0'         // false\nfalse == '0'        // true\nfalse == 'false'    // false\nfalse == undefined  // false\nfalse == null       // false\nnull == undefined   // true\ntrue == 1           // true\n```\n### 数据类型不确定\n如果变量的数据类型不确定，那咱就手动的转换一下，让它确定\n```js\nlet total = \"6\";\nif(parseInt(total) === 6){} // grace 手动转换一下数据类型\n```\n<!--more-->\n## 数组\n### 数组拷贝\n```js\nlet items=['1','2','3'];\nconst itemCopy = [...items]\n// joining arrays \nconst odd = [1, 3, 5 ]; \nconst nums = [2 ,4 , 6, ...odd]; \n```\n### 变量赋值\n```js\nconst Arr = [1, 2, 3, 4];\nconst [first, second] = Arr; \n```\n## 函数的命名\n 返回布尔值函数应以is/can/has等单词开头，能够让人更直观的了解到这个函数的功能；获取接口中的数据使用get开头进行命名,动作函数要以动词开头。\n```js\n// grace\nlet isSupport = () => {};\nlet canUpdate = () => {};\nlet geUserInfo = (user) => {}\nlet setUserInfo = (user) => {}\n```\n## 优先使用箭头函数\n```js\n// grace 是不是看着更简介优雅了\nlet findAge = (arr, age)=> arr.filter(num => num === age)\n```\n## 函数的入参\n函数的入参，是能够让使用者，在调用这个函数的时候，能够更加的清晰明了的把这个函数所需要的参数传递给函数，不容易出现，参数传递错误（参数的顺序颠倒等）一些低级，而又不好查找的问题\n```js\n// difference\n// true和false啥意思，没有个注释的话，看上去就是一脸懵逼\nfunction getImages(api, true, false); \n// grace\n// 一目了然，知道这些true和false是啥意思\nfunction getImages({\n    imageApi: api,\n    includePageBackground: true, \n    compress: false,\n})\n```\n## 接收参数\n如果函数的的参数是对象，也要优先使用解构赋值，上代码\n```js\n// 假设现在的场景是获取用户的信息上的现用名，和曾用名\n// difference\nfunction getFullName(user) {\n  const firstName = user.firstName;\n  const lastName = user.lastName;\n}\n\n// commonly\nfunction getFullName(obj) {\n  const { firstName, lastName } = obj;\n}\n\n// grace\nfunction getFullName({ firstName, lastName }) {\n}\n\n// grace 给它个默认值\nfunction getFullName({firstName, lastName = '无'}) {\n}\n \n// 觉得参数的名称太长，咱再来个重命名  解构时重命名简化命名\n// grace\nfunction getFullName ({firstName: first, lastName: last}) {\n \n}\n```\n## 参数效验\n更少的嵌套，不满足条件尽早 return，尽可能的减少嵌套，嵌套的层级越少，函数看着越简洁优雅\n```js\nfunction test(name, sex = 1) {\n  // 不满足条件尽早抛出错误\n  if (!name){ \n      throw new Error('没有传递name参数');\n  }\n}\n```\n## 函数的出参\n对象作为返回值，更便于以后添加返回值，以及更改返回值的顺序，相对于数组更加的灵活，更便于扩展\n```js\n// 函数返回多个值，推荐使用对象作为函数的返回值\n// commonly\nfunction processInput(input) {\n  return [left, right, top, bottom];\n}\n\n// grace\nfunction processInput(input) {\n  return { left, right, top, bottom };\n}\nconst { left, right } = processInput(input);\n```\n## 立即执行函数\n立即执行函数也推荐写成箭头函数的形式。首先是因为更简洁，并且也绑定好 this（箭头函数不会去改变this的指向）。\n```js\n(() => {\n  console.log('立即执行函数');\n})();\n```\n## 优先使用函数式编程\n```js\n// difference\nfor(i = 1; i <= 10; i++) {\n   a[i] = a[i] +1;\n}\n// grace\nlet b = a.map(item => ++item) //是不是更简洁了\n```\n## 函数中过多的采用if else\n```js\n// commonly\nif (a === 1) {\n    //...\n} else if (a ===2) {\n   // ...\n} else if (a === 3) {\n    //...\n} else {\n   //...\n}\n    \n// 一般\nswitch(a) {\n    case 1:\n        //....\n    case 2:\n        //....\n    case 3:\n        //....\n    default:\n    //....\n}\n\n// grace ===》》》 Object\nconst fruit = {\n    1: ['1', '11'],\n    2: ['2', '22'],\n    3: ['3', '33']\n };\nlet test = (a) => {\n  return fruit[a] || [];\n}\n\n// grace ===》》》 Map\nconst fruit = newMap()\n  .set('张三', ['张三丰', '张三力'])\n  .set('李四', ['李思维', '李素丽'])\nlet test = (a) => {\n\treturn fruit.get(a) || [];\n}\n\n// grace ===》》》filter\nconst fruits = [\n    { name: '张三', work: 'js' }, \n    { name: '李四', work: 'php' }, \n    { name: '王五', work: 'java' }, \n];\nlet test = (a) => {\n  return fruits.filter(item => item.name === a);\n}\n\n// grace===》》》策略模式\nlet handler = {\n    1: () => {\n        //....\n    },\n    2: () => {\n        //....\n    },\n    3: () => {\n        //....\n    },\n    default: () => {\n        //....\n    }\n}\nhandler[a]() || handler['default']()\n```\n## 温馨小提示\n一个函数完成一个独立的功能，不要一个函数混杂多个功能，在项目开发中有一条非常重要的原则【单一原则】所谓的单一原则就是，一个函数（文件），只做一件事情，在开发当中，没有那个项目是开发完成之后，就结束了。需要不断的更新，维护，那么单一原则，就是为了方便开发，和维护的，不要让一个函数“又当爹，又当妈”，这样代码的耦合性太高了，不好维护\n## 其他\n### 判断数组长度\n```js\n// difference\nif (arr.length !== 0) {\n    //...\n}\n\n// grace\nif (arr.length) {\n    //...\n}\n\n\n// difference\nif (arr.length === 0) {\n    //...\n}\n\n// grace\nif (!arr.length) {\n    //...\n}\n```\n### 逻辑运算符\n```js\nif (a === 1) {\n    b()\n}\n//可以写成\na === 1 && b()\n\nconst arr = [1,2,3];\nif(!arr.length){\n   b()\n }\n//可以写出\narr.length || b()\n\n// &&判断依赖的键是否存在，防止报错'xxx of undfined'\nlet user = {\n    name: 'Symbol卢',\n    age: 18,\n    children: {\n        name: '小Symbol卢'\n    }\n}\nlet childrenName = user.children && user.childre.name\n```\n### 三目运算符\n```js\n// difference\nconst a = '';\nlet b;\nif( a === '' ){\n    b = 'no'\n} else {\n    b = 'ok'\n}\n\nconst a = ''\nlet b = a ? 'no' : 'ok'; // 'ok'\n```\n### 函数定义\n```js\n/**\n * @description: 数据类型的检测的第二种方式\n * @param {any} data 要检测数据类型的变量\n * @return {string} type 返回具体的类型名称【小写】\n */\nexport const isTypeOf = (data) => {\n    return Object.prototype.toString.call(data).replace(/\\[object (\\w+)\\]/, '$1').toLowerCase()\n}\n```\n### 使用 Array.includes 来处理多重 || 条件\n```js\n// difference\nif (a === 1 || a === 2 || a === 3 || a === 4) {\n    //...\n}\n// grace\nlet arr = [1, 2, 3, 4]\nif (arr.includes(a)) {\n    //...\n}\n```\n### 使用 Array.every 和 Array.some 来处理全部/部分满足条件\n```js\n// grace\nconst users = [\n    { name: '张三', sex:1 },\n    { name: '李四', sex:2 },\n    { name: '王五', sex:1 }\n  ];\nfunction test() {\n  // 条件：（简短形式）所有的用户都必须是女\n  const isAllGirl = users.every(item => item.sex === 1);\n  // 条件：至少一个用户是男的\n  const isAnyMan = users.some(item => item.sex === 2);\n}\n```\n### 使用正则表达式\n```js\nconst imgType ='jpg'\nif(imgType === 'jpg' || imgType === 'png' || imgType === 'gif'){\n    console.log('is image')\n}\n// 使用match匹配正则表达式\nif(imgType.match(/.*?(gif|png|jpg)/gi)){\n    console.log('is image')\n}\n```\n### 连接字符串\n```js\nlet name = 'Symbol'\nlet message = 'Hello,I\\'m' + name + 'take care '// 采用传统加号，看着很冗余,且容易出错\n// 艾玛，模板字符香，真想\nlet message = `Hello,I'm ${name} take care `\n```","slug":"如何让你的代码更优雅","published":1,"updated":"2022-01-11T00:56:30.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky9xymph00080ovje7w1306l","content":"<h2 id=\"常量赋值\"><a href=\"#常量赋值\" class=\"headerlink\" title=\"常量赋值\"></a>常量赋值</h2><h3 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h3><p>包括接口中返回的数据，要做好兜底</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lastName = fullName[<span class=\"number\">1</span>] || <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> propertyValue=<span class=\"built_in\">Object</span>.attr || <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"指明类型\"><a href=\"#指明类型\" class=\"headerlink\" title=\"指明类型\"></a>指明类型</h3><p>要按强类型风格写代码定义变量的时候要指明类型，并且在变量声明之后，不要随意的去更改变量的数据类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设声明三个变量a,b,c</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a,b,c; <span class=\"comment\">// difference，定义变量时没有指明类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&quot;&quot;</span>, b = [], c = &#123;&#125;; <span class=\"comment\">// good</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"逻辑判断\"><a href=\"#逻辑判断\" class=\"headerlink\" title=\"逻辑判断\"></a>逻辑判断</h2><h3 id=\"逻辑判断注意\"><a href=\"#逻辑判断注意\" class=\"headerlink\" title=\"==逻辑判断注意\"></a><code>==</code>逻辑判断注意</h3><p><code>==</code> 表示只要值相等即为真，<code>===</code> 要求不仅值相等，而且也要求类型相同<br>使用== 有时候会达不到预期的结果，埋下隐患</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>  == <span class=\"string\">&#x27;&#x27;</span>          <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span>  == <span class=\"string\">&#x27;0&#x27;</span>         <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> == <span class=\"number\">0</span>           <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> == <span class=\"string\">&#x27;0&#x27;</span>         <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">&#x27;0&#x27;</span>        <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">&#x27;false&#x27;</span>    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"literal\">undefined</span>  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"literal\">null</span>       <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"number\">1</span>           <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数据类型不确定\"><a href=\"#数据类型不确定\" class=\"headerlink\" title=\"数据类型不确定\"></a>数据类型不确定</h3><p>如果变量的数据类型不确定，那咱就手动的转换一下，让它确定</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> total = <span class=\"string\">&quot;6&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">parseInt</span>(total) === <span class=\"number\">6</span>)&#123;&#125; <span class=\"comment\">// grace 手动转换一下数据类型</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h3 id=\"数组拷贝\"><a href=\"#数组拷贝\" class=\"headerlink\" title=\"数组拷贝\"></a>数组拷贝</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> items=[<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> itemCopy = [...items]</span><br><span class=\"line\"><span class=\"comment\">// joining arrays </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> odd = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span> ]; </span><br><span class=\"line\"><span class=\"keyword\">const</span> nums = [<span class=\"number\">2</span> ,<span class=\"number\">4</span> , <span class=\"number\">6</span>, ...odd]; </span><br></pre></td></tr></table></figure>\n<h3 id=\"变量赋值\"><a href=\"#变量赋值\" class=\"headerlink\" title=\"变量赋值\"></a>变量赋值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, second] = Arr; </span><br></pre></td></tr></table></figure>\n<h2 id=\"函数的命名\"><a href=\"#函数的命名\" class=\"headerlink\" title=\"函数的命名\"></a>函数的命名</h2><p> 返回布尔值函数应以is/can/has等单词开头，能够让人更直观的了解到这个函数的功能；获取接口中的数据使用get开头进行命名,动作函数要以动词开头。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isSupport = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> canUpdate = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> geUserInfo = <span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> setUserInfo = <span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"优先使用箭头函数\"><a href=\"#优先使用箭头函数\" class=\"headerlink\" title=\"优先使用箭头函数\"></a>优先使用箭头函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// grace 是不是看着更简介优雅了</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findAge = <span class=\"function\">(<span class=\"params\">arr, age</span>)=&gt;</span> arr.filter(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> num === age)</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数的入参\"><a href=\"#函数的入参\" class=\"headerlink\" title=\"函数的入参\"></a>函数的入参</h2><p>函数的入参，是能够让使用者，在调用这个函数的时候，能够更加的清晰明了的把这个函数所需要的参数传递给函数，不容易出现，参数传递错误（参数的顺序颠倒等）一些低级，而又不好查找的问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"comment\">// true和false啥意思，没有个注释的话，看上去就是一脸懵逼</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getImages</span>(<span class=\"params\">api, <span class=\"literal\">true</span>, <span class=\"literal\">false</span></span>)</span>; </span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"comment\">// 一目了然，知道这些true和false是啥意思</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getImages</span>(<span class=\"params\">&#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    imageApi: api,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    includePageBackground: <span class=\"literal\">true</span>, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    compress: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">&#125;</span>)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"接收参数\"><a href=\"#接收参数\" class=\"headerlink\" title=\"接收参数\"></a>接收参数</h2><p>如果函数的的参数是对象，也要优先使用解构赋值，上代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设现在的场景是获取用户的信息上的现用名，和曾用名</span></span><br><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> firstName = user.firstName;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> lastName = user.lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// commonly</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; firstName, lastName &#125; = obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace 给它个默认值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">&#123;firstName, lastName = <span class=\"string\">&#x27;无&#x27;</span>&#125;</span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 觉得参数的名称太长，咱再来个重命名  解构时重命名简化命名</span></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span> (<span class=\"params\">&#123;firstName: first, lastName: last&#125;</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数效验\"><a href=\"#参数效验\" class=\"headerlink\" title=\"参数效验\"></a>参数效验</h2><p>更少的嵌套，不满足条件尽早 return，尽可能的减少嵌套，嵌套的层级越少，函数看着越简洁优雅</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">name, sex = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 不满足条件尽早抛出错误</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!name)&#123; </span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;没有传递name参数&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数的出参\"><a href=\"#函数的出参\" class=\"headerlink\" title=\"函数的出参\"></a>函数的出参</h2><p>对象作为返回值，更便于以后添加返回值，以及更改返回值的顺序，相对于数组更加的灵活，更便于扩展</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数返回多个值，推荐使用对象作为函数的返回值</span></span><br><span class=\"line\"><span class=\"comment\">// commonly</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processInput</span>(<span class=\"params\">input</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [left, right, top, bottom];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processInput</span>(<span class=\"params\">input</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; left, right, top, bottom &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; left, right &#125; = processInput(input);</span><br></pre></td></tr></table></figure>\n<h2 id=\"立即执行函数\"><a href=\"#立即执行函数\" class=\"headerlink\" title=\"立即执行函数\"></a>立即执行函数</h2><p>立即执行函数也推荐写成箭头函数的形式。首先是因为更简洁，并且也绑定好 this（箭头函数不会去改变this的指向）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;立即执行函数&#x27;</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h2 id=\"优先使用函数式编程\"><a href=\"#优先使用函数式编程\" class=\"headerlink\" title=\"优先使用函数式编程\"></a>优先使用函数式编程</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">   a[i] = a[i] +<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> ++item) <span class=\"comment\">//是不是更简洁了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数中过多的采用if-else\"><a href=\"#函数中过多的采用if-else\" class=\"headerlink\" title=\"函数中过多的采用if else\"></a>函数中过多的采用if else</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// commonly</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a ===<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 一般</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span>(a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"comment\">//....</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace ===》》》 Object</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruit = &#123;</span><br><span class=\"line\">    <span class=\"number\">1</span>: [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;11&#x27;</span>],</span><br><span class=\"line\">    <span class=\"number\">2</span>: [<span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;22&#x27;</span>],</span><br><span class=\"line\">    <span class=\"number\">3</span>: [<span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;33&#x27;</span>]</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fruit[a] || [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace ===》》》 Map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruit = newMap()</span><br><span class=\"line\">  .set(<span class=\"string\">&#x27;张三&#x27;</span>, [<span class=\"string\">&#x27;张三丰&#x27;</span>, <span class=\"string\">&#x27;张三力&#x27;</span>])</span><br><span class=\"line\">  .set(<span class=\"string\">&#x27;李四&#x27;</span>, [<span class=\"string\">&#x27;李思维&#x27;</span>, <span class=\"string\">&#x27;李素丽&#x27;</span>])</span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fruit.get(a) || [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace ===》》》filter</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruits = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"attr\">work</span>: <span class=\"string\">&#x27;js&#x27;</span> &#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"attr\">work</span>: <span class=\"string\">&#x27;php&#x27;</span> &#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;王五&#x27;</span>, <span class=\"attr\">work</span>: <span class=\"string\">&#x27;java&#x27;</span> &#125;, </span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fruits.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.name === a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace===》》》策略模式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"number\">2</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"number\">3</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">handler[a]() || handler[<span class=\"string\">&#x27;default&#x27;</span>]()</span><br></pre></td></tr></table></figure>\n<h2 id=\"温馨小提示\"><a href=\"#温馨小提示\" class=\"headerlink\" title=\"温馨小提示\"></a>温馨小提示</h2><p>一个函数完成一个独立的功能，不要一个函数混杂多个功能，在项目开发中有一条非常重要的原则【单一原则】所谓的单一原则就是，一个函数（文件），只做一件事情，在开发当中，没有那个项目是开发完成之后，就结束了。需要不断的更新，维护，那么单一原则，就是为了方便开发，和维护的，不要让一个函数“又当爹，又当妈”，这样代码的耦合性太高了，不好维护</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"判断数组长度\"><a href=\"#判断数组长度\" class=\"headerlink\" title=\"判断数组长度\"></a>判断数组长度</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.length) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!arr.length) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (a === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    b()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可以写成</span></span><br><span class=\"line\">a === <span class=\"number\">1</span> &amp;&amp; b()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!arr.length)&#123;</span><br><span class=\"line\">   b()</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"comment\">//可以写出</span></span><br><span class=\"line\">arr.length || b()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &amp;&amp;判断依赖的键是否存在，防止报错&#x27;xxx of undfined&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Symbol卢&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小Symbol卢&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> childrenName = user.children &amp;&amp; user.childre.name</span><br></pre></td></tr></table></figure>\n<h3 id=\"三目运算符\"><a href=\"#三目运算符\" class=\"headerlink\" title=\"三目运算符\"></a>三目运算符</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b;</span><br><span class=\"line\"><span class=\"keyword\">if</span>( a === <span class=\"string\">&#x27;&#x27;</span> )&#123;</span><br><span class=\"line\">    b = <span class=\"string\">&#x27;no&#x27;</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    b = <span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a ? <span class=\"string\">&#x27;no&#x27;</span> : <span class=\"string\">&#x27;ok&#x27;</span>; <span class=\"comment\">// &#x27;ok&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 数据类型的检测的第二种方式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;any&#125;</span> </span>data 要检测数据类型的变量</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span> </span>type 返回具体的类型名称【小写】</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> isTypeOf = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(data).replace(<span class=\"regexp\">/\\[object (\\w+)\\]/</span>, <span class=\"string\">&#x27;$1&#x27;</span>).toLowerCase()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-Array-includes-来处理多重-条件\"><a href=\"#使用-Array-includes-来处理多重-条件\" class=\"headerlink\" title=\"使用 Array.includes 来处理多重 || 条件\"></a>使用 Array.includes 来处理多重 || 条件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a === <span class=\"number\">1</span> || a === <span class=\"number\">2</span> || a === <span class=\"number\">3</span> || a === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.includes(a)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-Array-every-和-Array-some-来处理全部-部分满足条件\"><a href=\"#使用-Array-every-和-Array-some-来处理全部-部分满足条件\" class=\"headerlink\" title=\"使用 Array.every 和 Array.some 来处理全部/部分满足条件\"></a>使用 Array.every 和 Array.some 来处理全部/部分满足条件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> users = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"attr\">sex</span>:<span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"attr\">sex</span>:<span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;王五&#x27;</span>, <span class=\"attr\">sex</span>:<span class=\"number\">1</span> &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 条件：（简短形式）所有的用户都必须是女</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isAllGirl = users.every(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.sex === <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 条件：至少一个用户是男的</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isAnyMan = users.some(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.sex === <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用正则表达式\"><a href=\"#使用正则表达式\" class=\"headerlink\" title=\"使用正则表达式\"></a>使用正则表达式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> imgType =<span class=\"string\">&#x27;jpg&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(imgType === <span class=\"string\">&#x27;jpg&#x27;</span> || imgType === <span class=\"string\">&#x27;png&#x27;</span> || imgType === <span class=\"string\">&#x27;gif&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;is image&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用match匹配正则表达式</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(imgType.match(<span class=\"regexp\">/.*?(gif|png|jpg)/gi</span>))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;is image&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接字符串\"><a href=\"#连接字符串\" class=\"headerlink\" title=\"连接字符串\"></a>连接字符串</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;Symbol&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">&#x27;Hello,I\\&#x27;m&#x27;</span> + name + <span class=\"string\">&#x27;take care &#x27;</span><span class=\"comment\">// 采用传统加号，看着很冗余,且容易出错</span></span><br><span class=\"line\"><span class=\"comment\">// 艾玛，模板字符香，真想</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">`Hello,I&#x27;m <span class=\"subst\">$&#123;name&#125;</span> take care `</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"常量赋值\"><a href=\"#常量赋值\" class=\"headerlink\" title=\"常量赋值\"></a>常量赋值</h2><h3 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h3><p>包括接口中返回的数据，要做好兜底</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lastName = fullName[<span class=\"number\">1</span>] || <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> propertyValue=<span class=\"built_in\">Object</span>.attr || <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"指明类型\"><a href=\"#指明类型\" class=\"headerlink\" title=\"指明类型\"></a>指明类型</h3><p>要按强类型风格写代码定义变量的时候要指明类型，并且在变量声明之后，不要随意的去更改变量的数据类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设声明三个变量a,b,c</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a,b,c; <span class=\"comment\">// difference，定义变量时没有指明类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&quot;&quot;</span>, b = [], c = &#123;&#125;; <span class=\"comment\">// good</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"逻辑判断\"><a href=\"#逻辑判断\" class=\"headerlink\" title=\"逻辑判断\"></a>逻辑判断</h2><h3 id=\"逻辑判断注意\"><a href=\"#逻辑判断注意\" class=\"headerlink\" title=\"==逻辑判断注意\"></a><code>==</code>逻辑判断注意</h3><p><code>==</code> 表示只要值相等即为真，<code>===</code> 要求不仅值相等，而且也要求类型相同<br>使用== 有时候会达不到预期的结果，埋下隐患</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>  == <span class=\"string\">&#x27;&#x27;</span>          <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span>  == <span class=\"string\">&#x27;0&#x27;</span>         <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> == <span class=\"number\">0</span>           <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> == <span class=\"string\">&#x27;0&#x27;</span>         <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">&#x27;0&#x27;</span>        <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">&#x27;false&#x27;</span>    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"literal\">undefined</span>  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"literal\">null</span>       <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"number\">1</span>           <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数据类型不确定\"><a href=\"#数据类型不确定\" class=\"headerlink\" title=\"数据类型不确定\"></a>数据类型不确定</h3><p>如果变量的数据类型不确定，那咱就手动的转换一下，让它确定</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> total = <span class=\"string\">&quot;6&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">parseInt</span>(total) === <span class=\"number\">6</span>)&#123;&#125; <span class=\"comment\">// grace 手动转换一下数据类型</span></span><br></pre></td></tr></table></figure>","more":"<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h3 id=\"数组拷贝\"><a href=\"#数组拷贝\" class=\"headerlink\" title=\"数组拷贝\"></a>数组拷贝</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> items=[<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> itemCopy = [...items]</span><br><span class=\"line\"><span class=\"comment\">// joining arrays </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> odd = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span> ]; </span><br><span class=\"line\"><span class=\"keyword\">const</span> nums = [<span class=\"number\">2</span> ,<span class=\"number\">4</span> , <span class=\"number\">6</span>, ...odd]; </span><br></pre></td></tr></table></figure>\n<h3 id=\"变量赋值\"><a href=\"#变量赋值\" class=\"headerlink\" title=\"变量赋值\"></a>变量赋值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, second] = Arr; </span><br></pre></td></tr></table></figure>\n<h2 id=\"函数的命名\"><a href=\"#函数的命名\" class=\"headerlink\" title=\"函数的命名\"></a>函数的命名</h2><p> 返回布尔值函数应以is/can/has等单词开头，能够让人更直观的了解到这个函数的功能；获取接口中的数据使用get开头进行命名,动作函数要以动词开头。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isSupport = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> canUpdate = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> geUserInfo = <span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> setUserInfo = <span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"优先使用箭头函数\"><a href=\"#优先使用箭头函数\" class=\"headerlink\" title=\"优先使用箭头函数\"></a>优先使用箭头函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// grace 是不是看着更简介优雅了</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findAge = <span class=\"function\">(<span class=\"params\">arr, age</span>)=&gt;</span> arr.filter(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> num === age)</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数的入参\"><a href=\"#函数的入参\" class=\"headerlink\" title=\"函数的入参\"></a>函数的入参</h2><p>函数的入参，是能够让使用者，在调用这个函数的时候，能够更加的清晰明了的把这个函数所需要的参数传递给函数，不容易出现，参数传递错误（参数的顺序颠倒等）一些低级，而又不好查找的问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"comment\">// true和false啥意思，没有个注释的话，看上去就是一脸懵逼</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getImages</span>(<span class=\"params\">api, <span class=\"literal\">true</span>, <span class=\"literal\">false</span></span>)</span>; </span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"comment\">// 一目了然，知道这些true和false是啥意思</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getImages</span>(<span class=\"params\">&#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    imageApi: api,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    includePageBackground: <span class=\"literal\">true</span>, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    compress: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">&#125;</span>)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"接收参数\"><a href=\"#接收参数\" class=\"headerlink\" title=\"接收参数\"></a>接收参数</h2><p>如果函数的的参数是对象，也要优先使用解构赋值，上代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设现在的场景是获取用户的信息上的现用名，和曾用名</span></span><br><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> firstName = user.firstName;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> lastName = user.lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// commonly</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; firstName, lastName &#125; = obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace 给它个默认值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">&#123;firstName, lastName = <span class=\"string\">&#x27;无&#x27;</span>&#125;</span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 觉得参数的名称太长，咱再来个重命名  解构时重命名简化命名</span></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span> (<span class=\"params\">&#123;firstName: first, lastName: last&#125;</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数效验\"><a href=\"#参数效验\" class=\"headerlink\" title=\"参数效验\"></a>参数效验</h2><p>更少的嵌套，不满足条件尽早 return，尽可能的减少嵌套，嵌套的层级越少，函数看着越简洁优雅</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">name, sex = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 不满足条件尽早抛出错误</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!name)&#123; </span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;没有传递name参数&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数的出参\"><a href=\"#函数的出参\" class=\"headerlink\" title=\"函数的出参\"></a>函数的出参</h2><p>对象作为返回值，更便于以后添加返回值，以及更改返回值的顺序，相对于数组更加的灵活，更便于扩展</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数返回多个值，推荐使用对象作为函数的返回值</span></span><br><span class=\"line\"><span class=\"comment\">// commonly</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processInput</span>(<span class=\"params\">input</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [left, right, top, bottom];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processInput</span>(<span class=\"params\">input</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; left, right, top, bottom &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; left, right &#125; = processInput(input);</span><br></pre></td></tr></table></figure>\n<h2 id=\"立即执行函数\"><a href=\"#立即执行函数\" class=\"headerlink\" title=\"立即执行函数\"></a>立即执行函数</h2><p>立即执行函数也推荐写成箭头函数的形式。首先是因为更简洁，并且也绑定好 this（箭头函数不会去改变this的指向）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;立即执行函数&#x27;</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h2 id=\"优先使用函数式编程\"><a href=\"#优先使用函数式编程\" class=\"headerlink\" title=\"优先使用函数式编程\"></a>优先使用函数式编程</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">   a[i] = a[i] +<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> ++item) <span class=\"comment\">//是不是更简洁了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数中过多的采用if-else\"><a href=\"#函数中过多的采用if-else\" class=\"headerlink\" title=\"函数中过多的采用if else\"></a>函数中过多的采用if else</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// commonly</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a ===<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 一般</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span>(a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"comment\">//....</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace ===》》》 Object</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruit = &#123;</span><br><span class=\"line\">    <span class=\"number\">1</span>: [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;11&#x27;</span>],</span><br><span class=\"line\">    <span class=\"number\">2</span>: [<span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;22&#x27;</span>],</span><br><span class=\"line\">    <span class=\"number\">3</span>: [<span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;33&#x27;</span>]</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fruit[a] || [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace ===》》》 Map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruit = newMap()</span><br><span class=\"line\">  .set(<span class=\"string\">&#x27;张三&#x27;</span>, [<span class=\"string\">&#x27;张三丰&#x27;</span>, <span class=\"string\">&#x27;张三力&#x27;</span>])</span><br><span class=\"line\">  .set(<span class=\"string\">&#x27;李四&#x27;</span>, [<span class=\"string\">&#x27;李思维&#x27;</span>, <span class=\"string\">&#x27;李素丽&#x27;</span>])</span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fruit.get(a) || [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace ===》》》filter</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruits = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"attr\">work</span>: <span class=\"string\">&#x27;js&#x27;</span> &#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"attr\">work</span>: <span class=\"string\">&#x27;php&#x27;</span> &#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;王五&#x27;</span>, <span class=\"attr\">work</span>: <span class=\"string\">&#x27;java&#x27;</span> &#125;, </span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fruits.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.name === a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace===》》》策略模式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"number\">2</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"number\">3</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">handler[a]() || handler[<span class=\"string\">&#x27;default&#x27;</span>]()</span><br></pre></td></tr></table></figure>\n<h2 id=\"温馨小提示\"><a href=\"#温馨小提示\" class=\"headerlink\" title=\"温馨小提示\"></a>温馨小提示</h2><p>一个函数完成一个独立的功能，不要一个函数混杂多个功能，在项目开发中有一条非常重要的原则【单一原则】所谓的单一原则就是，一个函数（文件），只做一件事情，在开发当中，没有那个项目是开发完成之后，就结束了。需要不断的更新，维护，那么单一原则，就是为了方便开发，和维护的，不要让一个函数“又当爹，又当妈”，这样代码的耦合性太高了，不好维护</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"判断数组长度\"><a href=\"#判断数组长度\" class=\"headerlink\" title=\"判断数组长度\"></a>判断数组长度</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.length) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!arr.length) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (a === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    b()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可以写成</span></span><br><span class=\"line\">a === <span class=\"number\">1</span> &amp;&amp; b()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!arr.length)&#123;</span><br><span class=\"line\">   b()</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"comment\">//可以写出</span></span><br><span class=\"line\">arr.length || b()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &amp;&amp;判断依赖的键是否存在，防止报错&#x27;xxx of undfined&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Symbol卢&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小Symbol卢&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> childrenName = user.children &amp;&amp; user.childre.name</span><br></pre></td></tr></table></figure>\n<h3 id=\"三目运算符\"><a href=\"#三目运算符\" class=\"headerlink\" title=\"三目运算符\"></a>三目运算符</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b;</span><br><span class=\"line\"><span class=\"keyword\">if</span>( a === <span class=\"string\">&#x27;&#x27;</span> )&#123;</span><br><span class=\"line\">    b = <span class=\"string\">&#x27;no&#x27;</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    b = <span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a ? <span class=\"string\">&#x27;no&#x27;</span> : <span class=\"string\">&#x27;ok&#x27;</span>; <span class=\"comment\">// &#x27;ok&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 数据类型的检测的第二种方式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;any&#125;</span> </span>data 要检测数据类型的变量</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span> </span>type 返回具体的类型名称【小写】</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> isTypeOf = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(data).replace(<span class=\"regexp\">/\\[object (\\w+)\\]/</span>, <span class=\"string\">&#x27;$1&#x27;</span>).toLowerCase()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-Array-includes-来处理多重-条件\"><a href=\"#使用-Array-includes-来处理多重-条件\" class=\"headerlink\" title=\"使用 Array.includes 来处理多重 || 条件\"></a>使用 Array.includes 来处理多重 || 条件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a === <span class=\"number\">1</span> || a === <span class=\"number\">2</span> || a === <span class=\"number\">3</span> || a === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.includes(a)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-Array-every-和-Array-some-来处理全部-部分满足条件\"><a href=\"#使用-Array-every-和-Array-some-来处理全部-部分满足条件\" class=\"headerlink\" title=\"使用 Array.every 和 Array.some 来处理全部/部分满足条件\"></a>使用 Array.every 和 Array.some 来处理全部/部分满足条件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// grace</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> users = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"attr\">sex</span>:<span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"attr\">sex</span>:<span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;王五&#x27;</span>, <span class=\"attr\">sex</span>:<span class=\"number\">1</span> &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 条件：（简短形式）所有的用户都必须是女</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isAllGirl = users.every(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.sex === <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 条件：至少一个用户是男的</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isAnyMan = users.some(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.sex === <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用正则表达式\"><a href=\"#使用正则表达式\" class=\"headerlink\" title=\"使用正则表达式\"></a>使用正则表达式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> imgType =<span class=\"string\">&#x27;jpg&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(imgType === <span class=\"string\">&#x27;jpg&#x27;</span> || imgType === <span class=\"string\">&#x27;png&#x27;</span> || imgType === <span class=\"string\">&#x27;gif&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;is image&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用match匹配正则表达式</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(imgType.match(<span class=\"regexp\">/.*?(gif|png|jpg)/gi</span>))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;is image&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接字符串\"><a href=\"#连接字符串\" class=\"headerlink\" title=\"连接字符串\"></a>连接字符串</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;Symbol&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">&#x27;Hello,I\\&#x27;m&#x27;</span> + name + <span class=\"string\">&#x27;take care &#x27;</span><span class=\"comment\">// 采用传统加号，看着很冗余,且容易出错</span></span><br><span class=\"line\"><span class=\"comment\">// 艾玛，模板字符香，真想</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">`Hello,I&#x27;m <span class=\"subst\">$&#123;name&#125;</span> take care `</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cky9xymp700010ovj5tq73mmf","category_id":"cky9xympd00040ovj7nl76vfo","_id":"cky9xympj000c0ovjb3aycqy3"},{"post_id":"cky9xympg00070ovj5rlx40q8","category_id":"cky9xympi00090ovj2i901r6f","_id":"cky9xympm000g0ovj0axigadf"},{"post_id":"cky9xymph00080ovje7w1306l","category_id":"cky9xympj000d0ovj3tr7anqm","_id":"cky9xympm000i0ovj2q5k91ve"}],"PostTag":[{"post_id":"cky9xymp700010ovj5tq73mmf","tag_id":"cky9xympe00050ovjaqkdezjf","_id":"cky9xympj000b0ovj072wfba3"},{"post_id":"cky9xympg00070ovj5rlx40q8","tag_id":"cky9xympi000a0ovj7hdta7kg","_id":"cky9xympl000f0ovjboxz1bxm"},{"post_id":"cky9xymph00080ovje7w1306l","tag_id":"cky9xympi000a0ovj7hdta7kg","_id":"cky9xympm000h0ovjguq41cgm"}],"Tag":[{"name":"github","_id":"cky9xympe00050ovjaqkdezjf"},{"name":"优雅","_id":"cky9xympi000a0ovj7hdta7kg"}]}}