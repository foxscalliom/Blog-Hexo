<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>百里の博客</title>
  
  <subtitle>倘只看书,便变成书橱</subtitle>
  <link href="https://i100.xyz/atom.xml" rel="self"/>
  
  <link href="https://i100.xyz/"/>
  <updated>2022-01-09T09:36:55.915Z</updated>
  <id>https://i100.xyz/</id>
  
  <author>
    <name>百里</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何让你的代码更优雅</title>
    <link href="https://i100.xyz/posts/932a8af7.html"/>
    <id>https://i100.xyz/posts/932a8af7.html</id>
    <published>2022-01-08T08:35:04.000Z</published>
    <updated>2022-01-09T09:36:55.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常量赋值"><a href="#常量赋值" class="headerlink" title="常量赋值"></a>常量赋值</h2><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p>包括接口中返回的数据，要做好兜底</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lastName = fullName[<span class="number">1</span>] || <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> propertyValue=<span class="built_in">Object</span>.attr || <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="指明类型"><a href="#指明类型" class="headerlink" title="指明类型"></a>指明类型</h3><p>要按强类型风格写代码定义变量的时候要指明类型，并且在变量声明之后，不要随意的去更改变量的数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设声明三个变量a,b,c</span></span><br><span class="line"><span class="keyword">let</span> a,b,c; <span class="comment">// difference，定义变量时没有指明类型</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;&quot;</span>, b = [], c = &#123;&#125;; <span class="comment">// good</span></span><br></pre></td></tr></table></figure><h2 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h2><h3 id="逻辑判断注意"><a href="#逻辑判断注意" class="headerlink" title="==逻辑判断注意"></a><code>==</code>逻辑判断注意</h3><p><code>==</code> 表示只要值相等即为真，<code>===</code> 要求不仅值相等，而且也要求类型相同<br>使用== 有时候会达不到预期的结果，埋下隐患</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>  == <span class="string">&#x27;&#x27;</span>          <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span>  == <span class="string">&#x27;0&#x27;</span>         <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span> == <span class="number">0</span>           <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span> == <span class="string">&#x27;0&#x27;</span>         <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;0&#x27;</span>        <span class="comment">// true</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;false&#x27;</span>    <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="literal">undefined</span>  <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="literal">null</span>       <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>   <span class="comment">// true</span></span><br><span class="line"><span class="literal">true</span> == <span class="number">1</span>           <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="数据类型不确定"><a href="#数据类型不确定" class="headerlink" title="数据类型不确定"></a>数据类型不确定</h3><p>如果变量的数据类型不确定，那咱就手动的转换一下，让它确定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> total = <span class="string">&quot;6&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">parseInt</span>(total) === <span class="number">6</span>)&#123;&#125; <span class="comment">// grace 手动转换一下数据类型</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> items=[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> itemCopy = [...items]</span><br><span class="line"><span class="comment">// joining arrays </span></span><br><span class="line"><span class="keyword">const</span> odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span> ]; </span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">2</span> ,<span class="number">4</span> , <span class="number">6</span>, ...odd]; </span><br></pre></td></tr></table></figure><h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> [first, second] = Arr; </span><br></pre></td></tr></table></figure><h2 id="函数的命名"><a href="#函数的命名" class="headerlink" title="函数的命名"></a>函数的命名</h2><p> 返回布尔值函数应以is/can/has等单词开头，能够让人更直观的了解到这个函数的功能；获取接口中的数据使用get开头进行命名,动作函数要以动词开头。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// grace</span></span><br><span class="line"><span class="keyword">let</span> isSupport = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> canUpdate = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> geUserInfo = <span class="function">(<span class="params">user</span>) =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> setUserInfo = <span class="function">(<span class="params">user</span>) =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="优先使用箭头函数"><a href="#优先使用箭头函数" class="headerlink" title="优先使用箭头函数"></a>优先使用箭头函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// grace 是不是看着更简介优雅了</span></span><br><span class="line"><span class="keyword">let</span> findAge = <span class="function">(<span class="params">arr, age</span>)=&gt;</span> arr.filter(<span class="function"><span class="params">num</span> =&gt;</span> num === age)</span><br></pre></td></tr></table></figure><h2 id="函数的入参"><a href="#函数的入参" class="headerlink" title="函数的入参"></a>函数的入参</h2><p>函数的入参，是能够让使用者，在调用这个函数的时候，能够更加的清晰明了的把这个函数所需要的参数传递给函数，不容易出现，参数传递错误（参数的顺序颠倒等）一些低级，而又不好查找的问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// difference</span></span><br><span class="line"><span class="comment">// true和false啥意思，没有个注释的话，看上去就是一脸懵逼</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImages</span>(<span class="params">api, <span class="literal">true</span>, <span class="literal">false</span></span>)</span>; </span><br><span class="line"><span class="comment">// grace</span></span><br><span class="line"><span class="comment">// 一目了然，知道这些true和false是啥意思</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImages</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    imageApi: api,</span></span></span><br><span class="line"><span class="params"><span class="function">    includePageBackground: <span class="literal">true</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">    compress: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>)</span></span><br></pre></td></tr></table></figure><h2 id="接收参数"><a href="#接收参数" class="headerlink" title="接收参数"></a>接收参数</h2><p>如果函数的的参数是对象，也要优先使用解构赋值，上代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设现在的场景是获取用户的信息上的现用名，和曾用名</span></span><br><span class="line"><span class="comment">// difference</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = user.firstName;</span><br><span class="line">  <span class="keyword">const</span> lastName = user.lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// commonly</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// grace</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// grace 给它个默认值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123;firstName, lastName = <span class="string">&#x27;无&#x27;</span>&#125;</span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 觉得参数的名称太长，咱再来个重命名  解构时重命名简化命名</span></span><br><span class="line"><span class="comment">// grace</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span> (<span class="params">&#123;firstName: first, lastName: last&#125;</span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参数效验"><a href="#参数效验" class="headerlink" title="参数效验"></a>参数效验</h2><p>更少的嵌套，不满足条件尽早 return，尽可能的减少嵌套，嵌套的层级越少，函数看着越简洁优雅</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name, sex = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 不满足条件尽早抛出错误</span></span><br><span class="line">  <span class="keyword">if</span> (!name)&#123; </span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;没有传递name参数&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数的出参"><a href="#函数的出参" class="headerlink" title="函数的出参"></a>函数的出参</h2><p>对象作为返回值，更便于以后添加返回值，以及更改返回值的顺序，相对于数组更加的灵活，更便于扩展</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数返回多个值，推荐使用对象作为函数的返回值</span></span><br><span class="line"><span class="comment">// commonly</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [left, right, top, bottom];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// grace</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; left, right &#125; = processInput(input);</span><br></pre></td></tr></table></figure><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><p>立即执行函数也推荐写成箭头函数的形式。首先是因为更简洁，并且也绑定好 this（箭头函数不会去改变this的指向）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;立即执行函数&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="优先使用函数式编程"><a href="#优先使用函数式编程" class="headerlink" title="优先使用函数式编程"></a>优先使用函数式编程</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// difference</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">   a[i] = a[i] +<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// grace</span></span><br><span class="line"><span class="keyword">let</span> b = a.map(<span class="function"><span class="params">item</span> =&gt;</span> ++item) <span class="comment">//是不是更简洁了</span></span><br></pre></td></tr></table></figure><h2 id="函数中过多的采用if-else"><a href="#函数中过多的采用if-else" class="headerlink" title="函数中过多的采用if else"></a>函数中过多的采用if else</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// commonly</span></span><br><span class="line"><span class="keyword">if</span> (a === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a ===<span class="number">2</span>) &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 一般</span></span><br><span class="line"><span class="keyword">switch</span>(a) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// grace ===》》》 Object</span></span><br><span class="line"><span class="keyword">const</span> fruit = &#123;</span><br><span class="line">    <span class="number">1</span>: [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;11&#x27;</span>],</span><br><span class="line">    <span class="number">2</span>: [<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;22&#x27;</span>],</span><br><span class="line">    <span class="number">3</span>: [<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;33&#x27;</span>]</span><br><span class="line"> &#125;;</span><br><span class="line"><span class="keyword">let</span> test = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> fruit[a] || [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// grace ===》》》 Map</span></span><br><span class="line"><span class="keyword">const</span> fruit = newMap()</span><br><span class="line">  .set(<span class="string">&#x27;张三&#x27;</span>, [<span class="string">&#x27;张三丰&#x27;</span>, <span class="string">&#x27;张三力&#x27;</span>])</span><br><span class="line">  .set(<span class="string">&#x27;李四&#x27;</span>, [<span class="string">&#x27;李思维&#x27;</span>, <span class="string">&#x27;李素丽&#x27;</span>])</span><br><span class="line"><span class="keyword">let</span> test = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fruit.get(a) || [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// grace ===》》》filter</span></span><br><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">work</span>: <span class="string">&#x27;js&#x27;</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">work</span>: <span class="string">&#x27;php&#x27;</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="attr">work</span>: <span class="string">&#x27;java&#x27;</span> &#125;, </span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> test = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> fruits.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.name === a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// grace===》》》策略模式</span></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">2</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">3</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">default</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">handler[a]() || handler[<span class="string">&#x27;default&#x27;</span>]()</span><br></pre></td></tr></table></figure><h2 id="温馨小提示"><a href="#温馨小提示" class="headerlink" title="温馨小提示"></a>温馨小提示</h2><p>一个函数完成一个独立的功能，不要一个函数混杂多个功能，在项目开发中有一条非常重要的原则【单一原则】所谓的单一原则就是，一个函数（文件），只做一件事情，在开发当中，没有那个项目是开发完成之后，就结束了。需要不断的更新，维护，那么单一原则，就是为了方便开发，和维护的，不要让一个函数“又当爹，又当妈”，这样代码的耦合性太高了，不好维护</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="判断数组长度"><a href="#判断数组长度" class="headerlink" title="判断数组长度"></a>判断数组长度</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// difference</span></span><br><span class="line"><span class="keyword">if</span> (arr.length !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// grace</span></span><br><span class="line"><span class="keyword">if</span> (arr.length) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// difference</span></span><br><span class="line"><span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// grace</span></span><br><span class="line"><span class="keyword">if</span> (!arr.length) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a === <span class="number">1</span>) &#123;</span><br><span class="line">    b()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以写成</span></span><br><span class="line">a === <span class="number">1</span> &amp;&amp; b()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">if</span>(!arr.length)&#123;</span><br><span class="line">   b()</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//可以写出</span></span><br><span class="line">arr.length || b()</span><br><span class="line"></span><br><span class="line"><span class="comment">// &amp;&amp;判断依赖的键是否存在，防止报错&#x27;xxx of undfined&#x27;</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Symbol卢&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">children</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;小Symbol卢&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> childrenName = user.children &amp;&amp; user.childre.name</span><br></pre></td></tr></table></figure><h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// difference</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> b;</span><br><span class="line"><span class="keyword">if</span>( a === <span class="string">&#x27;&#x27;</span> )&#123;</span><br><span class="line">    b = <span class="string">&#x27;no&#x27;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    b = <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> b = a ? <span class="string">&#x27;no&#x27;</span> : <span class="string">&#x27;ok&#x27;</span>; <span class="comment">// &#x27;ok&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 数据类型的检测的第二种方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;any&#125;</span> </span>data 要检测数据类型的变量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span> </span>type 返回具体的类型名称【小写】</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isTypeOf = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(data).replace(<span class="regexp">/\[object (\w+)\]/</span>, <span class="string">&#x27;$1&#x27;</span>).toLowerCase()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Array-includes-来处理多重-条件"><a href="#使用-Array-includes-来处理多重-条件" class="headerlink" title="使用 Array.includes 来处理多重 || 条件"></a>使用 Array.includes 来处理多重 || 条件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// difference</span></span><br><span class="line"><span class="keyword">if</span> (a === <span class="number">1</span> || a === <span class="number">2</span> || a === <span class="number">3</span> || a === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// grace</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">if</span> (arr.includes(a)) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Array-every-和-Array-some-来处理全部-部分满足条件"><a href="#使用-Array-every-和-Array-some-来处理全部-部分满足条件" class="headerlink" title="使用 Array.every 和 Array.some 来处理全部/部分满足条件"></a>使用 Array.every 和 Array.some 来处理全部/部分满足条件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// grace</span></span><br><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">sex</span>:<span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">sex</span>:<span class="number">2</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="attr">sex</span>:<span class="number">1</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 条件：（简短形式）所有的用户都必须是女</span></span><br><span class="line">  <span class="keyword">const</span> isAllGirl = users.every(<span class="function"><span class="params">item</span> =&gt;</span> item.sex === <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 条件：至少一个用户是男的</span></span><br><span class="line">  <span class="keyword">const</span> isAnyMan = users.some(<span class="function"><span class="params">item</span> =&gt;</span> item.sex === <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> imgType =<span class="string">&#x27;jpg&#x27;</span></span><br><span class="line"><span class="keyword">if</span>(imgType === <span class="string">&#x27;jpg&#x27;</span> || imgType === <span class="string">&#x27;png&#x27;</span> || imgType === <span class="string">&#x27;gif&#x27;</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;is image&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用match匹配正则表达式</span></span><br><span class="line"><span class="keyword">if</span>(imgType.match(<span class="regexp">/.*?(gif|png|jpg)/gi</span>))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;is image&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Symbol&#x27;</span></span><br><span class="line"><span class="keyword">let</span> message = <span class="string">&#x27;Hello,I\&#x27;m&#x27;</span> + name + <span class="string">&#x27;take care &#x27;</span><span class="comment">// 采用传统加号，看着很冗余,且容易出错</span></span><br><span class="line"><span class="comment">// 艾玛，模板字符香，真想</span></span><br><span class="line"><span class="keyword">let</span> message = <span class="string">`Hello,I&#x27;m <span class="subst">$&#123;name&#125;</span> take care `</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;常量赋值&quot;&gt;&lt;a href=&quot;#常量赋值&quot; class=&quot;headerlink&quot; title=&quot;常量赋值&quot;&gt;&lt;/a&gt;常量赋值&lt;/h2&gt;&lt;h3 id=&quot;引用数据类型&quot;&gt;&lt;a href=&quot;#引用数据类型&quot; class=&quot;headerlink&quot; title=&quot;引用数据类型&quot;&gt;&lt;/a&gt;引用数据类型&lt;/h3&gt;&lt;p&gt;包括接口中返回的数据，要做好兜底&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; lastName = fullName[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] || &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; propertyValue=&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.attr || &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;指明类型&quot;&gt;&lt;a href=&quot;#指明类型&quot; class=&quot;headerlink&quot; title=&quot;指明类型&quot;&gt;&lt;/a&gt;指明类型&lt;/h3&gt;&lt;p&gt;要按强类型风格写代码定义变量的时候要指明类型，并且在变量声明之后，不要随意的去更改变量的数据类型&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 假设声明三个变量a,b,c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a,b,c; &lt;span class=&quot;comment&quot;&gt;// difference，定义变量时没有指明类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, b = [], c = &amp;#123;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;逻辑判断&quot;&gt;&lt;a href=&quot;#逻辑判断&quot; class=&quot;headerlink&quot; title=&quot;逻辑判断&quot;&gt;&lt;/a&gt;逻辑判断&lt;/h2&gt;&lt;h3 id=&quot;逻辑判断注意&quot;&gt;&lt;a href=&quot;#逻辑判断注意&quot; class=&quot;headerlink&quot; title=&quot;==逻辑判断注意&quot;&gt;&lt;/a&gt;&lt;code&gt;==&lt;/code&gt;逻辑判断注意&lt;/h3&gt;&lt;p&gt;&lt;code&gt;==&lt;/code&gt; 表示只要值相等即为真，&lt;code&gt;===&lt;/code&gt; 要求不仅值相等，而且也要求类型相同&lt;br&gt;使用== 有时候会达不到预期的结果，埋下隐患&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;  == &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;          &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;  == &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;         &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;         &lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;        &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&amp;#x27;false&amp;#x27;&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; == &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; == &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;       &lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; == &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;数据类型不确定&quot;&gt;&lt;a href=&quot;#数据类型不确定&quot; class=&quot;headerlink&quot; title=&quot;数据类型不确定&quot;&gt;&lt;/a&gt;数据类型不确定&lt;/h3&gt;&lt;p&gt;如果变量的数据类型不确定，那咱就手动的转换一下，让它确定&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; total = &lt;span class=&quot;string&quot;&gt;&amp;quot;6&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(total) === &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&amp;#123;&amp;#125; &lt;span class=&quot;comment&quot;&gt;// grace 手动转换一下数据类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://i100.xyz/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="优雅" scheme="https://i100.xyz/tags/%E4%BC%98%E9%9B%85/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令总结</title>
    <link href="https://i100.xyz/posts/acc3d3b0.html"/>
    <id>https://i100.xyz/posts/acc3d3b0.html</id>
    <published>2022-01-07T16:00:00.000Z</published>
    <updated>2022-01-09T09:28:43.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;# test&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin git@github.com:foxscalliom/test.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="拉取仓库"><a href="#拉取仓库" class="headerlink" title="拉取仓库"></a>拉取仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:foxscalliom/test.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h2 id="不保留本地"><a href="#不保留本地" class="headerlink" title="不保留本地"></a>不保留本地</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard </span><br><span class="line">git pull origin main</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;新建仓库&quot;&gt;&lt;a href=&quot;#新建仓库&quot; class=&quot;headerlink&quot; title=&quot;新建仓库&quot;&gt;&lt;/a&gt;新建仓库&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;# test&amp;quot; &amp;gt;&amp;gt; README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &amp;quot;first commit&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch -M main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin git@github.com:foxscalliom/test.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push -u origin main&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Git" scheme="https://i100.xyz/categories/Git/"/>
    
    
    <category term="github" scheme="https://i100.xyz/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>在centos7安装nodejs并升级nodejs版本</title>
    <link href="https://i100.xyz/posts/59268fdb.html"/>
    <id>https://i100.xyz/posts/59268fdb.html</id>
    <published>2022-01-06T16:00:00.000Z</published>
    <updated>2022-01-09T09:28:43.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装-nodejs"><a href="#1-安装-nodejs" class="headerlink" title="1. 安装 nodejs"></a>1. 安装 nodejs</h2><hr><h3 id="1-1-使用-EPEL-安装"><a href="#1-1-使用-EPEL-安装" class="headerlink" title="1.1 使用 EPEL 安装"></a>1.1 使用 EPEL 安装</h3><p>EPEL（Extra Packages for Enterprise Linux）企业版 Linux 的额外软件包，是 Fedora 小组维护的一个软件仓库项目，为 RHEL/CentOS 提供他们默认不提供的软件包。<br>先确认系统是否已经安装了 epel-release 包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum info epel-release</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><p>如果有输出有关 epel-release 的已安装信息，则说明已经安装，如果提示没有安装或可安装，则安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install epel-release</span><br></pre></td></tr></table></figure><p>安装完后，就可以使用 yum 命令安装 nodejs 了，安装的一般会是 6.x 的版本，并且会将 npm(3.x) 作为依赖包一起安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install nodejs</span><br></pre></td></tr></table></figure><p>安装完成后，验证是否正确的安装，<code>node -v</code>，如果输出如下版本信息，说明成功安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v6.13.3</span><br></pre></td></tr></table></figure><p>问题来了，现在 nodejs 发的版本比较快，有些新的框架需要 node 的新版本，那如何升级。到现在，node 的最新版本是<code>10.4.1</code>，那么，下面介绍如何升级 nodejs</p><h3 id="1-2-卸载-nodejs"><a href="#1-2-卸载-nodejs" class="headerlink" title="1.2 卸载 nodejs"></a>1.2 卸载 nodejs</h3><blockquote><p>注意：这里卸载并非必要步骤。只是提供卸载的方案，请按需操作，不要安装后又删除又进行安装掉进死循环了。</p></blockquote><p>1.2.1 使用 yum 先删除一次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove nodejs npm -y</span><br></pre></td></tr></table></figure><p>1.2.2 手动删除残留</p><ul><li>  进入 /usr/local/lib 删除所有 node 和 node_modules 文件夹</li><li>  进入 /usr/local/include 删除所有 node 和 node_modules 文件夹</li><li>  检查 ~ 文件夹里面的 “local” “lib” “include” 文件夹，然后删除里面的所有 “node” 和 “node_modules” 文件夹</li><li>  可以使用以下命令查找 <code>$ find ~/ -name node</code> <code>$ find ~/ -name node_modules</code></li></ul><p>1.2.3 进入 /usr/local/bin 删除 node 的可执行文件</p><ul><li>  删除: /usr/local/bin/npm</li><li>  删除: /usr/local/share/man/man1/node.1</li><li>  删除: /usr/local/lib/dtrace/node.d</li><li>  删除: rm -rf /home/[homedir]/.npm</li><li>  删除: rm -rf /home/root/.npm</li></ul><h2 id="2-升级-nodesj"><a href="#2-升级-nodesj" class="headerlink" title="2. 升级 nodesj"></a>2. 升级 nodesj</h2><hr><h3 id="2-1-安装-n"><a href="#2-1-安装-n" class="headerlink" title="2.1 安装 n"></a>2.1 安装 n</h3><p>n 是 nodejs 管理工具，是 TJ 写的，Github: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RqL24=">https://github.com/tj/n<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g n</span><br></pre></td></tr></table></figure><h3 id="2-2-安装-nodejs-版本"><a href="#2-2-安装-nodejs-版本" class="headerlink" title="2.2 安装 nodejs 版本"></a>2.2 安装 nodejs 版本</h3><p>安装最新版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ n latest</span><br></pre></td></tr></table></figure><p>安装指定版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ n 8.11.3  </span><br></pre></td></tr></table></figure><h3 id="2-3-切换-nodejs-版本"><a href="#2-3-切换-nodejs-版本" class="headerlink" title="2.3 切换 nodejs 版本"></a>2.3 切换 nodejs 版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ n</span><br></pre></td></tr></table></figure><p>选择已安装的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node/8.11.3</span><br><span class="line">node/10.4.1</span><br></pre></td></tr></table></figure><p>查看当前版本<code>node -v</code>，下面表示已切换成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v8.13.3</span><br></pre></td></tr></table></figure><p>但问题来了，切换后，查看版本还是原来的 v6.13.3，看下面 <strong>使用 n 切换 nodejs 版本失效的解决办法</strong></p><h2 id="3-切换失效的解决办法"><a href="#3-切换失效的解决办法" class="headerlink" title="3 切换失效的解决办法"></a>3 切换失效的解决办法</h2><hr><h3 id="3-1-查看-node-当前安装路径"><a href="#3-1-查看-node-当前安装路径" class="headerlink" title="3.1 查看 node 当前安装路径"></a>3.1 查看 node 当前安装路径</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ which node</span><br><span class="line">/usr/local/bin/node #举个例子</span><br></pre></td></tr></table></figure><h3 id="3-2-修改默认路径"><a href="#3-2-修改默认路径" class="headerlink" title="3.2 修改默认路径"></a>3.2 修改默认路径</h3><p>而 n 默认安装路径是 /usr/local，若你的 node 不是在此路径下，n 切换版本就不能把 bin、lib、include、share 复制该路径中，所以我们必须通过 N_PREFIX 变量来修改 n 的默认 node 安装路径。<br>编辑环境配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.bash_profile</span><br></pre></td></tr></table></figure><h3 id="3-3-将下面两行代码插入到文件末尾："><a href="#3-3-将下面两行代码插入到文件末尾：" class="headerlink" title="3.3 将下面两行代码插入到文件末尾："></a>3.3 将下面两行代码插入到文件末尾：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export N_PREFIX=/usr/local #node实际安装位置</span><br><span class="line">export PATH=$N_PREFIX/bin:$PATH</span><br></pre></td></tr></table></figure><h3 id="3-4-wq保存退出"><a href="#3-4-wq保存退出" class="headerlink" title="3.4 :wq保存退出"></a>3.4 <code>:wq</code>保存退出</h3><h3 id="3-5-执行-source-使修改生效。"><a href="#3-5-执行-source-使修改生效。" class="headerlink" title="3.5 执行 source 使修改生效。"></a>3.5 执行 source 使修改生效。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure><h3 id="3-6-这时候再查看node-v发现版本切换成功了。"><a href="#3-6-这时候再查看node-v发现版本切换成功了。" class="headerlink" title="3.6 这时候再查看node -v发现版本切换成功了。"></a>3.6 这时候再查看<code>node -v</code>发现版本切换成功了。</h3>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-安装-nodejs&quot;&gt;&lt;a href=&quot;#1-安装-nodejs&quot; class=&quot;headerlink&quot; title=&quot;1. 安装 nodejs&quot;&gt;&lt;/a&gt;1. 安装 nodejs&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;1-1-使用-EPEL-安装&quot;&gt;&lt;a href=&quot;#1-1-使用-EPEL-安装&quot; class=&quot;headerlink&quot; title=&quot;1.1 使用 EPEL 安装&quot;&gt;&lt;/a&gt;1.1 使用 EPEL 安装&lt;/h3&gt;&lt;p&gt;EPEL（Extra Packages for Enterprise Linux）企业版 Linux 的额外软件包，是 Fedora 小组维护的一个软件仓库项目，为 RHEL/CentOS 提供他们默认不提供的软件包。&lt;br&gt;先确认系统是否已经安装了 epel-release 包：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ yum info epel-release&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://i100.xyz/posts/4a17b156.html"/>
    <id>https://i100.xyz/posts/4a17b156.html</id>
    <published>2021-12-31T16:00:00.000Z</published>
    <updated>2022-01-09T09:28:43.395Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo<i class="fa fa-external-link-alt"></i></span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation<i class="fa fa-external-link-alt"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting<i class="fa fa-external-link-alt"></i></span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub<i class="fa fa-external-link-alt"></i></span>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing<i class="fa fa-external-link-alt"></i></span></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server<i class="fa fa-external-link-alt"></i></span></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating<i class="fa fa-external-link-alt"></i></span></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s">Deployment<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9oZXhvLmlvLw==&quot;&gt;Hexo&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;! This is your very first post. Check &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&quot;&gt;documentation&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&quot;&gt;troubleshooting&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt; or you can ask me on &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&quot;&gt;GitHub&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
